{"version":3,"sources":["../src/useWallet.tsx","../src/WalletProvider.tsx","../src/index.tsx"],"sourcesContent":["import {\n  AccountInfo,\n  NetworkInfo,\n  WalletInfo,\n  SignMessagePayload,\n  SignMessageResponse,\n  Wallet,\n  InputGenerateTransactionOptions,\n  AnyRawTransaction,\n  InputTransactionData,\n  InputSubmitTransactionData,\n  PendingTransactionResponse,\n  AccountAuthenticator,\n  Types,\n  WalletName,\n  AptosChangeNetworkOutput,\n  Network,\n  AptosStandardSupportedWallet,\n} from \"@aptos-labs/wallet-adapter-core\";\nimport { createContext, useContext } from \"react\";\n\nexport interface WalletContextState {\n  connected: boolean;\n  isLoading: boolean;\n  account: AccountInfo | null;\n  network: NetworkInfo | null;\n  connect(walletName: WalletName): void;\n  disconnect(): void;\n  wallet: WalletInfo | null;\n  wallets?: ReadonlyArray<Wallet | AptosStandardSupportedWallet>;\n  signAndSubmitTransaction(transaction: InputTransactionData): Promise<any>;\n  signTransaction(\n    transactionOrPayload: AnyRawTransaction | Types.TransactionPayload,\n    asFeePayer?: boolean,\n    options?: InputGenerateTransactionOptions\n  ): Promise<AccountAuthenticator>;\n  submitTransaction(\n    transaction: InputSubmitTransactionData\n  ): Promise<PendingTransactionResponse>;\n  signMessage(message: SignMessagePayload): Promise<SignMessageResponse>;\n  signMessageAndVerify(message: SignMessagePayload): Promise<boolean>;\n  changeNetwork(network: Network): Promise<AptosChangeNetworkOutput>;\n}\n\nconst DEFAULT_CONTEXT = {\n  connected: false,\n};\n\nexport const WalletContext = createContext<WalletContextState>(\n  DEFAULT_CONTEXT as WalletContextState\n);\n\nexport function useWallet(): WalletContextState {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n","import {\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { WalletContext } from \"./useWallet\";\nimport type {\n  AccountInfo,\n  NetworkInfo,\n  SignMessagePayload,\n  Wallet,\n  WalletInfo,\n  InputGenerateTransactionOptions,\n  AnyRawTransaction,\n  InputSubmitTransactionData,\n  AccountAuthenticator,\n  PendingTransactionResponse,\n  SignMessageResponse,\n  WalletName,\n  Types,\n  InputTransactionData,\n  Network,\n  AptosStandardSupportedWallet,\n  AvailableWallets,\n} from \"@aptos-labs/wallet-adapter-core\";\nimport { WalletCore } from \"@aptos-labs/wallet-adapter-core\";\n\nexport interface AptosWalletProviderProps {\n  children: ReactNode;\n  plugins?: ReadonlyArray<Wallet>;\n  optInWallets?: ReadonlyArray<AvailableWallets>;\n  autoConnect?: boolean;\n  onError?: (error: any) => void;\n}\n\nconst initialState: {\n  account: AccountInfo | null;\n  network: NetworkInfo | null;\n  connected: boolean;\n  wallet: WalletInfo | null;\n} = {\n  connected: false,\n  account: null,\n  network: null,\n  wallet: null,\n};\n\n/**\n * Supported props to pass into the provider\n *\n * @param plugins Non AIP-62 supported wallet plugins array\n * @param optInWallets AIP-62 supported wallet names array to only include in the adapter wallets\n * @param autoConnect A boolean flag to indicate if the adapter should auto connect to a wallet\n * @param onError A callback function to execute when there is an error in the adapter\n *\n */\nexport const AptosWalletAdapterProvider: FC<AptosWalletProviderProps> = ({\n  children,\n  plugins,\n  optInWallets,\n  autoConnect = false,\n  onError,\n}: AptosWalletProviderProps) => {\n  const [{ connected, account, network, wallet }, setState] =\n    useState(initialState);\n\n  // a local state to track whether wallet connect request is loading\n  // https://github.com/aptos-labs/aptos-wallet-adapter/issues/94\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const walletCore = useMemo(\n    () => new WalletCore(plugins ?? [], optInWallets ?? []),\n    []\n  );\n  const [wallets, setWallets] = useState<\n    ReadonlyArray<Wallet | AptosStandardSupportedWallet>\n  >(walletCore.wallets);\n\n  const connect = async (walletName: WalletName) => {\n    try {\n      setIsLoading(true);\n      await walletCore.connect(walletName);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const disconnect = async () => {\n    try {\n      await walletCore.disconnect();\n    } catch (error) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const signTransaction = async (\n    transaction: AnyRawTransaction | Types.TransactionPayload,\n    asFeePayer?: boolean,\n    options?: InputGenerateTransactionOptions\n  ): Promise<AccountAuthenticator> => {\n    try {\n      return await walletCore.signTransaction(transaction, asFeePayer, options);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const signMessage = async (\n    message: SignMessagePayload\n  ): Promise<SignMessageResponse> => {\n    try {\n      return await walletCore.signMessage(message);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const signMessageAndVerify = async (\n    message: SignMessagePayload\n  ): Promise<boolean> => {\n    try {\n      return await walletCore.signMessageAndVerify(message);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const submitTransaction = async (\n    transaction: InputSubmitTransactionData\n  ): Promise<PendingTransactionResponse> => {\n    try {\n      return await walletCore.submitTransaction(transaction);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const signAndSubmitTransaction = async (\n    transaction: InputTransactionData\n  ) => {\n    try {\n      return await walletCore.signAndSubmitTransaction(transaction);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  const changeNetwork = async (network: Network) => {\n    try {\n      return await walletCore.changeNetwork(network);\n    } catch (error: any) {\n      if (onError) onError(error);\n      return Promise.reject(error);\n    }\n  };\n\n  useEffect(() => {\n    if (autoConnect) {\n      if (localStorage.getItem(\"AptosWalletName\") && !connected) {\n        connect(localStorage.getItem(\"AptosWalletName\") as WalletName);\n      } else {\n        // if we dont use autoconnect set the connect is loading to false\n        setIsLoading(false);\n      }\n    }\n  }, [wallets]);\n\n  useEffect(() => {\n    if (connected) {\n      walletCore.onAccountChange();\n      walletCore.onNetworkChange();\n    }\n  }, [connected]);\n\n  // Handle the adapter's connect event\n  const handleConnect = () => {\n    setState((state) => {\n      return {\n        ...state,\n        connected: true,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: walletCore.wallet,\n      };\n    });\n  };\n\n  // Handle the adapter's disconnect event\n  const handleDisconnect = () => {\n    if (!connected) return;\n    setState((state) => {\n      return {\n        ...state,\n        connected: false,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: null,\n      };\n    });\n  };\n\n  // Handle the adapter's account change event\n  const handleAccountChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState((state) => {\n      return {\n        ...state,\n        account: walletCore.account,\n      };\n    });\n  }, [connected]);\n\n  // Handle the adapter's network event\n  const handleNetworkChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState((state) => {\n      return {\n        ...state,\n        network: walletCore.network,\n      };\n    });\n  }, [connected]);\n\n  const handleReadyStateChange = (updatedWallet: Wallet) => {\n    // Create a new array with updated values\n    const updatedWallets = (wallets as Wallet[])?.map((wallet) => {\n      if (wallet.name === updatedWallet.name) {\n        // Return a new object with updated value\n        return { ...wallet, readyState: updatedWallet.readyState };\n      }\n      return wallet;\n    });\n    setWallets(updatedWallets);\n  };\n\n  const handleStandardWalletsAdded = (\n    standardWallet: Wallet | AptosStandardSupportedWallet\n  ) => {\n    // Manage current wallet state by removing optional duplications\n    // as new wallets are coming\n    const existingWalletIndex = wallets.findIndex(\n      (wallet) => wallet.name == standardWallet.name\n    );\n    if (existingWalletIndex !== -1) {\n      // If wallet exists, replace it with the new wallet\n      setWallets((wallets) => [\n        ...wallets.slice(0, existingWalletIndex),\n        standardWallet,\n        ...wallets.slice(existingWalletIndex + 1),\n      ]);\n    } else {\n      // If wallet doesn't exist, add it to the array\n      setWallets((wallets) => [...wallets, standardWallet]);\n    }\n  };\n\n  useEffect(() => {\n    walletCore.on(\"connect\", handleConnect);\n    walletCore.on(\"disconnect\", handleDisconnect);\n    walletCore.on(\"accountChange\", handleAccountChange);\n    walletCore.on(\"networkChange\", handleNetworkChange);\n    walletCore.on(\"readyStateChange\", handleReadyStateChange);\n    walletCore.on(\"standardWalletsAdded\", handleStandardWalletsAdded);\n    return () => {\n      walletCore.off(\"connect\", handleConnect);\n      walletCore.off(\"disconnect\", handleDisconnect);\n      walletCore.off(\"accountChange\", handleAccountChange);\n      walletCore.off(\"networkChange\", handleNetworkChange);\n      walletCore.off(\"readyStateChange\", handleReadyStateChange);\n      walletCore.off(\"standardWalletsAdded\", handleStandardWalletsAdded);\n    };\n  }, [wallets, connected]);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        connect,\n        account,\n        network,\n        connected,\n        disconnect,\n        wallet,\n        wallets,\n        signAndSubmitTransaction,\n        signTransaction,\n        signMessage,\n        signMessageAndVerify,\n        isLoading,\n        submitTransaction,\n        changeNetwork,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n};\n","import * as React from \"react\";\nexport * from \"./useWallet\";\nexport * from \"./WalletProvider\";\nexport * from \"@aptos-labs/wallet-adapter-core\";\n"],"mappings":"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","names":["network","wallet","wallets"]}
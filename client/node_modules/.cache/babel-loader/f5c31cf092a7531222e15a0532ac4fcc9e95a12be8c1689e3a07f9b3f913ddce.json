{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/DataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Nexus-level DataContext.js\n// Retains the original data fetching and storage logic, while adding\n// advanced error handling, improved logging, and performance considerations.\n\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext(null);\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [portfolioData, setPortfolioData] = useState(null);\n  const [stakingData, setStakingData] = useState(null);\n  const [marketData, setMarketData] = useState(null);\n  const [newsData, setNewsData] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [error, setError] = useState(null);\n  const [recommendationHistory, setRecommendationHistory] = useState([]);\n\n  /**\r\n   * Main data fetch triggered on mount and at intervals (e.g., 5 minutes).\r\n   */\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      await Promise.all([fetchPortfolioData(), fetchStakingData(), fetchMarketData(), fetchNewsData()]);\n      setLastUpdated(new Date());\n      setError(null);\n    } catch (err) {\n      console.error('[DataContext] Error fetching data:', err);\n      setError('Failed to load data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // On mount, initial fetch plus periodic refresh every 5 minutes\n  useEffect(() => {\n    fetchData();\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n    return () => clearInterval(intervalId);\n  }, [fetchData]);\n\n  // Mocked portfolio data fetch\n  const fetchPortfolioData = async walletAddress => {\n    try {\n      // Mock data\n      const mockData = {\n        apt: {\n          amount: '10.5',\n          valueUSD: 105.0\n        },\n        stAPT: {\n          amount: '5.2',\n          valueUSD: 54.6\n        },\n        tAPT: {\n          amount: '0',\n          valueUSD: 0\n        },\n        totalValueUSD: 159.6\n      };\n      setPortfolioData(mockData);\n      return mockData;\n    } catch (err) {\n      console.error('[DataContext] fetchPortfolioData error:', err);\n      throw err;\n    }\n  };\n\n  // Mocked staking data fetch\n  const fetchStakingData = async () => {\n    try {\n      const mockStaking = {\n        protocols: {\n          amnis: {\n            staking: {\n              apr: '7.2',\n              product: 'stAPT'\n            },\n            blendedStrategy: {\n              apr: '7.6'\n            }\n          },\n          thala: {\n            staking: {\n              apr: '7.5',\n              product: 'sthAPT'\n            },\n            blendedStrategy: {\n              apr: '7.9'\n            }\n          },\n          tortuga: {\n            staking: {\n              apr: '7.0',\n              product: 'tAPT'\n            },\n            blendedStrategy: {\n              apr: '7.0'\n            }\n          },\n          ditto: {\n            staking: {\n              apr: '7.8',\n              product: 'dAPT'\n            },\n            blendedStrategy: {\n              apr: '7.8'\n            }\n          }\n        }\n      };\n      setStakingData(mockStaking);\n      return mockStaking;\n    } catch (err) {\n      console.error('[DataContext] fetchStakingData error:', err);\n      throw err;\n    }\n  };\n\n  // Mocked market data fetch\n  const fetchMarketData = async () => {\n    try {\n      const mockMarkets = {\n        tokens: [{\n          symbol: 'APT',\n          price: 10.0,\n          change24h: 2.5\n        }, {\n          symbol: 'stAPT',\n          price: 10.5,\n          change24h: 2.6\n        }, {\n          symbol: 'tAPT',\n          price: 10.3,\n          change24h: 2.4\n        }]\n      };\n      setMarketData(mockMarkets);\n      return mockMarkets;\n    } catch (err) {\n      console.error('[DataContext] fetchMarketData error:', err);\n      throw err;\n    }\n  };\n\n  // Mocked news data fetch\n  const fetchNewsData = async () => {\n    try {\n      const mockNews = [{\n        id: 1,\n        title: 'New Staking Protocol Launches on Aptos',\n        date: '2025-03-20',\n        url: '#'\n      }, {\n        id: 2,\n        title: 'Aptos DeFi TVL Reaches New ATH',\n        date: '2025-03-25',\n        url: '#'\n      }];\n      setNewsData(mockNews);\n      return mockNews;\n    } catch (err) {\n      console.error('[DataContext] fetchNewsData error:', err);\n      throw err;\n    }\n  };\n\n  /**\r\n   * Load previously stored recommendation history (mock).\r\n   */\n  const loadRecommendationHistory = async () => {\n    try {\n      // Mock data\n      const history = [{\n        title: 'Balanced Yield Strategy',\n        timestamp: new Date(Date.now() - 86400000).toISOString(),\n        totalApr: '7.8',\n        allocation: [{\n          protocol: 'Amnis',\n          product: 'Liquid Staking',\n          percentage: 40\n        }, {\n          protocol: 'Thala',\n          product: 'Liquid Staking',\n          percentage: 30\n        }, {\n          protocol: 'PancakeSwap',\n          product: 'AMM Liquidity',\n          percentage: 20\n        }, {\n          protocol: 'Ditto',\n          product: 'Liquid Staking',\n          percentage: 10\n        }]\n      }, {\n        title: 'Conservative Staking',\n        timestamp: new Date(Date.now() - 7 * 86400000).toISOString(),\n        totalApr: '7.3',\n        allocation: [{\n          protocol: 'Amnis',\n          product: 'Liquid Staking',\n          percentage: 50\n        }, {\n          protocol: 'Thala',\n          product: 'Liquid Staking',\n          percentage: 50\n        }]\n      }];\n      setRecommendationHistory(history);\n      return history;\n    } catch (err) {\n      console.error('[DataContext] loadRecommendationHistory error:', err);\n      return [];\n    }\n  };\n\n  /**\r\n   * Save a new recommendation in memory (and possibly localStorage).\r\n   */\n  const saveRecommendation = recommendation => {\n    if (!recommendation) return;\n    const recWithTime = {\n      ...recommendation,\n      timestamp: recommendation.timestamp || new Date().toISOString()\n    };\n    setRecommendationHistory(prev => [recWithTime, ...prev]);\n    return recWithTime;\n  };\n  const value = {\n    isLoading,\n    portfolioData,\n    stakingData,\n    marketData,\n    newsData,\n    lastUpdated,\n    error,\n    recommendationHistory,\n    // Methods\n    refreshData: fetchData,\n    fetchPortfolioData,\n    loadRecommendationHistory,\n    saveRecommendation\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook\n_s(DataProvider, \"HPJgBYKgdMDQfLM0GyfOwZx7S6U=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const ctx = useContext(DataContext);\n  if (!ctx) {\n    throw new Error('[useData] must be used within a DataProvider.');\n  }\n  return ctx;\n};\n_s2(useData, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nexport default DataContext;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","isLoading","setIsLoading","portfolioData","setPortfolioData","stakingData","setStakingData","marketData","setMarketData","newsData","setNewsData","lastUpdated","setLastUpdated","Date","error","setError","recommendationHistory","setRecommendationHistory","fetchData","Promise","all","fetchPortfolioData","fetchStakingData","fetchMarketData","fetchNewsData","err","console","intervalId","setInterval","clearInterval","walletAddress","mockData","apt","amount","valueUSD","stAPT","tAPT","totalValueUSD","mockStaking","protocols","amnis","staking","apr","product","blendedStrategy","thala","tortuga","ditto","mockMarkets","tokens","symbol","price","change24h","mockNews","id","title","date","url","loadRecommendationHistory","history","timestamp","now","toISOString","totalApr","allocation","protocol","percentage","saveRecommendation","recommendation","recWithTime","prev","value","refreshData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","ctx","Error","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/DataContext.jsx"],"sourcesContent":["// Nexus-level DataContext.js\r\n// Retains the original data fetching and storage logic, while adding\r\n// advanced error handling, improved logging, and performance considerations.\r\n\r\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\n\r\n// Create context\r\nexport const DataContext = createContext(null);\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [portfolioData, setPortfolioData] = useState(null);\r\n  const [stakingData, setStakingData] = useState(null);\r\n  const [marketData, setMarketData] = useState(null);\r\n  const [newsData, setNewsData] = useState([]);\r\n  const [lastUpdated, setLastUpdated] = useState(new Date());\r\n  const [error, setError] = useState(null);\r\n  const [recommendationHistory, setRecommendationHistory] = useState([]);\r\n\r\n  /**\r\n   * Main data fetch triggered on mount and at intervals (e.g., 5 minutes).\r\n   */\r\n  const fetchData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      await Promise.all([\r\n        fetchPortfolioData(),\r\n        fetchStakingData(),\r\n        fetchMarketData(),\r\n        fetchNewsData(),\r\n      ]);\r\n      setLastUpdated(new Date());\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('[DataContext] Error fetching data:', err);\r\n      setError('Failed to load data. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // On mount, initial fetch plus periodic refresh every 5 minutes\r\n  useEffect(() => {\r\n    fetchData();\r\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\r\n    return () => clearInterval(intervalId);\r\n  }, [fetchData]);\r\n\r\n  // Mocked portfolio data fetch\r\n  const fetchPortfolioData = async (walletAddress) => {\r\n    try {\r\n      // Mock data\r\n      const mockData = {\r\n        apt: { amount: '10.5', valueUSD: 105.0 },\r\n        stAPT: { amount: '5.2', valueUSD: 54.6 },\r\n        tAPT: { amount: '0', valueUSD: 0 },\r\n        totalValueUSD: 159.6,\r\n      };\r\n      setPortfolioData(mockData);\r\n      return mockData;\r\n    } catch (err) {\r\n      console.error('[DataContext] fetchPortfolioData error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Mocked staking data fetch\r\n  const fetchStakingData = async () => {\r\n    try {\r\n      const mockStaking = {\r\n        protocols: {\r\n          amnis: {\r\n            staking: { apr: '7.2', product: 'stAPT' },\r\n            blendedStrategy: { apr: '7.6' },\r\n          },\r\n          thala: {\r\n            staking: { apr: '7.5', product: 'sthAPT' },\r\n            blendedStrategy: { apr: '7.9' },\r\n          },\r\n          tortuga: {\r\n            staking: { apr: '7.0', product: 'tAPT' },\r\n            blendedStrategy: { apr: '7.0' },\r\n          },\r\n          ditto: {\r\n            staking: { apr: '7.8', product: 'dAPT' },\r\n            blendedStrategy: { apr: '7.8' },\r\n          },\r\n        },\r\n      };\r\n      setStakingData(mockStaking);\r\n      return mockStaking;\r\n    } catch (err) {\r\n      console.error('[DataContext] fetchStakingData error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Mocked market data fetch\r\n  const fetchMarketData = async () => {\r\n    try {\r\n      const mockMarkets = {\r\n        tokens: [\r\n          { symbol: 'APT', price: 10.0, change24h: 2.5 },\r\n          { symbol: 'stAPT', price: 10.5, change24h: 2.6 },\r\n          { symbol: 'tAPT', price: 10.3, change24h: 2.4 },\r\n        ],\r\n      };\r\n      setMarketData(mockMarkets);\r\n      return mockMarkets;\r\n    } catch (err) {\r\n      console.error('[DataContext] fetchMarketData error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Mocked news data fetch\r\n  const fetchNewsData = async () => {\r\n    try {\r\n      const mockNews = [\r\n        { id: 1, title: 'New Staking Protocol Launches on Aptos', date: '2025-03-20', url: '#' },\r\n        { id: 2, title: 'Aptos DeFi TVL Reaches New ATH', date: '2025-03-25', url: '#' },\r\n      ];\r\n      setNewsData(mockNews);\r\n      return mockNews;\r\n    } catch (err) {\r\n      console.error('[DataContext] fetchNewsData error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Load previously stored recommendation history (mock).\r\n   */\r\n  const loadRecommendationHistory = async () => {\r\n    try {\r\n      // Mock data\r\n      const history = [\r\n        {\r\n          title: 'Balanced Yield Strategy',\r\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\r\n          totalApr: '7.8',\r\n          allocation: [\r\n            { protocol: 'Amnis', product: 'Liquid Staking', percentage: 40 },\r\n            { protocol: 'Thala', product: 'Liquid Staking', percentage: 30 },\r\n            { protocol: 'PancakeSwap', product: 'AMM Liquidity', percentage: 20 },\r\n            { protocol: 'Ditto', product: 'Liquid Staking', percentage: 10 },\r\n          ],\r\n        },\r\n        {\r\n          title: 'Conservative Staking',\r\n          timestamp: new Date(Date.now() - 7 * 86400000).toISOString(),\r\n          totalApr: '7.3',\r\n          allocation: [\r\n            { protocol: 'Amnis', product: 'Liquid Staking', percentage: 50 },\r\n            { protocol: 'Thala', product: 'Liquid Staking', percentage: 50 },\r\n          ],\r\n        },\r\n      ];\r\n      setRecommendationHistory(history);\r\n      return history;\r\n    } catch (err) {\r\n      console.error('[DataContext] loadRecommendationHistory error:', err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Save a new recommendation in memory (and possibly localStorage).\r\n   */\r\n  const saveRecommendation = (recommendation) => {\r\n    if (!recommendation) return;\r\n    const recWithTime = {\r\n      ...recommendation,\r\n      timestamp: recommendation.timestamp || new Date().toISOString(),\r\n    };\r\n    setRecommendationHistory((prev) => [recWithTime, ...prev]);\r\n    return recWithTime;\r\n  };\r\n\r\n  const value = {\r\n    isLoading,\r\n    portfolioData,\r\n    stakingData,\r\n    marketData,\r\n    newsData,\r\n    lastUpdated,\r\n    error,\r\n    recommendationHistory,\r\n\r\n    // Methods\r\n    refreshData: fetchData,\r\n    fetchPortfolioData,\r\n    loadRecommendationHistory,\r\n    saveRecommendation,\r\n  };\r\n\r\n  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;\r\n};\r\n\r\n// Custom hook\r\nexport const useData = () => {\r\n  const ctx = useContext(DataContext);\r\n  if (!ctx) {\r\n    throw new Error('[useData] must be used within a DataProvider.');\r\n  }\r\n  return ctx;\r\n};\r\n\r\nexport default DataContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
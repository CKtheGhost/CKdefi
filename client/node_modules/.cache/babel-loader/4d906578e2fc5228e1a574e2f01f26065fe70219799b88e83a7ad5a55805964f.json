{"ast":null,"code":"/**\r\n * Service to handle wallet connection and interactions\r\n */\n\n// Import required wallet adapters for Aptos\n// Note: This is a placeholder - you'll need to install the actual wallet adapters\n// import { AptosWalletAdapter, MartianWalletAdapter, PontemWalletAdapter, RiseWalletAdapter } from '@aptos-labs/wallet-adapter-react';\n\n// Available wallet adapters\nconst getAvailableWallets = () => {\n  // This would come from your installed wallet adapters\n  return [{\n    name: 'Petra',\n    icon: '/assets/images/wallets/petra.png',\n    adapter: 'PetraWalletAdapter',\n    installed: true\n  }, {\n    name: 'Martian',\n    icon: '/assets/images/wallets/martian.png',\n    adapter: 'MartianWalletAdapter',\n    installed: true\n  }, {\n    name: 'Pontem',\n    icon: '/assets/images/wallets/pontem.png',\n    adapter: 'PontemWalletAdapter',\n    installed: false\n  }, {\n    name: 'Rise',\n    icon: '/assets/images/wallets/rise.png',\n    adapter: 'RiseWalletAdapter',\n    installed: false\n  }];\n};\n\n// Connect to a wallet\nconst connectWallet = async walletName => {\n  try {\n    // In a real implementation, you'd use the wallet adapter to connect\n    console.log(`Connecting to ${walletName} wallet...`);\n\n    // Simulate connection delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Return mock data for now\n    return {\n      connected: true,\n      address: '0x123...abc',\n      publicKey: '0x456...def',\n      walletName\n    };\n  } catch (error) {\n    console.error('Wallet connection error:', error);\n    throw new Error(`Failed to connect to ${walletName}: ${error.message}`);\n  }\n};\n\n// Disconnect wallet\nconst disconnectWallet = async () => {\n  try {\n    // Clean up wallet connection\n    localStorage.removeItem('connectedWallet');\n    localStorage.removeItem('walletAddress');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Wallet disconnect error:', error);\n    throw new Error(`Failed to disconnect wallet: ${error.message}`);\n  }\n};\n\n// Sign a transaction\nconst signTransaction = async transaction => {\n  try {\n    // In a real implementation, you'd use the wallet adapter to sign\n    console.log('Signing transaction:', transaction);\n\n    // Simulate signing delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Return mock signed transaction\n    return {\n      ...transaction,\n      signature: '0x789...ghi',\n      signedAt: Date.now()\n    };\n  } catch (error) {\n    console.error('Transaction signing error:', error);\n    throw new Error(`Failed to sign transaction: ${error.message}`);\n  }\n};\n\n// Execute a transaction\nconst executeTransaction = async transaction => {\n  try {\n    // In a real implementation, you'd sign the transaction and submit it to the blockchain\n    console.log('Executing transaction:', transaction);\n\n    // Simulate execution delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Return mock result\n    return {\n      success: true,\n      hash: `0x${Math.random().toString(16).substring(2, 42)}`,\n      blockHeight: Math.floor(Math.random() * 1000000),\n      timestamp: Date.now()\n    };\n  } catch (error) {\n    console.error('Transaction execution error:', error);\n    throw new Error(`Failed to execute transaction: ${error.message}`);\n  }\n};\n\n// Get wallet balance\nconst getWalletBalance = async address => {\n  try {\n    // In a real implementation, you'd query the blockchain for the balance\n    console.log(`Getting balance for ${address}...`);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    // Return mock balance\n    return {\n      apt: 100.5,\n      coins: [{\n        symbol: 'APT',\n        amount: 100.5,\n        value: 1005\n      }, {\n        symbol: 'stAPT',\n        amount: 50.2,\n        value: 502\n      }, {\n        symbol: 'MOD',\n        amount: 200,\n        value: 200\n      }],\n      totalValueUSD: 1707\n    };\n  } catch (error) {\n    console.error('Balance fetch error:', error);\n    throw new Error(`Failed to get wallet balance: ${error.message}`);\n  }\n};\nexport { getAvailableWallets, connectWallet, disconnectWallet, signTransaction, executeTransaction, getWalletBalance };","map":{"version":3,"names":["getAvailableWallets","name","icon","adapter","installed","connectWallet","walletName","console","log","Promise","resolve","setTimeout","connected","address","publicKey","error","Error","message","disconnectWallet","localStorage","removeItem","success","signTransaction","transaction","signature","signedAt","Date","now","executeTransaction","hash","Math","random","toString","substring","blockHeight","floor","timestamp","getWalletBalance","apt","coins","symbol","amount","value","totalValueUSD"],"sources":["/home/ck/compoundefi/client/src/services/walletService.js"],"sourcesContent":["/**\r\n * Service to handle wallet connection and interactions\r\n */\r\n\r\n// Import required wallet adapters for Aptos\r\n// Note: This is a placeholder - you'll need to install the actual wallet adapters\r\n// import { AptosWalletAdapter, MartianWalletAdapter, PontemWalletAdapter, RiseWalletAdapter } from '@aptos-labs/wallet-adapter-react';\r\n\r\n// Available wallet adapters\r\nconst getAvailableWallets = () => {\r\n  // This would come from your installed wallet adapters\r\n  return [\r\n    {\r\n      name: 'Petra',\r\n      icon: '/assets/images/wallets/petra.png',\r\n      adapter: 'PetraWalletAdapter',\r\n      installed: true\r\n    },\r\n    {\r\n      name: 'Martian',\r\n      icon: '/assets/images/wallets/martian.png',\r\n      adapter: 'MartianWalletAdapter',\r\n      installed: true\r\n    },\r\n    {\r\n      name: 'Pontem',\r\n      icon: '/assets/images/wallets/pontem.png',\r\n      adapter: 'PontemWalletAdapter',\r\n      installed: false\r\n    },\r\n    {\r\n      name: 'Rise',\r\n      icon: '/assets/images/wallets/rise.png',\r\n      adapter: 'RiseWalletAdapter',\r\n      installed: false\r\n    }\r\n  ];\r\n};\r\n\r\n// Connect to a wallet\r\nconst connectWallet = async (walletName) => {\r\n  try {\r\n    // In a real implementation, you'd use the wallet adapter to connect\r\n    console.log(`Connecting to ${walletName} wallet...`);\r\n    \r\n    // Simulate connection delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Return mock data for now\r\n    return {\r\n      connected: true,\r\n      address: '0x123...abc',\r\n      publicKey: '0x456...def',\r\n      walletName\r\n    };\r\n  } catch (error) {\r\n    console.error('Wallet connection error:', error);\r\n    throw new Error(`Failed to connect to ${walletName}: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Disconnect wallet\r\nconst disconnectWallet = async () => {\r\n  try {\r\n    // Clean up wallet connection\r\n    localStorage.removeItem('connectedWallet');\r\n    localStorage.removeItem('walletAddress');\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Wallet disconnect error:', error);\r\n    throw new Error(`Failed to disconnect wallet: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Sign a transaction\r\nconst signTransaction = async (transaction) => {\r\n  try {\r\n    // In a real implementation, you'd use the wallet adapter to sign\r\n    console.log('Signing transaction:', transaction);\r\n    \r\n    // Simulate signing delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Return mock signed transaction\r\n    return {\r\n      ...transaction,\r\n      signature: '0x789...ghi',\r\n      signedAt: Date.now()\r\n    };\r\n  } catch (error) {\r\n    console.error('Transaction signing error:', error);\r\n    throw new Error(`Failed to sign transaction: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Execute a transaction\r\nconst executeTransaction = async (transaction) => {\r\n  try {\r\n    // In a real implementation, you'd sign the transaction and submit it to the blockchain\r\n    console.log('Executing transaction:', transaction);\r\n    \r\n    // Simulate execution delay\r\n    await new Promise(resolve => setTimeout(resolve, 1500));\r\n    \r\n    // Return mock result\r\n    return {\r\n      success: true,\r\n      hash: `0x${Math.random().toString(16).substring(2, 42)}`,\r\n      blockHeight: Math.floor(Math.random() * 1000000),\r\n      timestamp: Date.now()\r\n    };\r\n  } catch (error) {\r\n    console.error('Transaction execution error:', error);\r\n    throw new Error(`Failed to execute transaction: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Get wallet balance\r\nconst getWalletBalance = async (address) => {\r\n  try {\r\n    // In a real implementation, you'd query the blockchain for the balance\r\n    console.log(`Getting balance for ${address}...`);\r\n    \r\n    // Simulate API call delay\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    \r\n    // Return mock balance\r\n    return {\r\n      apt: 100.5,\r\n      coins: [\r\n        { symbol: 'APT', amount: 100.5, value: 1005 },\r\n        { symbol: 'stAPT', amount: 50.2, value: 502 },\r\n        { symbol: 'MOD', amount: 200, value: 200 }\r\n      ],\r\n      totalValueUSD: 1707\r\n    };\r\n  } catch (error) {\r\n    console.error('Balance fetch error:', error);\r\n    throw new Error(`Failed to get wallet balance: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport {\r\n  getAvailableWallets,\r\n  connectWallet,\r\n  disconnectWallet,\r\n  signTransaction,\r\n  executeTransaction,\r\n  getWalletBalance\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
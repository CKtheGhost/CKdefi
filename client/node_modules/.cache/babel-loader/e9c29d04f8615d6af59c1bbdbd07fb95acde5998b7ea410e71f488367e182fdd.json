{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/usePortfolio.js\nimport { useState, useEffect, useCallback } from 'react';\nimport api from '../services/api';\nconst usePortfolio = initialAddress => {\n  _s();\n  const [portfolio, setPortfolio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [stakingRecommendations, setStakingRecommendations] = useState(null);\n\n  // Function to fetch portfolio data\n  const fetchPortfolioData = useCallback(async address => {\n    if (!address) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // Get portfolio data from API\n      const response = await api.get(`/wallet/${address}/portfolio`);\n      setPortfolio(response.data);\n\n      // Also fetch staking recommendations\n      try {\n        const recommendationsResponse = await api.get(`/wallet/${address}/recommendations`);\n        setStakingRecommendations(recommendationsResponse.data);\n      } catch (recError) {\n        console.error('Error fetching recommendations:', recError);\n        // Don't set main error state for this, as portfolio data was loaded successfully\n      }\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching portfolio data:', err);\n      setError(err.message || 'Failed to load portfolio data');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load portfolio data on initial render if address is provided\n  useEffect(() => {\n    if (initialAddress) {\n      fetchPortfolioData(initialAddress);\n    }\n  }, [initialAddress, fetchPortfolioData]);\n  return {\n    portfolio,\n    stakingRecommendations,\n    loading,\n    error,\n    fetchPortfolioData\n  };\n};\n_s(usePortfolio, \"3qnY3Rss5bJRb28f4RjbDe0+r2I=\");\nexport default usePortfolio;","map":{"version":3,"names":["useState","useEffect","useCallback","api","usePortfolio","initialAddress","_s","portfolio","setPortfolio","loading","setLoading","error","setError","stakingRecommendations","setStakingRecommendations","fetchPortfolioData","address","response","get","data","recommendationsResponse","recError","console","err","message"],"sources":["/home/ck/compoundefi/client/src/hooks/usePortfolio.js"],"sourcesContent":["// src/hooks/usePortfolio.js\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst usePortfolio = (initialAddress) => {\r\n  const [portfolio, setPortfolio] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [stakingRecommendations, setStakingRecommendations] = useState(null);\r\n\r\n  // Function to fetch portfolio data\r\n  const fetchPortfolioData = useCallback(async (address) => {\r\n    if (!address) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Get portfolio data from API\r\n      const response = await api.get(`/wallet/${address}/portfolio`);\r\n      \r\n      setPortfolio(response.data);\r\n      \r\n      // Also fetch staking recommendations\r\n      try {\r\n        const recommendationsResponse = await api.get(`/wallet/${address}/recommendations`);\r\n        setStakingRecommendations(recommendationsResponse.data);\r\n      } catch (recError) {\r\n        console.error('Error fetching recommendations:', recError);\r\n        // Don't set main error state for this, as portfolio data was loaded successfully\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching portfolio data:', err);\r\n      setError(err.message || 'Failed to load portfolio data');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load portfolio data on initial render if address is provided\r\n  useEffect(() => {\r\n    if (initialAddress) {\r\n      fetchPortfolioData(initialAddress);\r\n    }\r\n  }, [initialAddress, fetchPortfolioData]);\r\n\r\n  return {\r\n    portfolio,\r\n    stakingRecommendations,\r\n    loading,\r\n    error,\r\n    fetchPortfolioData\r\n  };\r\n};\r\n\r\nexport default usePortfolio;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,GAAG,MAAM,iBAAiB;AAEjC,MAAMC,YAAY,GAAIC,cAAc,IAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE1E;EACA,MAAMe,kBAAkB,GAAGb,WAAW,CAAC,MAAOc,OAAO,IAAK;IACxD,IAAI,CAACA,OAAO,EAAE;IAEdN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,WAAWF,OAAO,YAAY,CAAC;MAE9DR,YAAY,CAACS,QAAQ,CAACE,IAAI,CAAC;;MAE3B;MACA,IAAI;QACF,MAAMC,uBAAuB,GAAG,MAAMjB,GAAG,CAACe,GAAG,CAAC,WAAWF,OAAO,kBAAkB,CAAC;QACnFF,yBAAyB,CAACM,uBAAuB,CAACD,IAAI,CAAC;MACzD,CAAC,CAAC,OAAOE,QAAQ,EAAE;QACjBC,OAAO,CAACX,KAAK,CAAC,iCAAiC,EAAEU,QAAQ,CAAC;QAC1D;MACF;MAEA,OAAOJ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZD,OAAO,CAACX,KAAK,CAAC,gCAAgC,EAAEY,GAAG,CAAC;MACpDX,QAAQ,CAACW,GAAG,CAACC,OAAO,IAAI,+BAA+B,CAAC;MACxD,OAAO,IAAI;IACb,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAII,cAAc,EAAE;MAClBU,kBAAkB,CAACV,cAAc,CAAC;IACpC;EACF,CAAC,EAAE,CAACA,cAAc,EAAEU,kBAAkB,CAAC,CAAC;EAExC,OAAO;IACLR,SAAS;IACTM,sBAAsB;IACtBJ,OAAO;IACPE,KAAK;IACLI;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CApDIF,YAAY;AAsDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
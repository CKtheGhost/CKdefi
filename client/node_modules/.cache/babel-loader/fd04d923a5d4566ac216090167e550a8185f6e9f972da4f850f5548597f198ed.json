{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useContext, useEffect } from 'react';\nimport { TransactionContext } from '../context/TransactionContext';\nimport { useWalletContext } from '../context/WalletContext';\nimport { useNotification } from '../context/NotificationContext';\n\n/**\r\n * Custom hook for handling transaction execution and tracking\r\n */\nconst useTransactions = () => {\n  _s();\n  const {\n    pendingTransactions,\n    recentTransactions,\n    isExecuting,\n    executeTransaction,\n    executeStrategyTransaction,\n    executeAIStrategy,\n    addTransaction,\n    status,\n    error,\n    result\n  } = useContext(TransactionContext);\n  const {\n    isConnected\n  } = useWalletContext();\n  const {\n    showNotification\n  } = useNotification();\n\n  // Get transaction history for a specific address\n  const getTransactionHistory = useCallback(async address => {\n    try {\n      if (!address) return [];\n\n      // In a production app, you would fetch from an indexer or your backend\n      // For demo purposes, we'll return recent transactions from context\n      return recentTransactions;\n    } catch (error) {\n      console.error('Failed to fetch transaction history:', error);\n      showNotification('Failed to load transaction history', 'error');\n      return [];\n    }\n  }, [recentTransactions, showNotification]);\n\n  // Execute a custom transaction with wallet\n  const executeCustomTransaction = useCallback(async payload => {\n    try {\n      if (!isConnected) {\n        showNotification('Please connect your wallet to execute transactions', 'error');\n        throw new Error('Wallet not connected');\n      }\n      return await executeTransaction(payload);\n    } catch (error) {\n      console.error('Transaction execution failed:', error);\n      throw error;\n    }\n  }, [isConnected, executeTransaction, showNotification]);\n\n  // Execute a complete strategy (multiple transactions)\n  const executeStrategy = useCallback(async (operations, options = {}) => {\n    try {\n      if (!isConnected) {\n        showNotification('Please connect your wallet to execute transactions', 'error');\n        throw new Error('Wallet not connected');\n      }\n\n      // Map operations to the format expected by executeAIStrategy\n      const formattedOperations = operations.map(op => {\n        return {\n          protocol: op.protocol,\n          type: op.type,\n          amount: op.amount,\n          contractAddress: op.contractAddress || getContractAddress(op.protocol),\n          functionName: op.functionName || determineFunctionName(op.protocol, op.type)\n        };\n      });\n      return await executeAIStrategy(formattedOperations);\n    } catch (error) {\n      console.error('Strategy execution failed:', error);\n      throw error;\n    }\n  }, [isConnected, executeAIStrategy, showNotification]);\n\n  // Helper function to get contract address\n  const getContractAddress = protocol => {\n    const contractAddresses = {\n      amnis: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a\",\n      thala: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6\",\n      tortuga: \"0x952c1b1fc8eb75ee80f432c9d0a84fcda1d5c7481501a7eca9199f1596a60b53\",\n      ditto: \"0xd11107bdf0d6d7040c6c0bfbdecb6545191fdf13e8d8d259952f53e1713f61b5\",\n      aries: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3\",\n      echo: \"0xeab7ea4d635b6b6add79d5045c4a45d8148d88287b1cfa1c3b6a4b56f46839ed\",\n      pancakeswap: \"0xc7efb4076dbe143cbcd98cfaaa929ecfc8f299203dfff63b95ccb6bfe19850fa\",\n      liquidswap: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12\",\n      cetus: \"0x27156bd56eb5637b9adde4d915b596f92d2f28f0ade2eaef48fa73e360e4e8a6\"\n    };\n    return contractAddresses[protocol.toLowerCase()] || null;\n  };\n\n  // Helper function to determine function name\n  const determineFunctionName = (protocol, type) => {\n    var _functionMappings$pro;\n    const functionMappings = {\n      'amnis': {\n        'stake': '::staking::stake',\n        'unstake': '::staking::unstake',\n        'lend': '::lending::supply',\n        'withdraw': '::lending::withdraw',\n        'addLiquidity': '::router::add_liquidity',\n        'removeLiquidity': '::router::remove_liquidity'\n      },\n      'thala': {\n        'stake': '::staking::stake_apt',\n        'unstake': '::staking::unstake_apt',\n        'lend': '::lending::supply_apt',\n        'withdraw': '::lending::withdraw_apt',\n        'addLiquidity': '::router::add_liquidity',\n        'removeLiquidity': '::router::remove_liquidity'\n      },\n      'tortuga': {\n        'stake': '::staking::stake_apt',\n        'unstake': '::staking::unstake_apt'\n      },\n      'echo': {\n        'lend': '::lending::supply',\n        'withdraw': '::lending::withdraw'\n      },\n      'ditto': {\n        'stake': '::staking::stake',\n        'unstake': '::staking::unstake'\n      },\n      'aries': {\n        'lend': '::lending::supply',\n        'withdraw': '::lending::withdraw'\n      },\n      'cetus': {\n        'addLiquidity': '::pool::add_liquidity',\n        'removeLiquidity': '::pool::remove_liquidity'\n      },\n      'pancakeswap': {\n        'addLiquidity': '::router::add_liquidity',\n        'removeLiquidity': '::router::remove_liquidity',\n        'swap': '::router::swap_exact_input'\n      },\n      'liquidswap': {\n        'addLiquidity': '::router::add_liquidity',\n        'removeLiquidity': '::router::remove_liquidity'\n      }\n    };\n    const protocolLower = protocol.toLowerCase();\n    const operationLower = type.toLowerCase();\n\n    // If we have a specific mapping for this protocol and operation type, use it\n    if ((_functionMappings$pro = functionMappings[protocolLower]) !== null && _functionMappings$pro !== void 0 && _functionMappings$pro[operationLower]) {\n      return functionMappings[protocolLower][operationLower];\n    }\n\n    // Otherwise use general mappings\n    switch (operationLower) {\n      case 'stake':\n        return '::staking::stake';\n      case 'unstake':\n        return '::staking::unstake';\n      case 'lend':\n        return '::lending::supply';\n      case 'withdraw':\n        return '::lending::withdraw';\n      case 'addliquidity':\n        return '::router::add_liquidity';\n      case 'removeliquidity':\n        return '::router::remove_liquidity';\n      case 'deposit':\n        return '::yield::deposit';\n      default:\n        return `::${operationLower}::execute`;\n    }\n  };\n  return {\n    pendingTransactions,\n    recentTransactions,\n    isExecuting,\n    executeTransaction: executeCustomTransaction,\n    executeStrategy,\n    getTransactionHistory,\n    status,\n    error,\n    result\n  };\n};\n_s(useTransactions, \"DLnUazhHcxK78dbs4whop4+H6Xo=\", false, function () {\n  return [useWalletContext, useNotification];\n});\nexport default useTransactions;","map":{"version":3,"names":["useState","useCallback","useContext","useEffect","TransactionContext","useWalletContext","useNotification","useTransactions","_s","pendingTransactions","recentTransactions","isExecuting","executeTransaction","executeStrategyTransaction","executeAIStrategy","addTransaction","status","error","result","isConnected","showNotification","getTransactionHistory","address","console","executeCustomTransaction","payload","Error","executeStrategy","operations","options","formattedOperations","map","op","protocol","type","amount","contractAddress","getContractAddress","functionName","determineFunctionName","contractAddresses","amnis","thala","tortuga","ditto","aries","echo","pancakeswap","liquidswap","cetus","toLowerCase","_functionMappings$pro","functionMappings","protocolLower","operationLower"],"sources":["/home/ck/compoundefi/client/src/hooks/useTransactions.js"],"sourcesContent":["import { useState, useCallback, useContext, useEffect } from 'react';\r\nimport { TransactionContext } from '../context/TransactionContext';\r\nimport { useWalletContext } from '../context/WalletContext';\r\nimport { useNotification } from '../context/NotificationContext';\r\n\r\n/**\r\n * Custom hook for handling transaction execution and tracking\r\n */\r\nconst useTransactions = () => {\r\n  const {\r\n    pendingTransactions,\r\n    recentTransactions,\r\n    isExecuting,\r\n    executeTransaction,\r\n    executeStrategyTransaction,\r\n    executeAIStrategy,\r\n    addTransaction,\r\n    status,\r\n    error,\r\n    result\r\n  } = useContext(TransactionContext);\r\n  \r\n  const { isConnected } = useWalletContext();\r\n  const { showNotification } = useNotification();\r\n  \r\n  // Get transaction history for a specific address\r\n  const getTransactionHistory = useCallback(async (address) => {\r\n    try {\r\n      if (!address) return [];\r\n      \r\n      // In a production app, you would fetch from an indexer or your backend\r\n      // For demo purposes, we'll return recent transactions from context\r\n      return recentTransactions;\r\n    } catch (error) {\r\n      console.error('Failed to fetch transaction history:', error);\r\n      showNotification('Failed to load transaction history', 'error');\r\n      return [];\r\n    }\r\n  }, [recentTransactions, showNotification]);\r\n  \r\n  // Execute a custom transaction with wallet\r\n  const executeCustomTransaction = useCallback(async (payload) => {\r\n    try {\r\n      if (!isConnected) {\r\n        showNotification('Please connect your wallet to execute transactions', 'error');\r\n        throw new Error('Wallet not connected');\r\n      }\r\n      \r\n      return await executeTransaction(payload);\r\n    } catch (error) {\r\n      console.error('Transaction execution failed:', error);\r\n      throw error;\r\n    }\r\n  }, [isConnected, executeTransaction, showNotification]);\r\n  \r\n  // Execute a complete strategy (multiple transactions)\r\n  const executeStrategy = useCallback(async (operations, options = {}) => {\r\n    try {\r\n      if (!isConnected) {\r\n        showNotification('Please connect your wallet to execute transactions', 'error');\r\n        throw new Error('Wallet not connected');\r\n      }\r\n      \r\n      // Map operations to the format expected by executeAIStrategy\r\n      const formattedOperations = operations.map(op => {\r\n        return {\r\n          protocol: op.protocol,\r\n          type: op.type,\r\n          amount: op.amount,\r\n          contractAddress: op.contractAddress || getContractAddress(op.protocol),\r\n          functionName: op.functionName || determineFunctionName(op.protocol, op.type)\r\n        };\r\n      });\r\n      \r\n      return await executeAIStrategy(formattedOperations);\r\n    } catch (error) {\r\n      console.error('Strategy execution failed:', error);\r\n      throw error;\r\n    }\r\n  }, [isConnected, executeAIStrategy, showNotification]);\r\n  \r\n  // Helper function to get contract address\r\n  const getContractAddress = (protocol) => {\r\n    const contractAddresses = {\r\n      amnis: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a\",\r\n      thala: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6\",\r\n      tortuga: \"0x952c1b1fc8eb75ee80f432c9d0a84fcda1d5c7481501a7eca9199f1596a60b53\",\r\n      ditto: \"0xd11107bdf0d6d7040c6c0bfbdecb6545191fdf13e8d8d259952f53e1713f61b5\",\r\n      aries: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3\",\r\n      echo: \"0xeab7ea4d635b6b6add79d5045c4a45d8148d88287b1cfa1c3b6a4b56f46839ed\",\r\n      pancakeswap: \"0xc7efb4076dbe143cbcd98cfaaa929ecfc8f299203dfff63b95ccb6bfe19850fa\",\r\n      liquidswap: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12\",\r\n      cetus: \"0x27156bd56eb5637b9adde4d915b596f92d2f28f0ade2eaef48fa73e360e4e8a6\"\r\n    };\r\n    \r\n    return contractAddresses[protocol.toLowerCase()] || null;\r\n  };\r\n  \r\n  // Helper function to determine function name\r\n  const determineFunctionName = (protocol, type) => {\r\n    const functionMappings = {\r\n      'amnis': { \r\n        'stake': '::staking::stake', \r\n        'unstake': '::staking::unstake',\r\n        'lend': '::lending::supply',\r\n        'withdraw': '::lending::withdraw',\r\n        'addLiquidity': '::router::add_liquidity', \r\n        'removeLiquidity': '::router::remove_liquidity' \r\n      },\r\n      'thala': { \r\n        'stake': '::staking::stake_apt', \r\n        'unstake': '::staking::unstake_apt',\r\n        'lend': '::lending::supply_apt',\r\n        'withdraw': '::lending::withdraw_apt',\r\n        'addLiquidity': '::router::add_liquidity', \r\n        'removeLiquidity': '::router::remove_liquidity' \r\n      },\r\n      'tortuga': { \r\n        'stake': '::staking::stake_apt', \r\n        'unstake': '::staking::unstake_apt' \r\n      },\r\n      'echo': { \r\n        'lend': '::lending::supply', \r\n        'withdraw': '::lending::withdraw' \r\n      },\r\n      'ditto': { \r\n        'stake': '::staking::stake', \r\n        'unstake': '::staking::unstake' \r\n      },\r\n      'aries': { \r\n        'lend': '::lending::supply', \r\n        'withdraw': '::lending::withdraw' \r\n      },\r\n      'cetus': { \r\n        'addLiquidity': '::pool::add_liquidity', \r\n        'removeLiquidity': '::pool::remove_liquidity' \r\n      },\r\n      'pancakeswap': { \r\n        'addLiquidity': '::router::add_liquidity', \r\n        'removeLiquidity': '::router::remove_liquidity',\r\n        'swap': '::router::swap_exact_input'\r\n      },\r\n      'liquidswap': { \r\n        'addLiquidity': '::router::add_liquidity', \r\n        'removeLiquidity': '::router::remove_liquidity' \r\n      }\r\n    };\r\n  \r\n    const protocolLower = protocol.toLowerCase();\r\n    const operationLower = type.toLowerCase();\r\n  \r\n    // If we have a specific mapping for this protocol and operation type, use it\r\n    if (functionMappings[protocolLower]?.[operationLower]) {\r\n      return functionMappings[protocolLower][operationLower];\r\n    }\r\n  \r\n    // Otherwise use general mappings\r\n    switch (operationLower) {\r\n      case 'stake': return '::staking::stake';\r\n      case 'unstake': return '::staking::unstake';\r\n      case 'lend': return '::lending::supply';\r\n      case 'withdraw': return '::lending::withdraw';\r\n      case 'addliquidity': return '::router::add_liquidity';\r\n      case 'removeliquidity': return '::router::remove_liquidity';\r\n      case 'deposit': return '::yield::deposit';\r\n      default: return `::${operationLower}::execute`;\r\n    }\r\n  };\r\n\r\n  return {\r\n    pendingTransactions,\r\n    recentTransactions,\r\n    isExecuting,\r\n    executeTransaction: executeCustomTransaction,\r\n    executeStrategy,\r\n    getTransactionHistory,\r\n    status,\r\n    error,\r\n    result\r\n  };\r\n};\r\n\r\nexport default useTransactions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/WalletContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/WalletContext.jsx\n\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { useWallet } from '@aptos-labs/wallet-adapter-react';\nimport { showNotification } from '../utils/animations';\nimport { executeTransaction } from '../services/transactionService';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext({});\n\n/**\r\n * Provider component for wallet-related functionality\r\n */\nexport function WalletProvider({\n  children\n}) {\n  _s();\n  // State variables\n  const [isConnected, setIsConnected] = useState(false);\n  const [address, setAddress] = useState('');\n  const [shortenedAddress, setShortenedAddress] = useState('');\n  const [walletProvider, setWalletProvider] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [portfolioData, setPortfolioData] = useState(null);\n  const [portfolioLoading, setPortfolioLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [connecting, setConnecting] = useState(false);\n\n  // Use Aptos wallet adapter\n  const {\n    connect,\n    account,\n    network,\n    connected,\n    disconnect: disconnectWallet,\n    wallets,\n    wallet,\n    signAndSubmitTransaction\n  } = useWallet();\n\n  // Check initial connection status\n  useEffect(() => {\n    checkConnection();\n  }, [account, connected]);\n\n  // Update wallet data when connected\n  useEffect(() => {\n    if (isConnected && address) {\n      updateWalletData();\n      refreshPortfolio();\n    }\n  }, [isConnected, address]);\n\n  // Check if wallet is connected\n  const checkConnection = useCallback(() => {\n    const isConnected = connected && !!(account !== null && account !== void 0 && account.address);\n    setIsConnected(isConnected);\n    if (isConnected) {\n      const addr = account.address.toString();\n      setAddress(addr);\n      setShortenedAddress(`${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`);\n      setWalletProvider(wallet.name);\n\n      // Set chain ID based on network\n      if (network) {\n        setChainId(network.chainId);\n      }\n    } else {\n      setAddress('');\n      setShortenedAddress('');\n      setWalletProvider(null);\n      setBalance(null);\n      setChainId(null);\n    }\n  }, [account, connected, wallet, network]);\n\n  // Update wallet data (balance, etc.)\n  const updateWalletData = useCallback(async () => {\n    if (!isConnected || !address) return;\n    try {\n      // Get balance using the client or wallet API\n      // This implementation depends on the specific wallet provider\n      let balanceValue = null;\n      if (wallet && wallet.getBalance) {\n        balanceValue = await wallet.getBalance();\n      } else if (window.aptos) {\n        const response = await window.aptos.getAccountResources(address);\n        const accountResource = response.find(r => r.type === '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>');\n        if (accountResource && accountResource.data && accountResource.data.coin) {\n          // Convert octas to APT (1 APT = 10^8 octas)\n          balanceValue = parseFloat(accountResource.data.coin.value) / 100000000;\n        }\n      }\n      setBalance(balanceValue);\n    } catch (err) {\n      console.error('Error updating wallet data:', err);\n      setError('Failed to load wallet data');\n    }\n  }, [isConnected, address, wallet]);\n\n  // Connect wallet\n  const connectWallet = useCallback(async (walletName = null) => {\n    try {\n      setConnecting(true);\n      setError(null);\n\n      // If walletName is provided, find that specific wallet\n      const targetWallet = walletName ? wallets.find(w => w.name.toLowerCase() === walletName.toLowerCase()) : wallet;\n      if (!targetWallet) {\n        throw new Error(`Wallet \"${walletName}\" not found. Please install the wallet extension.`);\n      }\n\n      // Connect to the wallet\n      await connect(targetWallet.name);\n      return true;\n    } catch (err) {\n      console.error('Wallet connection error:', err);\n      setError(err.message || 'Failed to connect wallet');\n      showNotification(err.message || 'Failed to connect wallet', 'error');\n      return false;\n    } finally {\n      setConnecting(false);\n    }\n  }, [connect, wallets, wallet]);\n\n  // Disconnect wallet\n  const disconnect = useCallback(async () => {\n    try {\n      await disconnectWallet();\n      setIsConnected(false);\n      setAddress('');\n      setShortenedAddress('');\n      setWalletProvider(null);\n      setBalance(null);\n      setChainId(null);\n      setPortfolioData(null);\n      showNotification('Wallet disconnected', 'info');\n      return true;\n    } catch (err) {\n      console.error('Wallet disconnect error:', err);\n      setError(err.message || 'Failed to disconnect wallet');\n      return false;\n    }\n  }, [disconnectWallet]);\n\n  // Execute transaction\n  const executeTransactionWithWallet = useCallback(async (payload, options = {}) => {\n    if (!isConnected || !signAndSubmitTransaction) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      // Execute the transaction\n      const result = await executeTransaction({\n        signAndSubmitTransaction\n      },\n      // Wrap the function\n      payload, options);\n      if (result.success) {\n        showNotification('Transaction successful!', 'success');\n        // Refresh portfolio after successful transaction\n        setTimeout(() => refreshPortfolio(), 2000);\n      } else {\n        showNotification(`Transaction failed: ${result.error}`, 'error');\n      }\n      return result;\n    } catch (err) {\n      console.error('Transaction execution error:', err);\n      const errorMsg = err.message || 'Transaction failed';\n      showNotification(errorMsg, 'error');\n      throw err;\n    }\n  }, [isConnected, signAndSubmitTransaction]);\n\n  // Refresh portfolio data\n  const refreshPortfolio = useCallback(async () => {\n    if (!isConnected || !address) return;\n    try {\n      setPortfolioLoading(true);\n      setError(null);\n\n      // Call API to get portfolio data\n      const response = await fetch(`/api/wallet/${address}/portfolio`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch portfolio data');\n      }\n      const data = await response.json();\n      setPortfolioData(data);\n\n      // Update balance if available in portfolio data\n      if (data.apt && data.apt.amount) {\n        setBalance(parseFloat(data.apt.amount));\n      }\n      return data;\n    } catch (err) {\n      console.error('Error fetching portfolio:', err);\n      setError(err.message || 'Failed to load portfolio data');\n\n      // Try to use mock data for development\n      if (process.env.NODE_ENV === 'development') {\n        try {\n          const mockData = await import('../mocks/portfolioData.json');\n          setPortfolioData(mockData.default);\n          return mockData.default;\n        } catch (mockErr) {\n          console.log('No mock data available');\n        }\n      }\n      return null;\n    } finally {\n      setPortfolioLoading(false);\n    }\n  }, [isConnected, address]);\n\n  // Context value\n  const contextValue = {\n    isConnected,\n    connecting,\n    address,\n    shortenedAddress,\n    walletProvider,\n    balance,\n    chainId,\n    portfolioData,\n    portfolioLoading,\n    error,\n    connectWallet,\n    disconnect,\n    executeTransaction: executeTransactionWithWallet,\n    refreshPortfolio,\n    wallet\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use the WalletContext\n_s(WalletProvider, \"Vr4Z4byVmyqOsMV+FcYzKKrmOtc=\", false, function () {\n  return [useWallet];\n});\n_c = WalletProvider;\nexport const useWalletContext = () => {\n  _s2();\n  return useContext(WalletContext);\n};\n_s2(useWalletContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default WalletContext;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","useWallet","showNotification","executeTransaction","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","isConnected","setIsConnected","address","setAddress","shortenedAddress","setShortenedAddress","walletProvider","setWalletProvider","balance","setBalance","chainId","setChainId","portfolioData","setPortfolioData","portfolioLoading","setPortfolioLoading","error","setError","connecting","setConnecting","connect","account","network","connected","disconnect","disconnectWallet","wallets","wallet","signAndSubmitTransaction","checkConnection","updateWalletData","refreshPortfolio","addr","toString","substring","length","name","balanceValue","getBalance","window","aptos","response","getAccountResources","accountResource","find","r","type","data","coin","parseFloat","value","err","console","connectWallet","walletName","targetWallet","w","toLowerCase","Error","message","executeTransactionWithWallet","payload","options","result","success","setTimeout","errorMsg","fetch","ok","json","apt","amount","process","env","NODE_ENV","mockData","default","mockErr","log","contextValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWalletContext","_s2","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/WalletContext.jsx"],"sourcesContent":["// src/context/WalletContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\r\nimport { useWallet } from '@aptos-labs/wallet-adapter-react';\r\nimport { showNotification } from '../utils/animations';\r\nimport { executeTransaction } from '../services/transactionService';\r\n\r\n// Create the context\r\nexport const WalletContext = createContext({});\r\n\r\n/**\r\n * Provider component for wallet-related functionality\r\n */\r\nexport function WalletProvider({ children }) {\r\n  // State variables\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [address, setAddress] = useState('');\r\n  const [shortenedAddress, setShortenedAddress] = useState('');\r\n  const [walletProvider, setWalletProvider] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [portfolioData, setPortfolioData] = useState(null);\r\n  const [portfolioLoading, setPortfolioLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [connecting, setConnecting] = useState(false);\r\n\r\n  // Use Aptos wallet adapter\r\n  const {\r\n    connect,\r\n    account,\r\n    network,\r\n    connected,\r\n    disconnect: disconnectWallet,\r\n    wallets,\r\n    wallet,\r\n    signAndSubmitTransaction\r\n  } = useWallet();\r\n\r\n  // Check initial connection status\r\n  useEffect(() => {\r\n    checkConnection();\r\n  }, [account, connected]);\r\n\r\n  // Update wallet data when connected\r\n  useEffect(() => {\r\n    if (isConnected && address) {\r\n      updateWalletData();\r\n      refreshPortfolio();\r\n    }\r\n  }, [isConnected, address]);\r\n\r\n  // Check if wallet is connected\r\n  const checkConnection = useCallback(() => {\r\n    const isConnected = connected && !!account?.address;\r\n    setIsConnected(isConnected);\r\n\r\n    if (isConnected) {\r\n      const addr = account.address.toString();\r\n      setAddress(addr);\r\n      setShortenedAddress(`${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`);\r\n      setWalletProvider(wallet.name);\r\n      \r\n      // Set chain ID based on network\r\n      if (network) {\r\n        setChainId(network.chainId);\r\n      }\r\n    } else {\r\n      setAddress('');\r\n      setShortenedAddress('');\r\n      setWalletProvider(null);\r\n      setBalance(null);\r\n      setChainId(null);\r\n    }\r\n  }, [account, connected, wallet, network]);\r\n\r\n  // Update wallet data (balance, etc.)\r\n  const updateWalletData = useCallback(async () => {\r\n    if (!isConnected || !address) return;\r\n\r\n    try {\r\n      // Get balance using the client or wallet API\r\n      // This implementation depends on the specific wallet provider\r\n      let balanceValue = null;\r\n\r\n      if (wallet && wallet.getBalance) {\r\n        balanceValue = await wallet.getBalance();\r\n      } else if (window.aptos) {\r\n        const response = await window.aptos.getAccountResources(address);\r\n        const accountResource = response.find(\r\n          (r) => r.type === '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>'\r\n        );\r\n        \r\n        if (accountResource && accountResource.data && accountResource.data.coin) {\r\n          // Convert octas to APT (1 APT = 10^8 octas)\r\n          balanceValue = parseFloat(accountResource.data.coin.value) / 100000000;\r\n        }\r\n      }\r\n\r\n      setBalance(balanceValue);\r\n    } catch (err) {\r\n      console.error('Error updating wallet data:', err);\r\n      setError('Failed to load wallet data');\r\n    }\r\n  }, [isConnected, address, wallet]);\r\n\r\n  // Connect wallet\r\n  const connectWallet = useCallback(async (walletName = null) => {\r\n    try {\r\n      setConnecting(true);\r\n      setError(null);\r\n\r\n      // If walletName is provided, find that specific wallet\r\n      const targetWallet = walletName\r\n        ? wallets.find(w => w.name.toLowerCase() === walletName.toLowerCase())\r\n        : wallet;\r\n\r\n      if (!targetWallet) {\r\n        throw new Error(`Wallet \"${walletName}\" not found. Please install the wallet extension.`);\r\n      }\r\n\r\n      // Connect to the wallet\r\n      await connect(targetWallet.name);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Wallet connection error:', err);\r\n      setError(err.message || 'Failed to connect wallet');\r\n      showNotification(err.message || 'Failed to connect wallet', 'error');\r\n      return false;\r\n    } finally {\r\n      setConnecting(false);\r\n    }\r\n  }, [connect, wallets, wallet]);\r\n\r\n  // Disconnect wallet\r\n  const disconnect = useCallback(async () => {\r\n    try {\r\n      await disconnectWallet();\r\n      setIsConnected(false);\r\n      setAddress('');\r\n      setShortenedAddress('');\r\n      setWalletProvider(null);\r\n      setBalance(null);\r\n      setChainId(null);\r\n      setPortfolioData(null);\r\n      \r\n      showNotification('Wallet disconnected', 'info');\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Wallet disconnect error:', err);\r\n      setError(err.message || 'Failed to disconnect wallet');\r\n      return false;\r\n    }\r\n  }, [disconnectWallet]);\r\n\r\n  // Execute transaction\r\n  const executeTransactionWithWallet = useCallback(async (payload, options = {}) => {\r\n    if (!isConnected || !signAndSubmitTransaction) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      // Execute the transaction\r\n      const result = await executeTransaction(\r\n        { signAndSubmitTransaction }, // Wrap the function\r\n        payload,\r\n        options\r\n      );\r\n\r\n      if (result.success) {\r\n        showNotification('Transaction successful!', 'success');\r\n        // Refresh portfolio after successful transaction\r\n        setTimeout(() => refreshPortfolio(), 2000);\r\n      } else {\r\n        showNotification(`Transaction failed: ${result.error}`, 'error');\r\n      }\r\n\r\n      return result;\r\n    } catch (err) {\r\n      console.error('Transaction execution error:', err);\r\n      const errorMsg = err.message || 'Transaction failed';\r\n      showNotification(errorMsg, 'error');\r\n      throw err;\r\n    }\r\n  }, [isConnected, signAndSubmitTransaction]);\r\n\r\n  // Refresh portfolio data\r\n  const refreshPortfolio = useCallback(async () => {\r\n    if (!isConnected || !address) return;\r\n\r\n    try {\r\n      setPortfolioLoading(true);\r\n      setError(null);\r\n\r\n      // Call API to get portfolio data\r\n      const response = await fetch(`/api/wallet/${address}/portfolio`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch portfolio data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPortfolioData(data);\r\n      \r\n      // Update balance if available in portfolio data\r\n      if (data.apt && data.apt.amount) {\r\n        setBalance(parseFloat(data.apt.amount));\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      console.error('Error fetching portfolio:', err);\r\n      setError(err.message || 'Failed to load portfolio data');\r\n      \r\n      // Try to use mock data for development\r\n      if (process.env.NODE_ENV === 'development') {\r\n        try {\r\n          const mockData = await import('../mocks/portfolioData.json');\r\n          setPortfolioData(mockData.default);\r\n          return mockData.default;\r\n        } catch (mockErr) {\r\n          console.log('No mock data available');\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    } finally {\r\n      setPortfolioLoading(false);\r\n    }\r\n  }, [isConnected, address]);\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    isConnected,\r\n    connecting,\r\n    address,\r\n    shortenedAddress,\r\n    walletProvider,\r\n    balance,\r\n    chainId,\r\n    portfolioData,\r\n    portfolioLoading,\r\n    error,\r\n    connectWallet,\r\n    disconnect,\r\n    executeTransaction: executeTransactionWithWallet,\r\n    refreshPortfolio,\r\n    wallet\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={contextValue}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use the WalletContext\r\nexport const useWalletContext = () => useContext(WalletContext);\r\n\r\nexport default WalletContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
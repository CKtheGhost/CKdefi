{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/WalletContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport WalletService from '../services/walletService';\nimport { useNotification } from './NotificationContext';\nimport usePortfolio from '../hooks/usePortfolio';\n\n// Create the wallet context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext({\n  isConnected: false,\n  address: null,\n  publicKey: null,\n  balance: null,\n  connectWallet: async () => {},\n  disconnectWallet: async () => {},\n  walletProvider: null,\n  isConnecting: false,\n  error: null,\n  portfolioData: null,\n  portfolioLoading: false,\n  refreshPortfolio: async () => {},\n  shortenedAddress: null,\n  executeTransaction: async () => {},\n  getAptosClient: () => {}\n});\n\n// Initialize wallet service (can be configured for different networks)\nconst walletService = new WalletService('mainnet');\n\n// WalletProvider component\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [address, setAddress] = useState(null);\n  const [publicKey, setPublicKey] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [walletProvider, setWalletProvider] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const [shortenedAddress, setShortenedAddress] = useState(null);\n  const {\n    showNotification\n  } = useNotification();\n  const {\n    portfolio: portfolioData,\n    fetchPortfolio,\n    isLoading: portfolioLoading,\n    error: portfolioError\n  } = usePortfolio();\n\n  // Check for existing connection on load\n  useEffect(() => {\n    const checkExistingConnection = async () => {\n      try {\n        // Check localStorage for previous connection\n        const savedWallet = localStorage.getItem('connectedWallet');\n        if (savedWallet) {\n          const walletData = JSON.parse(savedWallet);\n          if (walletData.address) {\n            await restoreWalletConnection(walletData);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking existing connection:', error);\n        localStorage.removeItem('connectedWallet');\n      }\n    };\n    checkExistingConnection();\n  }, []);\n\n  // Format shortened address whenever address changes\n  useEffect(() => {\n    if (address) {\n      setShortenedAddress(formatAddress(address));\n    } else {\n      setShortenedAddress(null);\n    }\n  }, [address]);\n\n  // Restore wallet connection from saved data\n  const restoreWalletConnection = async walletData => {\n    try {\n      setIsConnecting(true);\n\n      // Connect to the wallet\n      const result = await walletService.connect(walletData.provider);\n\n      // Update state\n      setIsConnected(true);\n      setAddress(result.address);\n      setPublicKey(result.publicKey);\n      setWalletProvider(result.provider);\n\n      // Fetch balance\n      await refreshBalance(result.address);\n\n      // Fetch portfolio data\n      await refreshPortfolio(result.address);\n      return result;\n    } catch (error) {\n      console.error('Error restoring wallet connection:', error);\n      setError(error.message);\n      setIsConnected(false);\n      localStorage.removeItem('connectedWallet');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Connect to wallet\n  const connectWallet = async (preferredProvider = null) => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Connect to wallet\n      const result = await walletService.connect(preferredProvider);\n\n      // Update state\n      setIsConnected(true);\n      setAddress(result.address);\n      setPublicKey(result.publicKey);\n      setWalletProvider(result.provider);\n\n      // Save connection to localStorage\n      localStorage.setItem('connectedWallet', JSON.stringify({\n        address: result.address,\n        provider: result.provider\n      }));\n\n      // Fetch balance\n      await refreshBalance(result.address);\n\n      // Fetch portfolio data\n      await refreshPortfolio(result.address);\n      showNotification('Wallet connected successfully', 'success');\n      return result;\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setError(error.message);\n      showNotification(`Failed to connect wallet: ${error.message}`, 'error');\n      throw error;\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      await walletService.disconnect();\n\n      // Update state\n      setIsConnected(false);\n      setAddress(null);\n      setPublicKey(null);\n      setBalance(null);\n      setWalletProvider(null);\n      setShortenedAddress(null);\n\n      // Remove from localStorage\n      localStorage.removeItem('connectedWallet');\n      showNotification('Wallet disconnected successfully', 'success');\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error);\n      setError(error.message);\n      showNotification(`Failed to disconnect wallet: ${error.message}`, 'error');\n    }\n  };\n\n  // Refresh wallet balance\n  const refreshBalance = async (walletAddress = address) => {\n    if (!walletAddress) return;\n    try {\n      const balanceResult = await walletService.getBalance(walletAddress);\n      setBalance(balanceResult);\n      return balanceResult;\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      // Don't set error state to avoid disrupting the UI\n    }\n  };\n\n  // Format address for display (e.g., 0x1234...5678)\n  const formatAddress = addr => {\n    if (!addr) return '';\n    return addr.substring(0, 6) + '...' + addr.substring(addr.length - 4);\n  };\n\n  // Execute transaction\n  const executeTransaction = async (payload, options = {}) => {\n    if (!isConnected || !address) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      showNotification('Preparing transaction...', 'info');\n\n      // Execute the transaction\n      const result = await walletService.executeTransaction(payload, options);\n\n      // Refresh balance after transaction\n      await refreshBalance();\n\n      // Refresh portfolio data\n      await refreshPortfolio(address);\n      showNotification('Transaction completed successfully', 'success');\n      return result;\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      showNotification(`Transaction failed: ${error.message}`, 'error');\n      throw error;\n    }\n  };\n\n  // Get Aptos client for direct chain interaction\n  const getAptosClient = () => {\n    return walletService.getClient();\n  };\n\n  // Wrapper for portfolio refresh to handle errors\n  const handleRefreshPortfolio = async (walletAddress = address) => {\n    if (!walletAddress) return null;\n    try {\n      const data = await fetchPortfolio(walletAddress);\n      // Also refresh balance as it might have changed\n      await refreshBalance(walletAddress);\n      return data;\n    } catch (error) {\n      console.error('Error refreshing portfolio:', error);\n      showNotification(`Failed to refresh portfolio data: ${error.message}`, 'error');\n      return null;\n    }\n  };\n\n  // Create context value object\n  const contextValue = {\n    isConnected,\n    address,\n    publicKey,\n    balance,\n    connectWallet,\n    disconnectWallet,\n    walletProvider,\n    isConnecting,\n    error,\n    portfolioData,\n    portfolioLoading,\n    refreshPortfolio: handleRefreshPortfolio,\n    shortenedAddress,\n    executeTransaction,\n    getAptosClient\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the wallet context\n_s(WalletProvider, \"gD1XH0yMOvk2QjOK+shCK4fgX7E=\", false, function () {\n  return [useNotification, usePortfolio];\n});\n_c = WalletProvider;\nexport const useWalletContext = () => {\n  _s2();\n  return useContext(WalletContext);\n};\n_s2(useWalletContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","WalletService","useNotification","usePortfolio","jsxDEV","_jsxDEV","WalletContext","isConnected","address","publicKey","balance","connectWallet","disconnectWallet","walletProvider","isConnecting","error","portfolioData","portfolioLoading","refreshPortfolio","shortenedAddress","executeTransaction","getAptosClient","walletService","WalletProvider","children","_s","setIsConnected","setAddress","setPublicKey","setBalance","setWalletProvider","setIsConnecting","setError","setShortenedAddress","showNotification","portfolio","fetchPortfolio","isLoading","portfolioError","checkExistingConnection","savedWallet","localStorage","getItem","walletData","JSON","parse","restoreWalletConnection","console","removeItem","formatAddress","result","connect","provider","refreshBalance","message","preferredProvider","setItem","stringify","disconnect","walletAddress","balanceResult","getBalance","addr","substring","length","payload","options","Error","getClient","handleRefreshPortfolio","data","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWalletContext","_s2","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/WalletContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport WalletService from '../services/walletService';\r\nimport { useNotification } from './NotificationContext';\r\nimport usePortfolio from '../hooks/usePortfolio';\r\n\r\n// Create the wallet context\r\nexport const WalletContext = createContext({\r\n  isConnected: false,\r\n  address: null,\r\n  publicKey: null,\r\n  balance: null,\r\n  connectWallet: async () => {},\r\n  disconnectWallet: async () => {},\r\n  walletProvider: null,\r\n  isConnecting: false,\r\n  error: null,\r\n  portfolioData: null,\r\n  portfolioLoading: false,\r\n  refreshPortfolio: async () => {},\r\n  shortenedAddress: null,\r\n  executeTransaction: async () => {},\r\n  getAptosClient: () => {}\r\n});\r\n\r\n// Initialize wallet service (can be configured for different networks)\r\nconst walletService = new WalletService('mainnet');\r\n\r\n// WalletProvider component\r\nexport const WalletProvider = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [address, setAddress] = useState(null);\r\n  const [publicKey, setPublicKey] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [walletProvider, setWalletProvider] = useState(null);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [shortenedAddress, setShortenedAddress] = useState(null);\r\n  \r\n  const { showNotification } = useNotification();\r\n  const { \r\n    portfolio: portfolioData, \r\n    fetchPortfolio, \r\n    isLoading: portfolioLoading,\r\n    error: portfolioError \r\n  } = usePortfolio();\r\n\r\n  // Check for existing connection on load\r\n  useEffect(() => {\r\n    const checkExistingConnection = async () => {\r\n      try {\r\n        // Check localStorage for previous connection\r\n        const savedWallet = localStorage.getItem('connectedWallet');\r\n        if (savedWallet) {\r\n          const walletData = JSON.parse(savedWallet);\r\n          if (walletData.address) {\r\n            await restoreWalletConnection(walletData);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking existing connection:', error);\r\n        localStorage.removeItem('connectedWallet');\r\n      }\r\n    };\r\n    checkExistingConnection();\r\n  }, []);\r\n\r\n  // Format shortened address whenever address changes\r\n  useEffect(() => {\r\n    if (address) {\r\n      setShortenedAddress(formatAddress(address));\r\n    } else {\r\n      setShortenedAddress(null);\r\n    }\r\n  }, [address]);\r\n\r\n  // Restore wallet connection from saved data\r\n  const restoreWalletConnection = async (walletData) => {\r\n    try {\r\n      setIsConnecting(true);\r\n      \r\n      // Connect to the wallet\r\n      const result = await walletService.connect(walletData.provider);\r\n      \r\n      // Update state\r\n      setIsConnected(true);\r\n      setAddress(result.address);\r\n      setPublicKey(result.publicKey);\r\n      setWalletProvider(result.provider);\r\n      \r\n      // Fetch balance\r\n      await refreshBalance(result.address);\r\n      \r\n      // Fetch portfolio data\r\n      await refreshPortfolio(result.address);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error restoring wallet connection:', error);\r\n      setError(error.message);\r\n      setIsConnected(false);\r\n      localStorage.removeItem('connectedWallet');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n  // Connect to wallet\r\n  const connectWallet = async (preferredProvider = null) => {\r\n    try {\r\n      setIsConnecting(true);\r\n      setError(null);\r\n      \r\n      // Connect to wallet\r\n      const result = await walletService.connect(preferredProvider);\r\n      \r\n      // Update state\r\n      setIsConnected(true);\r\n      setAddress(result.address);\r\n      setPublicKey(result.publicKey);\r\n      setWalletProvider(result.provider);\r\n      \r\n      // Save connection to localStorage\r\n      localStorage.setItem('connectedWallet', JSON.stringify({\r\n        address: result.address,\r\n        provider: result.provider\r\n      }));\r\n      \r\n      // Fetch balance\r\n      await refreshBalance(result.address);\r\n      \r\n      // Fetch portfolio data\r\n      await refreshPortfolio(result.address);\r\n      \r\n      showNotification('Wallet connected successfully', 'success');\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      setError(error.message);\r\n      showNotification(`Failed to connect wallet: ${error.message}`, 'error');\r\n      throw error;\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n  // Disconnect wallet\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      await walletService.disconnect();\r\n      \r\n      // Update state\r\n      setIsConnected(false);\r\n      setAddress(null);\r\n      setPublicKey(null);\r\n      setBalance(null);\r\n      setWalletProvider(null);\r\n      setShortenedAddress(null);\r\n      \r\n      // Remove from localStorage\r\n      localStorage.removeItem('connectedWallet');\r\n      \r\n      showNotification('Wallet disconnected successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error disconnecting wallet:', error);\r\n      setError(error.message);\r\n      showNotification(`Failed to disconnect wallet: ${error.message}`, 'error');\r\n    }\r\n  };\r\n\r\n  // Refresh wallet balance\r\n  const refreshBalance = async (walletAddress = address) => {\r\n    if (!walletAddress) return;\r\n    \r\n    try {\r\n      const balanceResult = await walletService.getBalance(walletAddress);\r\n      setBalance(balanceResult);\r\n      return balanceResult;\r\n    } catch (error) {\r\n      console.error('Error fetching balance:', error);\r\n      // Don't set error state to avoid disrupting the UI\r\n    }\r\n  };\r\n\r\n  // Format address for display (e.g., 0x1234...5678)\r\n  const formatAddress = (addr) => {\r\n    if (!addr) return '';\r\n    return addr.substring(0, 6) + '...' + addr.substring(addr.length - 4);\r\n  };\r\n\r\n  // Execute transaction\r\n  const executeTransaction = async (payload, options = {}) => {\r\n    if (!isConnected || !address) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n    \r\n    try {\r\n      showNotification('Preparing transaction...', 'info');\r\n      \r\n      // Execute the transaction\r\n      const result = await walletService.executeTransaction(payload, options);\r\n      \r\n      // Refresh balance after transaction\r\n      await refreshBalance();\r\n      \r\n      // Refresh portfolio data\r\n      await refreshPortfolio(address);\r\n      \r\n      showNotification('Transaction completed successfully', 'success');\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Transaction failed:', error);\r\n      showNotification(`Transaction failed: ${error.message}`, 'error');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Get Aptos client for direct chain interaction\r\n  const getAptosClient = () => {\r\n    return walletService.getClient();\r\n  };\r\n\r\n  // Wrapper for portfolio refresh to handle errors\r\n  const handleRefreshPortfolio = async (walletAddress = address) => {\r\n    if (!walletAddress) return null;\r\n    \r\n    try {\r\n      const data = await fetchPortfolio(walletAddress);\r\n      // Also refresh balance as it might have changed\r\n      await refreshBalance(walletAddress);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error refreshing portfolio:', error);\r\n      showNotification(`Failed to refresh portfolio data: ${error.message}`, 'error');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Create context value object\r\n  const contextValue = {\r\n    isConnected,\r\n    address,\r\n    publicKey,\r\n    balance,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    walletProvider,\r\n    isConnecting,\r\n    error,\r\n    portfolioData,\r\n    portfolioLoading,\r\n    refreshPortfolio: handleRefreshPortfolio,\r\n    shortenedAddress,\r\n    executeTransaction,\r\n    getAptosClient\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={contextValue}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the wallet context\r\nexport const useWalletContext = () => useContext(WalletContext);\r\n\r\nexport default WalletProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/WalletContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/WalletContext.jsx\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport api from '../services/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext();\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  // State for wallet connection\n  const [connected, setConnected] = useState(false);\n  const [address, setAddress] = useState(null);\n  const [shortenedAddress, setShortenedAddress] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [portfolioData, setPortfolioData] = useState(null);\n  const [portfolioLoading, setPortfolioLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    try {\n      // Check if window.aptos is available (Aptos wallet extension)\n      if (!window.aptos) {\n        throw new Error('No Aptos wallet found. Please install a wallet extension first.');\n      }\n\n      // Request connection to wallet\n      const response = await window.aptos.connect();\n      const walletAddress = response.address;\n\n      // Set wallet state\n      setConnected(true);\n      setAddress(walletAddress);\n      setShortenedAddress(`${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`);\n      setProvider(window.aptos.network || 'Unknown');\n\n      // Save connected wallet in local storage\n      localStorage.setItem('connectedWallet', walletAddress);\n\n      // Fetch initial balance\n      await refreshBalance(walletAddress);\n      return walletAddress;\n    } catch (err) {\n      console.error('Wallet connection error:', err);\n      setError(err.message || 'Failed to connect wallet');\n      throw err;\n    }\n  }, []);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Clear wallet state\n    setConnected(false);\n    setAddress(null);\n    setShortenedAddress(null);\n    setProvider(null);\n    setBalance(null);\n    setPortfolioData(null);\n\n    // Clear local storage\n    localStorage.removeItem('connectedWallet');\n  }, []);\n\n  // Refresh wallet balance\n  const refreshBalance = useCallback(async walletAddress => {\n    try {\n      const addr = walletAddress || address;\n      if (!addr) return;\n\n      // Fetch balance from Aptos API\n      const response = await api.get(`/wallet/${addr}/balance`);\n\n      // Set balance state\n      setBalance(response.data.balance);\n      return response.data.balance;\n    } catch (err) {\n      console.error('Balance refresh error:', err);\n      setError(err.message || 'Failed to refresh balance');\n    }\n  }, [address]);\n\n  // Load portfolio data\n  const refreshPortfolio = useCallback(async () => {\n    if (!address) return;\n    setPortfolioLoading(true);\n    setError(null);\n    try {\n      const response = await api.get(`/wallet/${address}/portfolio`);\n      setPortfolioData(response.data);\n      return response.data;\n    } catch (err) {\n      console.error('Portfolio loading error:', err);\n      setError(err.message || 'Failed to load portfolio data');\n    } finally {\n      setPortfolioLoading(false);\n    }\n  }, [address]);\n\n  // Execute transaction\n  const executeTransaction = useCallback(async payload => {\n    try {\n      if (!connected || !window.aptos) {\n        throw new Error('Wallet not connected');\n      }\n\n      // Send transaction\n      const pendingTransaction = await window.aptos.signAndSubmitTransaction(payload);\n\n      // Wait for transaction confirmation\n      const txnHash = pendingTransaction.hash;\n\n      // Return transaction hash for tracking\n      return txnHash;\n    } catch (err) {\n      console.error('Transaction execution error:', err);\n      setError(err.message || 'Failed to execute transaction');\n      throw err;\n    }\n  }, [connected]);\n\n  // Check for existing wallet connection on component mount\n  useEffect(() => {\n    const checkExistingConnection = async () => {\n      const savedWallet = localStorage.getItem('connectedWallet');\n      if (savedWallet && window.aptos) {\n        try {\n          // Check if we're still connected to the same wallet\n          const isConnected = await window.aptos.isConnected();\n          if (isConnected) {\n            setConnected(true);\n            setAddress(savedWallet);\n            setShortenedAddress(`${savedWallet.substring(0, 6)}...${savedWallet.substring(savedWallet.length - 4)}`);\n            setProvider(window.aptos.network || 'Unknown');\n\n            // Refresh balance\n            await refreshBalance(savedWallet);\n          } else {\n            // Clear stored wallet\n            localStorage.removeItem('connectedWallet');\n          }\n        } catch (error) {\n          console.error('Error checking wallet connection:', error);\n          localStorage.removeItem('connectedWallet');\n        }\n      }\n    };\n    checkExistingConnection();\n  }, [refreshBalance]);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      connected,\n      address,\n      shortenedAddress,\n      provider,\n      balance,\n      portfolioData,\n      portfolioLoading,\n      error,\n      connectWallet,\n      disconnectWallet,\n      refreshBalance,\n      refreshPortfolio,\n      executeTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a hook to use the wallet context\n_s(WalletProvider, \"vXe9tXYbiHNnyA3Ilbh4cbnf5y0=\");\n_c = WalletProvider;\nexport const useWalletContext = () => {\n  _s2();\n  const context = React.useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWalletContext must be used within a WalletProvider');\n  }\n  return context;\n};\n_s2(useWalletContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","api","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","connected","setConnected","address","setAddress","shortenedAddress","setShortenedAddress","provider","setProvider","balance","setBalance","portfolioData","setPortfolioData","portfolioLoading","setPortfolioLoading","error","setError","connectWallet","window","aptos","Error","response","connect","walletAddress","substring","length","network","localStorage","setItem","refreshBalance","err","console","message","disconnectWallet","removeItem","addr","get","data","refreshPortfolio","executeTransaction","payload","pendingTransaction","signAndSubmitTransaction","txnHash","hash","checkExistingConnection","savedWallet","getItem","isConnected","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWalletContext","_s2","context","useContext","undefined","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/WalletContext.jsx"],"sourcesContent":["// src/context/WalletContext.jsx\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\n// Create context\r\nexport const WalletContext = createContext();\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  // State for wallet connection\r\n  const [connected, setConnected] = useState(false);\r\n  const [address, setAddress] = useState(null);\r\n  const [shortenedAddress, setShortenedAddress] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [portfolioData, setPortfolioData] = useState(null);\r\n  const [portfolioLoading, setPortfolioLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Connect wallet\r\n  const connectWallet = useCallback(async () => {\r\n    try {\r\n      // Check if window.aptos is available (Aptos wallet extension)\r\n      if (!window.aptos) {\r\n        throw new Error('No Aptos wallet found. Please install a wallet extension first.');\r\n      }\r\n\r\n      // Request connection to wallet\r\n      const response = await window.aptos.connect();\r\n      const walletAddress = response.address;\r\n      \r\n      // Set wallet state\r\n      setConnected(true);\r\n      setAddress(walletAddress);\r\n      setShortenedAddress(\r\n        `${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`\r\n      );\r\n      setProvider(window.aptos.network || 'Unknown');\r\n      \r\n      // Save connected wallet in local storage\r\n      localStorage.setItem('connectedWallet', walletAddress);\r\n      \r\n      // Fetch initial balance\r\n      await refreshBalance(walletAddress);\r\n      \r\n      return walletAddress;\r\n    } catch (err) {\r\n      console.error('Wallet connection error:', err);\r\n      setError(err.message || 'Failed to connect wallet');\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  // Disconnect wallet\r\n  const disconnectWallet = useCallback(() => {\r\n    // Clear wallet state\r\n    setConnected(false);\r\n    setAddress(null);\r\n    setShortenedAddress(null);\r\n    setProvider(null);\r\n    setBalance(null);\r\n    setPortfolioData(null);\r\n    \r\n    // Clear local storage\r\n    localStorage.removeItem('connectedWallet');\r\n  }, []);\r\n\r\n  // Refresh wallet balance\r\n  const refreshBalance = useCallback(async (walletAddress) => {\r\n    try {\r\n      const addr = walletAddress || address;\r\n      if (!addr) return;\r\n      \r\n      // Fetch balance from Aptos API\r\n      const response = await api.get(`/wallet/${addr}/balance`);\r\n      \r\n      // Set balance state\r\n      setBalance(response.data.balance);\r\n      \r\n      return response.data.balance;\r\n    } catch (err) {\r\n      console.error('Balance refresh error:', err);\r\n      setError(err.message || 'Failed to refresh balance');\r\n    }\r\n  }, [address]);\r\n\r\n  // Load portfolio data\r\n  const refreshPortfolio = useCallback(async () => {\r\n    if (!address) return;\r\n    \r\n    setPortfolioLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`/wallet/${address}/portfolio`);\r\n      setPortfolioData(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Portfolio loading error:', err);\r\n      setError(err.message || 'Failed to load portfolio data');\r\n    } finally {\r\n      setPortfolioLoading(false);\r\n    }\r\n  }, [address]);\r\n\r\n  // Execute transaction\r\n  const executeTransaction = useCallback(async (payload) => {\r\n    try {\r\n      if (!connected || !window.aptos) {\r\n        throw new Error('Wallet not connected');\r\n      }\r\n      \r\n      // Send transaction\r\n      const pendingTransaction = await window.aptos.signAndSubmitTransaction(payload);\r\n      \r\n      // Wait for transaction confirmation\r\n      const txnHash = pendingTransaction.hash;\r\n      \r\n      // Return transaction hash for tracking\r\n      return txnHash;\r\n    } catch (err) {\r\n      console.error('Transaction execution error:', err);\r\n      setError(err.message || 'Failed to execute transaction');\r\n      throw err;\r\n    }\r\n  }, [connected]);\r\n\r\n  // Check for existing wallet connection on component mount\r\n  useEffect(() => {\r\n    const checkExistingConnection = async () => {\r\n      const savedWallet = localStorage.getItem('connectedWallet');\r\n      \r\n      if (savedWallet && window.aptos) {\r\n        try {\r\n          // Check if we're still connected to the same wallet\r\n          const isConnected = await window.aptos.isConnected();\r\n          \r\n          if (isConnected) {\r\n            setConnected(true);\r\n            setAddress(savedWallet);\r\n            setShortenedAddress(\r\n              `${savedWallet.substring(0, 6)}...${savedWallet.substring(savedWallet.length - 4)}`\r\n            );\r\n            setProvider(window.aptos.network || 'Unknown');\r\n            \r\n            // Refresh balance\r\n            await refreshBalance(savedWallet);\r\n          } else {\r\n            // Clear stored wallet\r\n            localStorage.removeItem('connectedWallet');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking wallet connection:', error);\r\n          localStorage.removeItem('connectedWallet');\r\n        }\r\n      }\r\n    };\r\n    \r\n    checkExistingConnection();\r\n  }, [refreshBalance]);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{\r\n      connected,\r\n      address,\r\n      shortenedAddress,\r\n      provider,\r\n      balance,\r\n      portfolioData,\r\n      portfolioLoading,\r\n      error,\r\n      connectWallet,\r\n      disconnectWallet,\r\n      refreshBalance,\r\n      refreshPortfolio,\r\n      executeTransaction\r\n    }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n\r\n// Create a hook to use the wallet context\r\nexport const useWalletContext = () => {\r\n  const context = React.useContext(WalletContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWalletContext must be used within a WalletProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
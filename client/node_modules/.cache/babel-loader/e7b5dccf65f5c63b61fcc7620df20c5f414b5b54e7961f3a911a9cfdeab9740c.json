{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/pages/AutoOptimizer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '../components/common/Card';\nimport { Button } from '../components/common/Button';\nimport OptimizerStatus from '../components/optimizer/OptimizerStatus';\nimport OptimizerSettings from '../components/optimizer/OptimizerSettings';\nimport PortfolioBalance from '../components/optimizer/PortfolioBalance';\nimport ExecutionHistory from '../components/optimizer/ExecutionHistory';\nimport { WalletContext } from '../context/WalletContext';\nimport { UserContext } from '../context/UserContext';\nimport { NotificationContext } from '../context/NotificationContext';\nimport usePortfolio from '../hooks/usePortfolio';\nimport useRecommendations from '../hooks/useRecommendations';\nimport useTransactions from '../hooks/useTransactions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoOptimizer = () => {\n  _s();\n  const {\n    wallet,\n    isConnected\n  } = useContext(WalletContext);\n  const {\n    preferences\n  } = useContext(UserContext);\n  const {\n    showNotification\n  } = useContext(NotificationContext);\n  const {\n    portfolio,\n    fetchPortfolio,\n    isLoading: isPortfolioLoading\n  } = usePortfolio();\n  const {\n    getAIRecommendation\n  } = useRecommendations();\n  const {\n    executeStrategy\n  } = useTransactions();\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [nextRunTime, setNextRunTime] = useState(null);\n  const [lastRunTime, setLastRunTime] = useState(null);\n  const [lastResult, setLastResult] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [settings, setSettings] = useState({\n    interval: 24,\n    // hours\n    threshold: 5,\n    // percentage drift\n    maxSlippage: 2.5,\n    // percentage\n    preserveStakedPositions: true,\n    riskProfile: 'balanced',\n    autoAdjustTiming: true\n  });\n  const [isRunningOptimization, setIsRunningOptimization] = useState(false);\n\n  // Load settings from localStorage\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('autoOptimizerSettings');\n    if (savedSettings) {\n      try {\n        const parsedSettings = JSON.parse(savedSettings);\n        setSettings(prev => ({\n          ...prev,\n          ...parsedSettings\n        }));\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    // Load state from localStorage\n    const isEnabledSaved = localStorage.getItem('autoOptimizeEnabled') === 'true';\n    setIsEnabled(isEnabledSaved);\n    const lastRun = localStorage.getItem('lastAutoOptimizeRun');\n    if (lastRun) {\n      setLastRunTime(parseInt(lastRun));\n    }\n    const nextRun = localStorage.getItem('nextAutoOptimizeRun');\n    if (nextRun) {\n      setNextRunTime(parseInt(nextRun));\n    }\n\n    // Load history from localStorage\n    const savedHistory = localStorage.getItem('autoOptimizeHistory');\n    if (savedHistory) {\n      try {\n        setHistory(JSON.parse(savedHistory));\n      } catch (error) {\n        console.error('Failed to parse optimization history:', error);\n      }\n    }\n\n    // Load last result\n    const lastResultSaved = localStorage.getItem('lastAutoOptimizeResult');\n    if (lastResultSaved) {\n      try {\n        setLastResult(JSON.parse(lastResultSaved));\n      } catch (error) {\n        console.error('Failed to parse last optimization result:', error);\n      }\n    }\n  }, []);\n\n  // Update timer and check for scheduled runs\n  useEffect(() => {\n    if (!isEnabled || !nextRunTime) return;\n    const checkInterval = setInterval(() => {\n      const now = Date.now();\n\n      // Update next run time display in UI\n      setNextRunTime(prev => prev);\n\n      // Check if it's time to run optimization\n      if (now >= nextRunTime) {\n        runAutoOptimization();\n      }\n    }, 60000); // Check every minute\n\n    return () => clearInterval(checkInterval);\n  }, [isEnabled, nextRunTime]);\n\n  // Save settings to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('autoOptimizerSettings', JSON.stringify(settings));\n  }, [settings]);\n  const toggleAutoOptimize = () => {\n    const newStatus = !isEnabled;\n    setIsEnabled(newStatus);\n    localStorage.setItem('autoOptimizeEnabled', newStatus.toString());\n    if (newStatus) {\n      // Schedule next run\n      const now = Date.now();\n      const nextRun = now + settings.interval * 60 * 60 * 1000;\n      setNextRunTime(nextRun);\n      localStorage.setItem('nextAutoOptimizeRun', nextRun.toString());\n      showNotification('Auto-optimization enabled', 'success');\n    } else {\n      showNotification('Auto-optimization disabled', 'info');\n    }\n  };\n  const runAutoOptimization = async () => {\n    if (isRunningOptimization || !isConnected) return;\n    setIsRunningOptimization(true);\n    showNotification('Auto-optimization in progress...', 'info');\n    try {\n      var _result$operations, _result$failedOperati;\n      // 1. Fetch current portfolio\n      const portfolioData = await fetchPortfolio(wallet.address);\n\n      // 2. Get AI recommendation\n      const recommendation = await getAIRecommendation({\n        walletAddress: wallet.address,\n        amount: portfolioData.totalValueUSD || 100,\n        riskProfile: settings.riskProfile\n      });\n\n      // 3. Calculate drift and check if rebalancing is needed\n      const driftResult = calculateDrift(portfolioData, recommendation);\n      if (driftResult.maxDrift < settings.threshold) {\n        // Rebalancing not needed - record in history\n        const entry = {\n          timestamp: Date.now(),\n          type: 'check',\n          status: 'skipped',\n          reason: `Portfolio drift (${driftResult.maxDrift.toFixed(2)}%) below threshold (${settings.threshold}%)`,\n          driftPercentage: driftResult.maxDrift\n        };\n        addToHistory(entry);\n        showNotification('Portfolio already optimally balanced', 'success');\n\n        // Schedule next run\n        scheduleNextRun();\n        setIsRunningOptimization(false);\n        return;\n      }\n\n      // 4. Prepare operations\n      const operations = prepareOperationsFromRecommendation(recommendation, portfolioData, settings.preserveStakedPositions);\n\n      // 5. Execute strategy\n      const result = await executeStrategy(operations, {\n        slippage: settings.maxSlippage / 100\n      });\n\n      // 6. Save result\n      setLastResult(result);\n      localStorage.setItem('lastAutoOptimizeResult', JSON.stringify(result));\n\n      // 7. Record in history\n      const historyEntry = {\n        timestamp: Date.now(),\n        type: 'rebalance',\n        status: result.success ? 'success' : 'partial',\n        operations: ((_result$operations = result.operations) === null || _result$operations === void 0 ? void 0 : _result$operations.length) || 0,\n        failedOperations: ((_result$failedOperati = result.failedOperations) === null || _result$failedOperati === void 0 ? void 0 : _result$failedOperati.length) || 0,\n        driftPercentage: driftResult.maxDrift\n      };\n      addToHistory(historyEntry);\n\n      // 8. Show notification\n      showNotification(result.success ? `Auto-optimization completed with ${result.operations.length} successful operations` : `Auto-optimization completed with ${result.failedOperations.length} failures`, result.success ? 'success' : 'warning');\n\n      // 9. Update last run time and schedule next run\n      const now = Date.now();\n      setLastRunTime(now);\n      localStorage.setItem('lastAutoOptimizeRun', now.toString());\n      scheduleNextRun();\n    } catch (error) {\n      console.error('Auto-optimization failed:', error);\n\n      // Record error in history\n      const errorEntry = {\n        timestamp: Date.now(),\n        type: 'error',\n        status: 'failed',\n        reason: error.message || 'Unknown error'\n      };\n      addToHistory(errorEntry);\n      showNotification(`Auto-optimization failed: ${error.message}`, 'error');\n\n      // Schedule retry in 1 hour\n      const retryTime = Date.now() + 1 * 60 * 60 * 1000;\n      setNextRunTime(retryTime);\n      localStorage.setItem('nextAutoOptimizeRun', retryTime.toString());\n    } finally {\n      setIsRunningOptimization(false);\n    }\n  };\n  const scheduleNextRun = () => {\n    if (!isEnabled) return;\n    const now = Date.now();\n    const nextRun = now + settings.interval * 60 * 60 * 1000;\n    setNextRunTime(nextRun);\n    localStorage.setItem('nextAutoOptimizeRun', nextRun.toString());\n  };\n  const addToHistory = entry => {\n    const updatedHistory = [entry, ...history];\n    if (updatedHistory.length > 10) {\n      updatedHistory.length = 10; // Keep only the 10 most recent entries\n    }\n    setHistory(updatedHistory);\n    localStorage.setItem('autoOptimizeHistory', JSON.stringify(updatedHistory));\n  };\n  const prepareOperationsFromRecommendation = (recommendation, portfolioData, preserveStaked = true) => {\n    if (!recommendation.allocation) return [];\n\n    // Calculate current allocation percentages\n    const currentAllocation = calculateCurrentAllocation(portfolioData);\n\n    // Build target allocation map\n    const targetAllocation = {};\n    recommendation.allocation.forEach(item => {\n      targetAllocation[item.protocol.toLowerCase()] = parseFloat(item.percentage);\n    });\n\n    // Generate operations\n    const operations = [];\n\n    // First handle decreases (unstakes, withdrawals)\n    for (const [protocol, percentage] of Object.entries(currentAllocation)) {\n      const target = targetAllocation[protocol.toLowerCase()] || 0;\n      if (percentage > target) {\n        // Skip staked positions if preserveStaked is true\n        if (preserveStaked && isStakedProtocol(protocol)) {\n          console.log(`Skipping unstake for ${protocol} due to preserveStakedPositions setting`);\n          continue;\n        }\n        const percentageDiff = percentage - target;\n        if (percentageDiff >= 1) {\n          // Only rebalance if diff is at least 1%\n          operations.push({\n            protocol,\n            type: getOperationType(protocol, 'decrease'),\n            amount: calculateAmountFromPercentage(percentageDiff, portfolioData.totalValueUSD),\n            action: 'decrease'\n          });\n        }\n      }\n    }\n\n    // Then handle increases (stakes, deposits)\n    for (const [protocol, target] of Object.entries(targetAllocation)) {\n      const current = currentAllocation[protocol.toLowerCase()] || 0;\n      if (target > current) {\n        const percentageDiff = target - current;\n        if (percentageDiff >= 1) {\n          // Only rebalance if diff is at least 1%\n          operations.push({\n            protocol,\n            type: getOperationType(protocol, 'increase'),\n            amount: calculateAmountFromPercentage(percentageDiff, portfolioData.totalValueUSD),\n            action: 'increase'\n          });\n        }\n      }\n    }\n    return operations;\n  };\n  const calculateCurrentAllocation = portfolioData => {\n    const result = {};\n    const totalValue = parseFloat(portfolioData.totalValueUSD || 0);\n    if (totalValue <= 0) return result;\n\n    // Add native APT\n    if (portfolioData.apt && parseFloat(portfolioData.apt.valueUSD) > 0) {\n      result['native'] = portfolioData.apt.valueUSD / totalValue * 100;\n    }\n\n    // Add staked tokens\n    const stakedTokens = {\n      'stAPT': 'amnis',\n      'sthAPT': 'thala',\n      'tAPT': 'tortuga',\n      'dAPT': 'ditto'\n    };\n    for (const [key, protocol] of Object.entries(stakedTokens)) {\n      if (portfolioData[key] && parseFloat(portfolioData[key].valueUSD) > 0) {\n        result[protocol] = portfolioData[key].valueUSD / totalValue * 100;\n      }\n    }\n\n    // Add AMM liquidity if any\n    if (portfolioData.ammLiquidity && portfolioData.ammLiquidity.hasLiquidity) {\n      result['liquidity'] = portfolioData.ammLiquidity.valueUSD / totalValue * 100;\n    }\n    return result;\n  };\n  const calculateDrift = (portfolioData, recommendation) => {\n    const currentAllocation = calculateCurrentAllocation(portfolioData);\n\n    // Build target allocation from recommendation\n    const targetAllocation = {};\n    recommendation.allocation.forEach(item => {\n      targetAllocation[item.protocol.toLowerCase()] = parseFloat(item.percentage);\n    });\n\n    // Calculate drift for each protocol\n    const drifts = [];\n    let maxDrift = 0;\n    let totalDrift = 0;\n\n    // Check existing allocations against targets\n    for (const [protocol, currentPct] of Object.entries(currentAllocation)) {\n      const targetPct = targetAllocation[protocol.toLowerCase()] || 0;\n      const drift = Math.abs(currentPct - targetPct);\n      drifts.push({\n        protocol,\n        current: currentPct,\n        target: targetPct,\n        drift,\n        action: currentPct > targetPct ? 'decrease' : 'increase'\n      });\n      maxDrift = Math.max(maxDrift, drift);\n      totalDrift += drift;\n    }\n\n    // Check for targets not in current allocation\n    for (const [protocol, targetPct] of Object.entries(targetAllocation)) {\n      if (!currentAllocation[protocol.toLowerCase()]) {\n        drifts.push({\n          protocol,\n          current: 0,\n          target: targetPct,\n          drift: targetPct,\n          action: 'add'\n        });\n        maxDrift = Math.max(maxDrift, targetPct);\n        totalDrift += targetPct;\n      }\n    }\n    const avgDrift = drifts.length > 0 ? totalDrift / drifts.length : 0;\n    return {\n      drifts: drifts.sort((a, b) => b.drift - a.drift),\n      maxDrift,\n      avgDrift\n    };\n  };\n  const getOperationType = (protocol, action) => {\n    protocol = protocol.toLowerCase();\n    if (action === 'decrease') {\n      if (['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol)) {\n        return 'unstake';\n      } else if (['aries', 'echelon', 'echo'].includes(protocol)) {\n        return 'withdraw';\n      } else if (['liquidity', 'pancakeswap', 'liquidswap', 'cetus'].includes(protocol)) {\n        return 'removeLiquidity';\n      }\n      return 'withdraw';\n    } else {\n      if (['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol)) {\n        return 'stake';\n      } else if (['aries', 'echelon', 'echo'].includes(protocol)) {\n        return 'lend';\n      } else if (['liquidity', 'pancakeswap', 'liquidswap', 'cetus'].includes(protocol)) {\n        return 'addLiquidity';\n      }\n      return 'stake';\n    }\n  };\n  const isStakedProtocol = protocol => {\n    return ['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol.toLowerCase());\n  };\n  const calculateAmountFromPercentage = (percentage, totalValueUSD) => {\n    // Assume 1 APT = $10 if we don't have the data\n    const aptPrice = 10;\n    return (percentage / 100 * totalValueUSD / aptPrice).toFixed(2);\n  };\n  const handleSettingsSave = newSettings => {\n    setSettings(prev => ({\n      ...prev,\n      ...newSettings\n    }));\n    showNotification('Auto-optimizer settings saved', 'success');\n  };\n  const handleRunNow = () => {\n    if (!isConnected) {\n      showNotification('Please connect your wallet first', 'error');\n      return;\n    }\n    if (isRunningOptimization) {\n      showNotification('Optimization already in progress', 'warning');\n      return;\n    }\n    runAutoOptimization();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto py-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold\",\n        children: \"Portfolio Auto-Optimizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), !isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-yellow-100 text-yellow-800 px-4 py-2 rounded-md\",\n        children: \"Please connect your wallet to use auto-optimization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:col-span-2\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                  children: \"Auto-Optimization\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n                  children: \"Let AI automatically optimize your portfolio for maximum yield\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: toggleAutoOptimize,\n                className: isEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700',\n                children: [isEnabled ? 'Disable' : 'Enable', \" Auto-Optimize\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(OptimizerStatus, {\n              isEnabled: isEnabled,\n              nextRunTime: nextRunTime,\n              lastRunTime: lastRunTime,\n              lastResult: lastResult,\n              isRunning: isRunningOptimization\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleRunNow,\n                disabled: !isConnected || isRunningOptimization,\n                className: \"w-full\",\n                children: isRunningOptimization ? 'Optimization in Progress...' : 'Run Optimization Now'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                children: \"Portfolio Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n                children: \"Current allocation versus optimal allocation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(PortfolioBalance, {\n                portfolio: portfolio,\n                settings: settings,\n                isLoading: isPortfolioLoading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                children: \"Optimization History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n                children: \"Recent auto-optimization activities\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(ExecutionHistory, {\n                history: history\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n              children: \"Optimizer Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n              children: \"Configure auto-optimization parameters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(OptimizerSettings, {\n              settings: settings,\n              onSave: handleSettingsSave,\n              isEnabled: isEnabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoOptimizer, \"K91Ft6dPIz/1tvr9AhkAaoz4rvA=\", false, function () {\n  return [usePortfolio, useRecommendations, useTransactions];\n});\n_c = AutoOptimizer;\nexport default AutoOptimizer;\nvar _c;\n$RefreshReg$(_c, \"AutoOptimizer\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Card","CardHeader","CardTitle","CardDescription","CardContent","Button","OptimizerStatus","OptimizerSettings","PortfolioBalance","ExecutionHistory","WalletContext","UserContext","NotificationContext","usePortfolio","useRecommendations","useTransactions","jsxDEV","_jsxDEV","AutoOptimizer","_s","wallet","isConnected","preferences","showNotification","portfolio","fetchPortfolio","isLoading","isPortfolioLoading","getAIRecommendation","executeStrategy","isEnabled","setIsEnabled","nextRunTime","setNextRunTime","lastRunTime","setLastRunTime","lastResult","setLastResult","history","setHistory","settings","setSettings","interval","threshold","maxSlippage","preserveStakedPositions","riskProfile","autoAdjustTiming","isRunningOptimization","setIsRunningOptimization","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","prev","error","console","isEnabledSaved","lastRun","parseInt","nextRun","savedHistory","lastResultSaved","checkInterval","setInterval","now","Date","runAutoOptimization","clearInterval","setItem","stringify","toggleAutoOptimize","newStatus","toString","_result$operations","_result$failedOperati","portfolioData","address","recommendation","walletAddress","amount","totalValueUSD","driftResult","calculateDrift","maxDrift","entry","timestamp","type","status","reason","toFixed","driftPercentage","addToHistory","scheduleNextRun","operations","prepareOperationsFromRecommendation","result","slippage","historyEntry","success","length","failedOperations","errorEntry","message","retryTime","updatedHistory","preserveStaked","allocation","currentAllocation","calculateCurrentAllocation","targetAllocation","forEach","item","protocol","toLowerCase","parseFloat","percentage","Object","entries","target","isStakedProtocol","log","percentageDiff","push","getOperationType","calculateAmountFromPercentage","action","current","totalValue","apt","valueUSD","stakedTokens","key","ammLiquidity","hasLiquidity","drifts","totalDrift","currentPct","targetPct","drift","Math","abs","max","avgDrift","sort","a","b","includes","aptPrice","handleSettingsSave","newSettings","handleRunNow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isRunning","disabled","onSave","_c","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/pages/AutoOptimizer.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '../components/common/Card';\r\nimport { Button } from '../components/common/Button';\r\nimport OptimizerStatus from '../components/optimizer/OptimizerStatus';\r\nimport OptimizerSettings from '../components/optimizer/OptimizerSettings';\r\nimport PortfolioBalance from '../components/optimizer/PortfolioBalance';\r\nimport ExecutionHistory from '../components/optimizer/ExecutionHistory';\r\nimport { WalletContext } from '../context/WalletContext';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { NotificationContext } from '../context/NotificationContext';\r\nimport usePortfolio from '../hooks/usePortfolio';\r\nimport useRecommendations from '../hooks/useRecommendations';\r\nimport useTransactions from '../hooks/useTransactions';\r\n\r\nconst AutoOptimizer = () => {\r\n  const { wallet, isConnected } = useContext(WalletContext);\r\n  const { preferences } = useContext(UserContext);\r\n  const { showNotification } = useContext(NotificationContext);\r\n  const { portfolio, fetchPortfolio, isLoading: isPortfolioLoading } = usePortfolio();\r\n  const { getAIRecommendation } = useRecommendations();\r\n  const { executeStrategy } = useTransactions();\r\n\r\n  const [isEnabled, setIsEnabled] = useState(false);\r\n  const [nextRunTime, setNextRunTime] = useState(null);\r\n  const [lastRunTime, setLastRunTime] = useState(null);\r\n  const [lastResult, setLastResult] = useState(null);\r\n  const [history, setHistory] = useState([]);\r\n  const [settings, setSettings] = useState({\r\n    interval: 24, // hours\r\n    threshold: 5, // percentage drift\r\n    maxSlippage: 2.5, // percentage\r\n    preserveStakedPositions: true,\r\n    riskProfile: 'balanced',\r\n    autoAdjustTiming: true\r\n  });\r\n  const [isRunningOptimization, setIsRunningOptimization] = useState(false);\r\n\r\n  // Load settings from localStorage\r\n  useEffect(() => {\r\n    const savedSettings = localStorage.getItem('autoOptimizerSettings');\r\n    if (savedSettings) {\r\n      try {\r\n        const parsedSettings = JSON.parse(savedSettings);\r\n        setSettings(prev => ({ ...prev, ...parsedSettings }));\r\n      } catch (error) {\r\n        console.error('Failed to parse saved settings:', error);\r\n      }\r\n    }\r\n\r\n    // Load state from localStorage\r\n    const isEnabledSaved = localStorage.getItem('autoOptimizeEnabled') === 'true';\r\n    setIsEnabled(isEnabledSaved);\r\n\r\n    const lastRun = localStorage.getItem('lastAutoOptimizeRun');\r\n    if (lastRun) {\r\n      setLastRunTime(parseInt(lastRun));\r\n    }\r\n\r\n    const nextRun = localStorage.getItem('nextAutoOptimizeRun');\r\n    if (nextRun) {\r\n      setNextRunTime(parseInt(nextRun));\r\n    }\r\n\r\n    // Load history from localStorage\r\n    const savedHistory = localStorage.getItem('autoOptimizeHistory');\r\n    if (savedHistory) {\r\n      try {\r\n        setHistory(JSON.parse(savedHistory));\r\n      } catch (error) {\r\n        console.error('Failed to parse optimization history:', error);\r\n      }\r\n    }\r\n\r\n    // Load last result\r\n    const lastResultSaved = localStorage.getItem('lastAutoOptimizeResult');\r\n    if (lastResultSaved) {\r\n      try {\r\n        setLastResult(JSON.parse(lastResultSaved));\r\n      } catch (error) {\r\n        console.error('Failed to parse last optimization result:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Update timer and check for scheduled runs\r\n  useEffect(() => {\r\n    if (!isEnabled || !nextRunTime) return;\r\n\r\n    const checkInterval = setInterval(() => {\r\n      const now = Date.now();\r\n      \r\n      // Update next run time display in UI\r\n      setNextRunTime(prev => prev);\r\n      \r\n      // Check if it's time to run optimization\r\n      if (now >= nextRunTime) {\r\n        runAutoOptimization();\r\n      }\r\n    }, 60000); // Check every minute\r\n\r\n    return () => clearInterval(checkInterval);\r\n  }, [isEnabled, nextRunTime]);\r\n\r\n  // Save settings to localStorage when they change\r\n  useEffect(() => {\r\n    localStorage.setItem('autoOptimizerSettings', JSON.stringify(settings));\r\n  }, [settings]);\r\n\r\n  const toggleAutoOptimize = () => {\r\n    const newStatus = !isEnabled;\r\n    setIsEnabled(newStatus);\r\n    localStorage.setItem('autoOptimizeEnabled', newStatus.toString());\r\n\r\n    if (newStatus) {\r\n      // Schedule next run\r\n      const now = Date.now();\r\n      const nextRun = now + (settings.interval * 60 * 60 * 1000);\r\n      setNextRunTime(nextRun);\r\n      localStorage.setItem('nextAutoOptimizeRun', nextRun.toString());\r\n      showNotification('Auto-optimization enabled', 'success');\r\n    } else {\r\n      showNotification('Auto-optimization disabled', 'info');\r\n    }\r\n  };\r\n\r\n  const runAutoOptimization = async () => {\r\n    if (isRunningOptimization || !isConnected) return;\r\n    \r\n    setIsRunningOptimization(true);\r\n    showNotification('Auto-optimization in progress...', 'info');\r\n    \r\n    try {\r\n      // 1. Fetch current portfolio\r\n      const portfolioData = await fetchPortfolio(wallet.address);\r\n      \r\n      // 2. Get AI recommendation\r\n      const recommendation = await getAIRecommendation({\r\n        walletAddress: wallet.address,\r\n        amount: portfolioData.totalValueUSD || 100,\r\n        riskProfile: settings.riskProfile\r\n      });\r\n      \r\n      // 3. Calculate drift and check if rebalancing is needed\r\n      const driftResult = calculateDrift(portfolioData, recommendation);\r\n      \r\n      if (driftResult.maxDrift < settings.threshold) {\r\n        // Rebalancing not needed - record in history\r\n        const entry = {\r\n          timestamp: Date.now(),\r\n          type: 'check',\r\n          status: 'skipped',\r\n          reason: `Portfolio drift (${driftResult.maxDrift.toFixed(2)}%) below threshold (${settings.threshold}%)`,\r\n          driftPercentage: driftResult.maxDrift\r\n        };\r\n        \r\n        addToHistory(entry);\r\n        \r\n        showNotification('Portfolio already optimally balanced', 'success');\r\n        \r\n        // Schedule next run\r\n        scheduleNextRun();\r\n        setIsRunningOptimization(false);\r\n        return;\r\n      }\r\n      \r\n      // 4. Prepare operations\r\n      const operations = prepareOperationsFromRecommendation(\r\n        recommendation, \r\n        portfolioData,\r\n        settings.preserveStakedPositions\r\n      );\r\n      \r\n      // 5. Execute strategy\r\n      const result = await executeStrategy(operations, {\r\n        slippage: settings.maxSlippage / 100\r\n      });\r\n      \r\n      // 6. Save result\r\n      setLastResult(result);\r\n      localStorage.setItem('lastAutoOptimizeResult', JSON.stringify(result));\r\n      \r\n      // 7. Record in history\r\n      const historyEntry = {\r\n        timestamp: Date.now(),\r\n        type: 'rebalance',\r\n        status: result.success ? 'success' : 'partial',\r\n        operations: result.operations?.length || 0,\r\n        failedOperations: result.failedOperations?.length || 0,\r\n        driftPercentage: driftResult.maxDrift\r\n      };\r\n      \r\n      addToHistory(historyEntry);\r\n      \r\n      // 8. Show notification\r\n      showNotification(\r\n        result.success \r\n          ? `Auto-optimization completed with ${result.operations.length} successful operations` \r\n          : `Auto-optimization completed with ${result.failedOperations.length} failures`,\r\n        result.success ? 'success' : 'warning'\r\n      );\r\n      \r\n      // 9. Update last run time and schedule next run\r\n      const now = Date.now();\r\n      setLastRunTime(now);\r\n      localStorage.setItem('lastAutoOptimizeRun', now.toString());\r\n      \r\n      scheduleNextRun();\r\n      \r\n    } catch (error) {\r\n      console.error('Auto-optimization failed:', error);\r\n      \r\n      // Record error in history\r\n      const errorEntry = {\r\n        timestamp: Date.now(),\r\n        type: 'error',\r\n        status: 'failed',\r\n        reason: error.message || 'Unknown error'\r\n      };\r\n      \r\n      addToHistory(errorEntry);\r\n      \r\n      showNotification(`Auto-optimization failed: ${error.message}`, 'error');\r\n      \r\n      // Schedule retry in 1 hour\r\n      const retryTime = Date.now() + (1 * 60 * 60 * 1000);\r\n      setNextRunTime(retryTime);\r\n      localStorage.setItem('nextAutoOptimizeRun', retryTime.toString());\r\n    } finally {\r\n      setIsRunningOptimization(false);\r\n    }\r\n  };\r\n\r\n  const scheduleNextRun = () => {\r\n    if (!isEnabled) return;\r\n    \r\n    const now = Date.now();\r\n    const nextRun = now + (settings.interval * 60 * 60 * 1000);\r\n    setNextRunTime(nextRun);\r\n    localStorage.setItem('nextAutoOptimizeRun', nextRun.toString());\r\n  };\r\n\r\n  const addToHistory = (entry) => {\r\n    const updatedHistory = [entry, ...history];\r\n    if (updatedHistory.length > 10) {\r\n      updatedHistory.length = 10; // Keep only the 10 most recent entries\r\n    }\r\n    setHistory(updatedHistory);\r\n    localStorage.setItem('autoOptimizeHistory', JSON.stringify(updatedHistory));\r\n  };\r\n\r\n  const prepareOperationsFromRecommendation = (recommendation, portfolioData, preserveStaked = true) => {\r\n    if (!recommendation.allocation) return [];\r\n    \r\n    // Calculate current allocation percentages\r\n    const currentAllocation = calculateCurrentAllocation(portfolioData);\r\n    \r\n    // Build target allocation map\r\n    const targetAllocation = {};\r\n    recommendation.allocation.forEach(item => {\r\n      targetAllocation[item.protocol.toLowerCase()] = parseFloat(item.percentage);\r\n    });\r\n    \r\n    // Generate operations\r\n    const operations = [];\r\n    \r\n    // First handle decreases (unstakes, withdrawals)\r\n    for (const [protocol, percentage] of Object.entries(currentAllocation)) {\r\n      const target = targetAllocation[protocol.toLowerCase()] || 0;\r\n      \r\n      if (percentage > target) {\r\n        // Skip staked positions if preserveStaked is true\r\n        if (preserveStaked && isStakedProtocol(protocol)) {\r\n          console.log(`Skipping unstake for ${protocol} due to preserveStakedPositions setting`);\r\n          continue;\r\n        }\r\n        \r\n        const percentageDiff = percentage - target;\r\n        if (percentageDiff >= 1) { // Only rebalance if diff is at least 1%\r\n          operations.push({\r\n            protocol,\r\n            type: getOperationType(protocol, 'decrease'),\r\n            amount: calculateAmountFromPercentage(percentageDiff, portfolioData.totalValueUSD),\r\n            action: 'decrease'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Then handle increases (stakes, deposits)\r\n    for (const [protocol, target] of Object.entries(targetAllocation)) {\r\n      const current = currentAllocation[protocol.toLowerCase()] || 0;\r\n      \r\n      if (target > current) {\r\n        const percentageDiff = target - current;\r\n        if (percentageDiff >= 1) { // Only rebalance if diff is at least 1%\r\n          operations.push({\r\n            protocol,\r\n            type: getOperationType(protocol, 'increase'),\r\n            amount: calculateAmountFromPercentage(percentageDiff, portfolioData.totalValueUSD),\r\n            action: 'increase'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operations;\r\n  };\r\n\r\n  const calculateCurrentAllocation = (portfolioData) => {\r\n    const result = {};\r\n    const totalValue = parseFloat(portfolioData.totalValueUSD || 0);\r\n    \r\n    if (totalValue <= 0) return result;\r\n    \r\n    // Add native APT\r\n    if (portfolioData.apt && parseFloat(portfolioData.apt.valueUSD) > 0) {\r\n      result['native'] = (portfolioData.apt.valueUSD / totalValue * 100);\r\n    }\r\n    \r\n    // Add staked tokens\r\n    const stakedTokens = {\r\n      'stAPT': 'amnis',\r\n      'sthAPT': 'thala',\r\n      'tAPT': 'tortuga',\r\n      'dAPT': 'ditto'\r\n    };\r\n    \r\n    for (const [key, protocol] of Object.entries(stakedTokens)) {\r\n      if (portfolioData[key] && parseFloat(portfolioData[key].valueUSD) > 0) {\r\n        result[protocol] = (portfolioData[key].valueUSD / totalValue * 100);\r\n      }\r\n    }\r\n    \r\n    // Add AMM liquidity if any\r\n    if (portfolioData.ammLiquidity && portfolioData.ammLiquidity.hasLiquidity) {\r\n      result['liquidity'] = (portfolioData.ammLiquidity.valueUSD / totalValue * 100);\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  const calculateDrift = (portfolioData, recommendation) => {\r\n    const currentAllocation = calculateCurrentAllocation(portfolioData);\r\n    \r\n    // Build target allocation from recommendation\r\n    const targetAllocation = {};\r\n    recommendation.allocation.forEach(item => {\r\n      targetAllocation[item.protocol.toLowerCase()] = parseFloat(item.percentage);\r\n    });\r\n    \r\n    // Calculate drift for each protocol\r\n    const drifts = [];\r\n    let maxDrift = 0;\r\n    let totalDrift = 0;\r\n    \r\n    // Check existing allocations against targets\r\n    for (const [protocol, currentPct] of Object.entries(currentAllocation)) {\r\n      const targetPct = targetAllocation[protocol.toLowerCase()] || 0;\r\n      const drift = Math.abs(currentPct - targetPct);\r\n      \r\n      drifts.push({\r\n        protocol,\r\n        current: currentPct,\r\n        target: targetPct,\r\n        drift,\r\n        action: currentPct > targetPct ? 'decrease' : 'increase'\r\n      });\r\n      \r\n      maxDrift = Math.max(maxDrift, drift);\r\n      totalDrift += drift;\r\n    }\r\n    \r\n    // Check for targets not in current allocation\r\n    for (const [protocol, targetPct] of Object.entries(targetAllocation)) {\r\n      if (!currentAllocation[protocol.toLowerCase()]) {\r\n        drifts.push({\r\n          protocol,\r\n          current: 0,\r\n          target: targetPct,\r\n          drift: targetPct,\r\n          action: 'add'\r\n        });\r\n        \r\n        maxDrift = Math.max(maxDrift, targetPct);\r\n        totalDrift += targetPct;\r\n      }\r\n    }\r\n    \r\n    const avgDrift = drifts.length > 0 ? totalDrift / drifts.length : 0;\r\n    \r\n    return {\r\n      drifts: drifts.sort((a, b) => b.drift - a.drift),\r\n      maxDrift,\r\n      avgDrift\r\n    };\r\n  };\r\n\r\n  const getOperationType = (protocol, action) => {\r\n    protocol = protocol.toLowerCase();\r\n    \r\n    if (action === 'decrease') {\r\n      if (['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol)) {\r\n        return 'unstake';\r\n      } else if (['aries', 'echelon', 'echo'].includes(protocol)) {\r\n        return 'withdraw';\r\n      } else if (['liquidity', 'pancakeswap', 'liquidswap', 'cetus'].includes(protocol)) {\r\n        return 'removeLiquidity';\r\n      }\r\n      return 'withdraw';\r\n    } else {\r\n      if (['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol)) {\r\n        return 'stake';\r\n      } else if (['aries', 'echelon', 'echo'].includes(protocol)) {\r\n        return 'lend';\r\n      } else if (['liquidity', 'pancakeswap', 'liquidswap', 'cetus'].includes(protocol)) {\r\n        return 'addLiquidity';\r\n      }\r\n      return 'stake';\r\n    }\r\n  };\r\n\r\n  const isStakedProtocol = (protocol) => {\r\n    return ['amnis', 'thala', 'tortuga', 'ditto'].includes(protocol.toLowerCase());\r\n  };\r\n\r\n  const calculateAmountFromPercentage = (percentage, totalValueUSD) => {\r\n    // Assume 1 APT = $10 if we don't have the data\r\n    const aptPrice = 10;\r\n    return ((percentage / 100) * totalValueUSD / aptPrice).toFixed(2);\r\n  };\r\n\r\n  const handleSettingsSave = (newSettings) => {\r\n    setSettings(prev => ({ ...prev, ...newSettings }));\r\n    showNotification('Auto-optimizer settings saved', 'success');\r\n  };\r\n\r\n  const handleRunNow = () => {\r\n    if (!isConnected) {\r\n      showNotification('Please connect your wallet first', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (isRunningOptimization) {\r\n      showNotification('Optimization already in progress', 'warning');\r\n      return;\r\n    }\r\n    \r\n    runAutoOptimization();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold\">Portfolio Auto-Optimizer</h1>\r\n        {!isConnected && (\r\n          <div className=\"bg-yellow-100 text-yellow-800 px-4 py-2 rounded-md\">\r\n            Please connect your wallet to use auto-optimization\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n        <div className=\"md:col-span-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <div className=\"flex justify-between items-center\">\r\n                <div>\r\n                  <CardTitle>Auto-Optimization</CardTitle>\r\n                  <CardDescription>\r\n                    Let AI automatically optimize your portfolio for maximum yield\r\n                  </CardDescription>\r\n                </div>\r\n                <Button \r\n                  onClick={toggleAutoOptimize}\r\n                  className={isEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'}\r\n                >\r\n                  {isEnabled ? 'Disable' : 'Enable'} Auto-Optimize\r\n                </Button>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <OptimizerStatus \r\n                isEnabled={isEnabled}\r\n                nextRunTime={nextRunTime}\r\n                lastRunTime={lastRunTime}\r\n                lastResult={lastResult}\r\n                isRunning={isRunningOptimization}\r\n              />\r\n              <div className=\"mt-6\">\r\n                <Button \r\n                  onClick={handleRunNow} \r\n                  disabled={!isConnected || isRunningOptimization}\r\n                  className=\"w-full\"\r\n                >\r\n                  {isRunningOptimization ? 'Optimization in Progress...' : 'Run Optimization Now'}\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <div className=\"mt-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Portfolio Balance</CardTitle>\r\n                <CardDescription>\r\n                  Current allocation versus optimal allocation\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <PortfolioBalance \r\n                  portfolio={portfolio} \r\n                  settings={settings}\r\n                  isLoading={isPortfolioLoading}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n          \r\n          <div className=\"mt-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Optimization History</CardTitle>\r\n                <CardDescription>\r\n                  Recent auto-optimization activities\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ExecutionHistory history={history} />\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Optimizer Settings</CardTitle>\r\n              <CardDescription>\r\n                Configure auto-optimization parameters\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <OptimizerSettings \r\n                settings={settings} \r\n                onSave={handleSettingsSave} \r\n                isEnabled={isEnabled}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoOptimizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
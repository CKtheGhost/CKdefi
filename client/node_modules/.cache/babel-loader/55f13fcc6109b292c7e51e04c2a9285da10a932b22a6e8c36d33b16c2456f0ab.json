{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Nexus-level UserContext.jsx\n// Original user preference logic with robust logging, error handling,\n// plus an easy approach to login/logout and preference management.\n\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const USER_PREFERENCES = {\n  RISK_PROFILE: 'riskProfile',\n  AUTO_REBALANCE: 'autoRebalance',\n  REBALANCE_THRESHOLD: 'rebalanceThreshold',\n  NOTIFICATION_PREFERENCES: 'notificationPreferences',\n  DASHBOARD_LAYOUT: 'dashboardLayout',\n  DATA_VIEW: 'dataView'\n};\nconst DEFAULT_PREFERENCES = {\n  [USER_PREFERENCES.RISK_PROFILE]: 'balanced',\n  [USER_PREFERENCES.AUTO_REBALANCE]: false,\n  [USER_PREFERENCES.REBALANCE_THRESHOLD]: 5,\n  [USER_PREFERENCES.NOTIFICATION_PREFERENCES]: {\n    transactions: true,\n    priceAlerts: true,\n    newsletterUpdates: false,\n    securityAlerts: true\n  },\n  [USER_PREFERENCES.DASHBOARD_LAYOUT]: 'default',\n  [USER_PREFERENCES.DATA_VIEW]: 'chart'\n};\nexport const UserContext = /*#__PURE__*/createContext(null);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [userProfile, setUserProfile] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [preferences, setPreferences] = useState(DEFAULT_PREFERENCES);\n  const [transactionHistory, setTransactionHistory] = useState([]);\n  const [strategyHistory, setStrategyHistory] = useState([]);\n\n  // On mount, load data from localStorage\n  useEffect(() => {\n    try {\n      const storedPrefs = localStorage.getItem('userPreferences');\n      if (storedPrefs) {\n        const parsed = JSON.parse(storedPrefs);\n        setPreferences(prev => ({\n          ...prev,\n          ...parsed\n        }));\n      }\n    } catch (err) {\n      console.error('[UserContext] Error parsing user preferences:', err);\n    }\n    try {\n      const storedTxs = localStorage.getItem('transactionHistory');\n      if (storedTxs) {\n        setTransactionHistory(JSON.parse(storedTxs));\n      }\n    } catch (err) {\n      console.error('[UserContext] Error parsing transaction history:', err);\n    }\n    try {\n      const storedStrategies = localStorage.getItem('strategyHistory');\n      if (storedStrategies) {\n        setStrategyHistory(JSON.parse(storedStrategies));\n      }\n    } catch (err) {\n      console.error('[UserContext] Error parsing strategy history:', err);\n    }\n    try {\n      const storedProfile = localStorage.getItem('userProfile');\n      if (storedProfile) {\n        const parsedProf = JSON.parse(storedProfile);\n        setUserProfile(parsedProf);\n        setIsLoggedIn(true);\n      }\n    } catch (err) {\n      console.error('[UserContext] Error parsing user profile:', err);\n    }\n  }, []);\n\n  // Persist preferences\n  useEffect(() => {\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n  }, [preferences]);\n\n  // Persist transaction history\n  useEffect(() => {\n    localStorage.setItem('transactionHistory', JSON.stringify(transactionHistory));\n  }, [transactionHistory]);\n\n  // Persist strategy history\n  useEffect(() => {\n    localStorage.setItem('strategyHistory', JSON.stringify(strategyHistory));\n  }, [strategyHistory]);\n\n  // Update a single preference\n  const updatePreference = useCallback((key, value) => {\n    if (Object.values(USER_PREFERENCES).includes(key)) {\n      setPreferences(prev => ({\n        ...prev,\n        [key]: value\n      }));\n    } else {\n      console.warn(`[UserContext] Attempted to update unknown preference key: ${key}`);\n    }\n  }, []);\n\n  // Reset all preferences to defaults\n  const resetPreferences = useCallback(() => {\n    setPreferences(DEFAULT_PREFERENCES);\n  }, []);\n\n  // Add a new transaction\n  const addTransaction = useCallback(tx => {\n    const withTime = {\n      ...tx,\n      timestamp: tx.timestamp || Date.now()\n    };\n    setTransactionHistory(prev => [withTime, ...prev].slice(0, 100));\n  }, []);\n\n  // Clear all transaction history\n  const clearTransactionHistory = useCallback(() => {\n    setTransactionHistory([]);\n  }, []);\n\n  // Add a new strategy\n  const addStrategy = useCallback(strategy => {\n    const withTime = {\n      ...strategy,\n      timestamp: strategy.timestamp || Date.now()\n    };\n    setStrategyHistory(prev => [withTime, ...prev].slice(0, 50));\n  }, []);\n\n  // Clear all strategy history\n  const clearStrategyHistory = useCallback(() => {\n    setStrategyHistory([]);\n  }, []);\n\n  // Mock login\n  const login = useCallback(async creds => {\n    try {\n      // In a real setup: call backend\n      const mockProfile = {\n        id: 'user-123',\n        email: creds.email,\n        name: 'Demo User',\n        createdAt: new Date().toISOString()\n      };\n      setUserProfile(mockProfile);\n      setIsLoggedIn(true);\n      localStorage.setItem('userProfile', JSON.stringify(mockProfile));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('[UserContext] Login error:', err);\n      return {\n        success: false,\n        error: err.message || 'Login failed'\n      };\n    }\n  }, []);\n\n  // Logout user\n  const logout = useCallback(() => {\n    setUserProfile(null);\n    setIsLoggedIn(false);\n    localStorage.removeItem('userProfile');\n  }, []);\n  const value = {\n    userProfile,\n    isLoggedIn,\n    login,\n    logout,\n    preferences,\n    updatePreference,\n    resetPreferences,\n    transactionHistory,\n    addTransaction,\n    clearTransactionHistory,\n    strategyHistory,\n    addStrategy,\n    clearStrategyHistory,\n    getRiskProfile: () => preferences[USER_PREFERENCES.RISK_PROFILE],\n    isAutoRebalanceEnabled: () => preferences[USER_PREFERENCES.AUTO_REBALANCE],\n    getRebalanceThreshold: () => preferences[USER_PREFERENCES.REBALANCE_THRESHOLD],\n    getNotificationSettings: () => preferences[USER_PREFERENCES.NOTIFICATION_PREFERENCES],\n    getDashboardLayout: () => preferences[USER_PREFERENCES.DASHBOARD_LAYOUT],\n    getDataViewPreference: () => preferences[USER_PREFERENCES.DATA_VIEW]\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook\n_s(UserProvider, \"zP8u7XvGCsggfDhGE/JPnXhGTno=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const ctx = useContext(UserContext);\n  if (!ctx) {\n    throw new Error('[useUser] must be used within a UserProvider');\n  }\n  return ctx;\n};\n_s2(useUser, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","jsxDEV","_jsxDEV","USER_PREFERENCES","RISK_PROFILE","AUTO_REBALANCE","REBALANCE_THRESHOLD","NOTIFICATION_PREFERENCES","DASHBOARD_LAYOUT","DATA_VIEW","DEFAULT_PREFERENCES","transactions","priceAlerts","newsletterUpdates","securityAlerts","UserContext","UserProvider","children","_s","userProfile","setUserProfile","isLoggedIn","setIsLoggedIn","preferences","setPreferences","transactionHistory","setTransactionHistory","strategyHistory","setStrategyHistory","storedPrefs","localStorage","getItem","parsed","JSON","parse","prev","err","console","error","storedTxs","storedStrategies","storedProfile","parsedProf","setItem","stringify","updatePreference","key","value","Object","values","includes","warn","resetPreferences","addTransaction","tx","withTime","timestamp","Date","now","slice","clearTransactionHistory","addStrategy","strategy","clearStrategyHistory","login","creds","mockProfile","id","email","name","createdAt","toISOString","success","message","logout","removeItem","getRiskProfile","isAutoRebalanceEnabled","getRebalanceThreshold","getNotificationSettings","getDashboardLayout","getDataViewPreference","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","ctx","Error","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/UserContext.jsx"],"sourcesContent":["// Nexus-level UserContext.jsx\r\n// Original user preference logic with robust logging, error handling,\r\n// plus an easy approach to login/logout and preference management.\r\n\r\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\r\n\r\nexport const USER_PREFERENCES = {\r\n  RISK_PROFILE: 'riskProfile',\r\n  AUTO_REBALANCE: 'autoRebalance',\r\n  REBALANCE_THRESHOLD: 'rebalanceThreshold',\r\n  NOTIFICATION_PREFERENCES: 'notificationPreferences',\r\n  DASHBOARD_LAYOUT: 'dashboardLayout',\r\n  DATA_VIEW: 'dataView',\r\n};\r\n\r\nconst DEFAULT_PREFERENCES = {\r\n  [USER_PREFERENCES.RISK_PROFILE]: 'balanced',\r\n  [USER_PREFERENCES.AUTO_REBALANCE]: false,\r\n  [USER_PREFERENCES.REBALANCE_THRESHOLD]: 5,\r\n  [USER_PREFERENCES.NOTIFICATION_PREFERENCES]: {\r\n    transactions: true,\r\n    priceAlerts: true,\r\n    newsletterUpdates: false,\r\n    securityAlerts: true,\r\n  },\r\n  [USER_PREFERENCES.DASHBOARD_LAYOUT]: 'default',\r\n  [USER_PREFERENCES.DATA_VIEW]: 'chart',\r\n};\r\n\r\nexport const UserContext = createContext(null);\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [preferences, setPreferences] = useState(DEFAULT_PREFERENCES);\r\n  const [transactionHistory, setTransactionHistory] = useState([]);\r\n  const [strategyHistory, setStrategyHistory] = useState([]);\r\n\r\n  // On mount, load data from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const storedPrefs = localStorage.getItem('userPreferences');\r\n      if (storedPrefs) {\r\n        const parsed = JSON.parse(storedPrefs);\r\n        setPreferences((prev) => ({ ...prev, ...parsed }));\r\n      }\r\n    } catch (err) {\r\n      console.error('[UserContext] Error parsing user preferences:', err);\r\n    }\r\n\r\n    try {\r\n      const storedTxs = localStorage.getItem('transactionHistory');\r\n      if (storedTxs) {\r\n        setTransactionHistory(JSON.parse(storedTxs));\r\n      }\r\n    } catch (err) {\r\n      console.error('[UserContext] Error parsing transaction history:', err);\r\n    }\r\n\r\n    try {\r\n      const storedStrategies = localStorage.getItem('strategyHistory');\r\n      if (storedStrategies) {\r\n        setStrategyHistory(JSON.parse(storedStrategies));\r\n      }\r\n    } catch (err) {\r\n      console.error('[UserContext] Error parsing strategy history:', err);\r\n    }\r\n\r\n    try {\r\n      const storedProfile = localStorage.getItem('userProfile');\r\n      if (storedProfile) {\r\n        const parsedProf = JSON.parse(storedProfile);\r\n        setUserProfile(parsedProf);\r\n        setIsLoggedIn(true);\r\n      }\r\n    } catch (err) {\r\n      console.error('[UserContext] Error parsing user profile:', err);\r\n    }\r\n  }, []);\r\n\r\n  // Persist preferences\r\n  useEffect(() => {\r\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\r\n  }, [preferences]);\r\n\r\n  // Persist transaction history\r\n  useEffect(() => {\r\n    localStorage.setItem('transactionHistory', JSON.stringify(transactionHistory));\r\n  }, [transactionHistory]);\r\n\r\n  // Persist strategy history\r\n  useEffect(() => {\r\n    localStorage.setItem('strategyHistory', JSON.stringify(strategyHistory));\r\n  }, [strategyHistory]);\r\n\r\n  // Update a single preference\r\n  const updatePreference = useCallback((key, value) => {\r\n    if (Object.values(USER_PREFERENCES).includes(key)) {\r\n      setPreferences((prev) => ({ ...prev, [key]: value }));\r\n    } else {\r\n      console.warn(`[UserContext] Attempted to update unknown preference key: ${key}`);\r\n    }\r\n  }, []);\r\n\r\n  // Reset all preferences to defaults\r\n  const resetPreferences = useCallback(() => {\r\n    setPreferences(DEFAULT_PREFERENCES);\r\n  }, []);\r\n\r\n  // Add a new transaction\r\n  const addTransaction = useCallback((tx) => {\r\n    const withTime = { ...tx, timestamp: tx.timestamp || Date.now() };\r\n    setTransactionHistory((prev) => [withTime, ...prev].slice(0, 100));\r\n  }, []);\r\n\r\n  // Clear all transaction history\r\n  const clearTransactionHistory = useCallback(() => {\r\n    setTransactionHistory([]);\r\n  }, []);\r\n\r\n  // Add a new strategy\r\n  const addStrategy = useCallback((strategy) => {\r\n    const withTime = { ...strategy, timestamp: strategy.timestamp || Date.now() };\r\n    setStrategyHistory((prev) => [withTime, ...prev].slice(0, 50));\r\n  }, []);\r\n\r\n  // Clear all strategy history\r\n  const clearStrategyHistory = useCallback(() => {\r\n    setStrategyHistory([]);\r\n  }, []);\r\n\r\n  // Mock login\r\n  const login = useCallback(async (creds) => {\r\n    try {\r\n      // In a real setup: call backend\r\n      const mockProfile = {\r\n        id: 'user-123',\r\n        email: creds.email,\r\n        name: 'Demo User',\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      setUserProfile(mockProfile);\r\n      setIsLoggedIn(true);\r\n      localStorage.setItem('userProfile', JSON.stringify(mockProfile));\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('[UserContext] Login error:', err);\r\n      return { success: false, error: err.message || 'Login failed' };\r\n    }\r\n  }, []);\r\n\r\n  // Logout user\r\n  const logout = useCallback(() => {\r\n    setUserProfile(null);\r\n    setIsLoggedIn(false);\r\n    localStorage.removeItem('userProfile');\r\n  }, []);\r\n\r\n  const value = {\r\n    userProfile,\r\n    isLoggedIn,\r\n    login,\r\n    logout,\r\n\r\n    preferences,\r\n    updatePreference,\r\n    resetPreferences,\r\n\r\n    transactionHistory,\r\n    addTransaction,\r\n    clearTransactionHistory,\r\n\r\n    strategyHistory,\r\n    addStrategy,\r\n    clearStrategyHistory,\r\n\r\n    getRiskProfile: () => preferences[USER_PREFERENCES.RISK_PROFILE],\r\n    isAutoRebalanceEnabled: () => preferences[USER_PREFERENCES.AUTO_REBALANCE],\r\n    getRebalanceThreshold: () => preferences[USER_PREFERENCES.REBALANCE_THRESHOLD],\r\n    getNotificationSettings: () => preferences[USER_PREFERENCES.NOTIFICATION_PREFERENCES],\r\n    getDashboardLayout: () => preferences[USER_PREFERENCES.DASHBOARD_LAYOUT],\r\n    getDataViewPreference: () => preferences[USER_PREFERENCES.DATA_VIEW],\r\n  };\r\n\r\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\r\n};\r\n\r\n// Custom hook\r\nexport const useUser = () => {\r\n  const ctx = useContext(UserContext);\r\n  if (!ctx) {\r\n    throw new Error('[useUser] must be used within a UserProvider');\r\n  }\r\n  return ctx;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
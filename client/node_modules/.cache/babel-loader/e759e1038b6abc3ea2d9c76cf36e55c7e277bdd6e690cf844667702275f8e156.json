{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// useWallet.js - Hook for wallet connectivity and management\nimport { useState, useEffect, useCallback, useContext } from 'react';\nimport { NotificationContext } from '../context/NotificationContext';\n\n/**\r\n * Hook for managing wallet connections and operations on Aptos\r\n */\nexport const useWallet = () => {\n  _s();\n  // State for wallet connection\n  const [isConnected, setIsConnected] = useState(false);\n  const [wallet, setWallet] = useState(null);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [networkName, setNetworkName] = useState('');\n\n  // Get notification context for showing status\n  const {\n    showNotification\n  } = useContext(NotificationContext);\n\n  /**\r\n   * Connect to wallet\r\n   * Supports multiple wallet providers (Petra, Martian, etc.)\r\n   */\n  const connect = useCallback(async (providerName = null) => {\n    try {\n      var _response$account;\n      setIsConnecting(true);\n      setConnectionError(null);\n\n      // Check for available wallet providers\n      const providers = [];\n      if (window.aptos) providers.push({\n        name: 'aptos',\n        provider: window.aptos\n      });\n      if (window.petra) providers.push({\n        name: 'petra',\n        provider: window.petra\n      });\n      if (window.martian) providers.push({\n        name: 'martian',\n        provider: window.martian\n      });\n      if (window.pontem) providers.push({\n        name: 'pontem',\n        provider: window.pontem\n      });\n      if (window.rise) providers.push({\n        name: 'rise',\n        provider: window.rise\n      });\n      if (window.fewcha) providers.push({\n        name: 'fewcha',\n        provider: window.fewcha\n      });\n      if (providers.length === 0) {\n        throw new Error('No wallet providers found. Please install a compatible Aptos wallet extension.');\n      }\n\n      // Find specified provider or use first available\n      let targetProvider;\n      if (providerName) {\n        targetProvider = providers.find(p => p.name.toLowerCase() === providerName.toLowerCase());\n        if (!targetProvider) {\n          throw new Error(`${providerName} wallet not found. Please install the extension.`);\n        }\n      } else {\n        targetProvider = providers[0];\n      }\n\n      // Connect to wallet\n      const walletProvider = targetProvider.provider;\n      const response = await walletProvider.connect();\n\n      // Extract wallet address from response (handle different formats)\n      const address = typeof response === 'string' ? response : response.address || ((_response$account = response.account) === null || _response$account === void 0 ? void 0 : _response$account.address) || (typeof response.account === 'function' ? (await response.account()).address : null);\n      if (!address) {\n        throw new Error('Failed to retrieve wallet address');\n      }\n\n      // Get network info if available\n      let network = null;\n      let networkId = null;\n      try {\n        if (walletProvider.network) {\n          network = await walletProvider.network();\n        } else if (walletProvider.getNetwork) {\n          network = await walletProvider.getNetwork();\n        } else if (walletProvider.chainId) {\n          networkId = await walletProvider.chainId();\n        }\n      } catch (networkError) {\n        console.warn('Failed to fetch network information:', networkError);\n      }\n      const networkLabel = getNetworkLabel(network || networkId);\n\n      // Update wallet state\n      setWallet(response);\n      setWalletAddress(address);\n      setIsConnected(true);\n      setProvider(walletProvider);\n      setNetworkName(networkLabel);\n\n      // Store wallet address in local storage for persistence\n      localStorage.setItem('connectedWallet', address);\n      localStorage.setItem('walletProvider', targetProvider.name);\n      showNotification({\n        type: 'success',\n        title: 'Wallet Connected',\n        message: `Successfully connected to ${targetProvider.name} wallet`\n      });\n      return {\n        address,\n        provider: walletProvider\n      };\n    } catch (error) {\n      console.error('Wallet connection error:', error);\n      const errorMessage = getWalletErrorMessage(error);\n      setConnectionError(errorMessage);\n      showNotification({\n        type: 'error',\n        title: 'Connection Failed',\n        message: errorMessage\n      });\n      return null;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [showNotification]);\n\n  /**\r\n   * Disconnect from the wallet\r\n   */\n  const disconnect = useCallback(async () => {\n    try {\n      if (provider && provider.disconnect) {\n        await provider.disconnect();\n      }\n\n      // Clear wallet state\n      setWallet(null);\n      setWalletAddress('');\n      setIsConnected(false);\n      setProvider(null);\n\n      // Remove stored wallet info\n      localStorage.removeItem('connectedWallet');\n      localStorage.removeItem('walletProvider');\n      showNotification({\n        type: 'info',\n        title: 'Wallet Disconnected',\n        message: 'Successfully disconnected wallet'\n      });\n      return true;\n    } catch (error) {\n      console.error('Wallet disconnection error:', error);\n      showNotification({\n        type: 'error',\n        title: 'Disconnection Failed',\n        message: `Failed to disconnect wallet: ${error.message}`\n      });\n      return false;\n    }\n  }, [provider, showNotification]);\n\n  /**\r\n   * Sign and submit a transaction\r\n   */\n  const signAndSubmitTransaction = useCallback(async transaction => {\n    if (!isConnected || !provider) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      var _result$transaction;\n      showNotification({\n        type: 'info',\n        title: 'Transaction Initiated',\n        message: 'Please confirm the transaction in your wallet'\n      });\n      const result = await provider.signAndSubmitTransaction(transaction);\n\n      // Extract transaction hash from result (handles different provider formats)\n      const hash = result.hash || result.txHash || ((_result$transaction = result.transaction) === null || _result$transaction === void 0 ? void 0 : _result$transaction.hash);\n      if (!hash) {\n        throw new Error('Transaction submitted but no transaction hash returned');\n      }\n      showNotification({\n        type: 'success',\n        title: 'Transaction Submitted',\n        message: `Transaction submitted to the blockchain`\n      });\n      return {\n        success: true,\n        hash,\n        result\n      };\n    } catch (error) {\n      var _error$message, _error$message2, _error$message3;\n      console.error('Transaction error:', error);\n\n      // Check if user rejected transaction\n      if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('reject') || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('cancel') || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('denied')) {\n        showNotification({\n          type: 'warning',\n          title: 'Transaction Cancelled',\n          message: 'You cancelled the transaction'\n        });\n        return {\n          success: false,\n          error: 'User cancelled transaction'\n        };\n      }\n      showNotification({\n        type: 'error',\n        title: 'Transaction Failed',\n        message: `Error: ${error.message}`\n      });\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }, [isConnected, provider, showNotification]);\n\n  /**\r\n   * Check transaction status\r\n   */\n  const checkTransactionStatus = useCallback(async txHash => {\n    try {\n      // First try using provider's built-in method if available\n      if (provider && provider.getTransaction) {\n        const txInfo = await provider.getTransaction(txHash);\n        return {\n          confirmed: (txInfo === null || txInfo === void 0 ? void 0 : txInfo.success) === true,\n          status: txInfo !== null && txInfo !== void 0 && txInfo.success ? 'confirmed' : 'failed',\n          vmStatus: txInfo === null || txInfo === void 0 ? void 0 : txInfo.vm_status,\n          hash: txHash,\n          success: txInfo === null || txInfo === void 0 ? void 0 : txInfo.success\n        };\n      }\n\n      // Otherwise, use Aptos Explorer API\n      const response = await fetch(`https://fullnode.mainnet.aptoslabs.com/v1/transactions/by_hash/${txHash}`);\n      if (!response.ok) {\n        throw new Error(`Explorer API returned ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        confirmed: data.success === true,\n        status: data.success ? 'confirmed' : 'failed',\n        vmStatus: data.vm_status,\n        gasUsed: data.gas_used,\n        timestamp: data.timestamp,\n        version: data.version,\n        hash: txHash,\n        success: data.success\n      };\n    } catch (error) {\n      console.error('Error checking transaction status:', error);\n      return {\n        confirmed: false,\n        status: 'pending',\n        hash: txHash,\n        error: error.message\n      };\n    }\n  }, [provider]);\n\n  /**\r\n   * Restore wallet connection on component mount if available\r\n   */\n  useEffect(() => {\n    const restoreSavedConnection = async () => {\n      const savedAddress = localStorage.getItem('connectedWallet');\n      const savedProvider = localStorage.getItem('walletProvider');\n      if (savedAddress && !isConnected && !isConnecting) {\n        try {\n          await connect(savedProvider);\n        } catch (error) {\n          console.error('Failed to restore wallet connection:', error);\n          localStorage.removeItem('connectedWallet');\n          localStorage.removeItem('walletProvider');\n        }\n      }\n    };\n    restoreSavedConnection();\n  }, [connect, isConnected, isConnecting]);\n\n  /**\r\n   * Set up wallet event listeners\r\n   */\n  useEffect(() => {\n    const handleAccountChange = account => {\n      if (account) {\n        const address = account.address || (typeof account === 'object' ? account.address : account);\n        if (address && address !== walletAddress) {\n          setWalletAddress(address);\n          localStorage.setItem('connectedWallet', address);\n          showNotification({\n            type: 'info',\n            title: 'Account Changed',\n            message: 'Your wallet account has changed'\n          });\n        }\n      } else {\n        // Account disconnected\n        setWallet(null);\n        setWalletAddress('');\n        setIsConnected(false);\n        localStorage.removeItem('connectedWallet');\n        localStorage.removeItem('walletProvider');\n      }\n    };\n    const handleNetworkChange = network => {\n      if (network) {\n        const networkLabel = getNetworkLabel(network);\n        setNetworkName(networkLabel);\n        showNotification({\n          type: 'info',\n          title: 'Network Changed',\n          message: `Switched to ${networkLabel}`\n        });\n      }\n    };\n\n    // Set up provider event listeners\n    if (provider) {\n      if (provider.onAccountChange) {\n        provider.onAccountChange(handleAccountChange);\n      }\n      if (provider.onNetworkChange) {\n        provider.onNetworkChange(handleNetworkChange);\n      }\n    }\n\n    // Global event listeners for wallet changes\n    window.addEventListener('aptos:accountChanged', event => {\n      if (event.detail) {\n        handleAccountChange(event.detail);\n      }\n    });\n    window.addEventListener('aptos:networkChanged', event => {\n      if (event.detail) {\n        handleNetworkChange(event.detail.network);\n      }\n    });\n    window.addEventListener('aptos:disconnected', () => {\n      setWallet(null);\n      setWalletAddress('');\n      setIsConnected(false);\n      localStorage.removeItem('connectedWallet');\n      localStorage.removeItem('walletProvider');\n      showNotification({\n        type: 'info',\n        title: 'Wallet Disconnected',\n        message: 'Your wallet has been disconnected'\n      });\n    });\n    return () => {\n      // Clean up event listeners\n      window.removeEventListener('aptos:accountChanged', handleAccountChange);\n      window.removeEventListener('aptos:networkChanged', handleNetworkChange);\n      window.removeEventListener('aptos:disconnected', () => {});\n    };\n  }, [provider, walletAddress, showNotification]);\n\n  /**\r\n   * Utility function to get wallet error message\r\n   */\n  const getWalletErrorMessage = error => {\n    const errorMessage = error.message || String(error);\n    if (errorMessage.includes('not installed') || errorMessage.includes('not detected')) {\n      return 'Wallet extension not installed. Please install a compatible wallet.';\n    }\n    if (errorMessage.includes('user rejected') || errorMessage.includes('canceled')) {\n      return 'Connection request was rejected. Please approve the connection in your wallet.';\n    }\n    if (errorMessage.includes('timeout')) {\n      return 'Connection timed out. Please try again.';\n    }\n    return `Wallet connection failed: ${errorMessage}`;\n  };\n\n  /**\r\n   * Utility function to get network label\r\n   */\n  const getNetworkLabel = network => {\n    if (!network) return 'Unknown';\n    if (typeof network === 'string') {\n      return network.charAt(0).toUpperCase() + network.slice(1);\n    }\n    if (network === 1 || network === '1') return 'Mainnet';\n    if (network === 2 || network === '2') return 'Testnet';\n    if (network === 'mainnet') return 'Mainnet';\n    if (network === 'testnet') return 'Testnet';\n    return 'Unknown';\n  };\n  return {\n    isConnected,\n    isConnecting,\n    wallet,\n    walletAddress,\n    provider,\n    connectionError,\n    networkName,\n    connect,\n    disconnect,\n    signAndSubmitTransaction,\n    checkTransactionStatus\n  };\n};\n\n// src/hooks/useWallet.js - Add named export\n_s(useWallet, \"x0l6YHFhqdmCnBdUuIYUeb4QnFo=\");\nexport const useWalletContext = (...args) => {\n  _s2();\n  return useWallet(...args);\n};\n_s2(useWalletContext, \"rAHBCw73NmsKePpUOZNtpGCdHKc=\", false, function () {\n  return [useWallet];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useContext","NotificationContext","useWallet","_s","isConnected","setIsConnected","wallet","setWallet","walletAddress","setWalletAddress","isConnecting","setIsConnecting","connectionError","setConnectionError","provider","setProvider","chainId","setChainId","networkName","setNetworkName","showNotification","connect","providerName","_response$account","providers","window","aptos","push","name","petra","martian","pontem","rise","fewcha","length","Error","targetProvider","find","p","toLowerCase","walletProvider","response","address","account","network","networkId","getNetwork","networkError","console","warn","networkLabel","getNetworkLabel","localStorage","setItem","type","title","message","error","errorMessage","getWalletErrorMessage","disconnect","removeItem","signAndSubmitTransaction","transaction","_result$transaction","result","hash","txHash","success","_error$message","_error$message2","_error$message3","includes","checkTransactionStatus","getTransaction","txInfo","confirmed","status","vmStatus","vm_status","fetch","ok","data","json","gasUsed","gas_used","timestamp","version","restoreSavedConnection","savedAddress","getItem","savedProvider","handleAccountChange","handleNetworkChange","onAccountChange","onNetworkChange","addEventListener","event","detail","removeEventListener","String","charAt","toUpperCase","slice","useWalletContext","args","_s2"],"sources":["/home/ck/compoundefi/client/src/hooks/useWallet.js"],"sourcesContent":["// useWallet.js - Hook for wallet connectivity and management\r\nimport { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { NotificationContext } from '../context/NotificationContext';\r\n\r\n/**\r\n * Hook for managing wallet connections and operations on Aptos\r\n */\r\nexport const useWallet = () => {\r\n  // State for wallet connection\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [wallet, setWallet] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [networkName, setNetworkName] = useState('');\r\n\r\n  // Get notification context for showing status\r\n  const { showNotification } = useContext(NotificationContext);\r\n\r\n  /**\r\n   * Connect to wallet\r\n   * Supports multiple wallet providers (Petra, Martian, etc.)\r\n   */\r\n  const connect = useCallback(async (providerName = null) => {\r\n    try {\r\n      setIsConnecting(true);\r\n      setConnectionError(null);\r\n\r\n      // Check for available wallet providers\r\n      const providers = [];\r\n      if (window.aptos) providers.push({ name: 'aptos', provider: window.aptos });\r\n      if (window.petra) providers.push({ name: 'petra', provider: window.petra });\r\n      if (window.martian) providers.push({ name: 'martian', provider: window.martian });\r\n      if (window.pontem) providers.push({ name: 'pontem', provider: window.pontem });\r\n      if (window.rise) providers.push({ name: 'rise', provider: window.rise });\r\n      if (window.fewcha) providers.push({ name: 'fewcha', provider: window.fewcha });\r\n\r\n      if (providers.length === 0) {\r\n        throw new Error('No wallet providers found. Please install a compatible Aptos wallet extension.');\r\n      }\r\n\r\n      // Find specified provider or use first available\r\n      let targetProvider;\r\n      if (providerName) {\r\n        targetProvider = providers.find(p => p.name.toLowerCase() === providerName.toLowerCase());\r\n        if (!targetProvider) {\r\n          throw new Error(`${providerName} wallet not found. Please install the extension.`);\r\n        }\r\n      } else {\r\n        targetProvider = providers[0];\r\n      }\r\n\r\n      // Connect to wallet\r\n      const walletProvider = targetProvider.provider;\r\n      const response = await walletProvider.connect();\r\n      \r\n      // Extract wallet address from response (handle different formats)\r\n      const address = typeof response === 'string' \r\n        ? response \r\n        : response.address || (response.account?.address) || \r\n          (typeof response.account === 'function' ? (await response.account()).address : null);\r\n\r\n      if (!address) {\r\n        throw new Error('Failed to retrieve wallet address');\r\n      }\r\n\r\n      // Get network info if available\r\n      let network = null;\r\n      let networkId = null;\r\n      try {\r\n        if (walletProvider.network) {\r\n          network = await walletProvider.network();\r\n        } else if (walletProvider.getNetwork) {\r\n          network = await walletProvider.getNetwork();\r\n        } else if (walletProvider.chainId) {\r\n          networkId = await walletProvider.chainId();\r\n        }\r\n      } catch (networkError) {\r\n        console.warn('Failed to fetch network information:', networkError);\r\n      }\r\n\r\n      const networkLabel = getNetworkLabel(network || networkId);\r\n      \r\n      // Update wallet state\r\n      setWallet(response);\r\n      setWalletAddress(address);\r\n      setIsConnected(true);\r\n      setProvider(walletProvider);\r\n      setNetworkName(networkLabel);\r\n      \r\n      // Store wallet address in local storage for persistence\r\n      localStorage.setItem('connectedWallet', address);\r\n      localStorage.setItem('walletProvider', targetProvider.name);\r\n      \r\n      showNotification({\r\n        type: 'success',\r\n        title: 'Wallet Connected',\r\n        message: `Successfully connected to ${targetProvider.name} wallet`\r\n      });\r\n      \r\n      return { address, provider: walletProvider };\r\n    } catch (error) {\r\n      console.error('Wallet connection error:', error);\r\n      const errorMessage = getWalletErrorMessage(error);\r\n      setConnectionError(errorMessage);\r\n      \r\n      showNotification({\r\n        type: 'error',\r\n        title: 'Connection Failed',\r\n        message: errorMessage\r\n      });\r\n      \r\n      return null;\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  }, [showNotification]);\r\n\r\n  /**\r\n   * Disconnect from the wallet\r\n   */\r\n  const disconnect = useCallback(async () => {\r\n    try {\r\n      if (provider && provider.disconnect) {\r\n        await provider.disconnect();\r\n      }\r\n      \r\n      // Clear wallet state\r\n      setWallet(null);\r\n      setWalletAddress('');\r\n      setIsConnected(false);\r\n      setProvider(null);\r\n      \r\n      // Remove stored wallet info\r\n      localStorage.removeItem('connectedWallet');\r\n      localStorage.removeItem('walletProvider');\r\n      \r\n      showNotification({\r\n        type: 'info',\r\n        title: 'Wallet Disconnected',\r\n        message: 'Successfully disconnected wallet'\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Wallet disconnection error:', error);\r\n      \r\n      showNotification({\r\n        type: 'error',\r\n        title: 'Disconnection Failed',\r\n        message: `Failed to disconnect wallet: ${error.message}`\r\n      });\r\n      \r\n      return false;\r\n    }\r\n  }, [provider, showNotification]);\r\n\r\n  /**\r\n   * Sign and submit a transaction\r\n   */\r\n  const signAndSubmitTransaction = useCallback(async (transaction) => {\r\n    if (!isConnected || !provider) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n    \r\n    try {\r\n      showNotification({\r\n        type: 'info',\r\n        title: 'Transaction Initiated',\r\n        message: 'Please confirm the transaction in your wallet'\r\n      });\r\n      \r\n      const result = await provider.signAndSubmitTransaction(transaction);\r\n      \r\n      // Extract transaction hash from result (handles different provider formats)\r\n      const hash = result.hash || result.txHash || result.transaction?.hash;\r\n      \r\n      if (!hash) {\r\n        throw new Error('Transaction submitted but no transaction hash returned');\r\n      }\r\n      \r\n      showNotification({\r\n        type: 'success',\r\n        title: 'Transaction Submitted',\r\n        message: `Transaction submitted to the blockchain`\r\n      });\r\n      \r\n      return { success: true, hash, result };\r\n    } catch (error) {\r\n      console.error('Transaction error:', error);\r\n      \r\n      // Check if user rejected transaction\r\n      if (error.message?.includes('reject') || error.message?.includes('cancel') || error.message?.includes('denied')) {\r\n        showNotification({\r\n          type: 'warning',\r\n          title: 'Transaction Cancelled',\r\n          message: 'You cancelled the transaction'\r\n        });\r\n        \r\n        return { success: false, error: 'User cancelled transaction' };\r\n      }\r\n      \r\n      showNotification({\r\n        type: 'error',\r\n        title: 'Transaction Failed',\r\n        message: `Error: ${error.message}`\r\n      });\r\n      \r\n      return { success: false, error: error.message };\r\n    }\r\n  }, [isConnected, provider, showNotification]);\r\n\r\n  /**\r\n   * Check transaction status\r\n   */\r\n  const checkTransactionStatus = useCallback(async (txHash) => {\r\n    try {\r\n      // First try using provider's built-in method if available\r\n      if (provider && provider.getTransaction) {\r\n        const txInfo = await provider.getTransaction(txHash);\r\n        return {\r\n          confirmed: txInfo?.success === true,\r\n          status: txInfo?.success ? 'confirmed' : 'failed',\r\n          vmStatus: txInfo?.vm_status,\r\n          hash: txHash,\r\n          success: txInfo?.success\r\n        };\r\n      }\r\n      \r\n      // Otherwise, use Aptos Explorer API\r\n      const response = await fetch(`https://fullnode.mainnet.aptoslabs.com/v1/transactions/by_hash/${txHash}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Explorer API returned ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      return {\r\n        confirmed: data.success === true,\r\n        status: data.success ? 'confirmed' : 'failed',\r\n        vmStatus: data.vm_status,\r\n        gasUsed: data.gas_used,\r\n        timestamp: data.timestamp,\r\n        version: data.version,\r\n        hash: txHash,\r\n        success: data.success\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking transaction status:', error);\r\n      return {\r\n        confirmed: false,\r\n        status: 'pending',\r\n        hash: txHash,\r\n        error: error.message\r\n      };\r\n    }\r\n  }, [provider]);\r\n\r\n  /**\r\n   * Restore wallet connection on component mount if available\r\n   */\r\n  useEffect(() => {\r\n    const restoreSavedConnection = async () => {\r\n      const savedAddress = localStorage.getItem('connectedWallet');\r\n      const savedProvider = localStorage.getItem('walletProvider');\r\n      \r\n      if (savedAddress && !isConnected && !isConnecting) {\r\n        try {\r\n          await connect(savedProvider);\r\n        } catch (error) {\r\n          console.error('Failed to restore wallet connection:', error);\r\n          localStorage.removeItem('connectedWallet');\r\n          localStorage.removeItem('walletProvider');\r\n        }\r\n      }\r\n    };\r\n    \r\n    restoreSavedConnection();\r\n  }, [connect, isConnected, isConnecting]);\r\n\r\n  /**\r\n   * Set up wallet event listeners\r\n   */\r\n  useEffect(() => {\r\n    const handleAccountChange = (account) => {\r\n      if (account) {\r\n        const address = account.address || (typeof account === 'object' ? account.address : account);\r\n        if (address && address !== walletAddress) {\r\n          setWalletAddress(address);\r\n          localStorage.setItem('connectedWallet', address);\r\n          \r\n          showNotification({\r\n            type: 'info',\r\n            title: 'Account Changed',\r\n            message: 'Your wallet account has changed'\r\n          });\r\n        }\r\n      } else {\r\n        // Account disconnected\r\n        setWallet(null);\r\n        setWalletAddress('');\r\n        setIsConnected(false);\r\n        localStorage.removeItem('connectedWallet');\r\n        localStorage.removeItem('walletProvider');\r\n      }\r\n    };\r\n    \r\n    const handleNetworkChange = (network) => {\r\n      if (network) {\r\n        const networkLabel = getNetworkLabel(network);\r\n        setNetworkName(networkLabel);\r\n        \r\n        showNotification({\r\n          type: 'info',\r\n          title: 'Network Changed',\r\n          message: `Switched to ${networkLabel}`\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Set up provider event listeners\r\n    if (provider) {\r\n      if (provider.onAccountChange) {\r\n        provider.onAccountChange(handleAccountChange);\r\n      }\r\n      \r\n      if (provider.onNetworkChange) {\r\n        provider.onNetworkChange(handleNetworkChange);\r\n      }\r\n    }\r\n    \r\n    // Global event listeners for wallet changes\r\n    window.addEventListener('aptos:accountChanged', (event) => {\r\n      if (event.detail) {\r\n        handleAccountChange(event.detail);\r\n      }\r\n    });\r\n    \r\n    window.addEventListener('aptos:networkChanged', (event) => {\r\n      if (event.detail) {\r\n        handleNetworkChange(event.detail.network);\r\n      }\r\n    });\r\n    \r\n    window.addEventListener('aptos:disconnected', () => {\r\n      setWallet(null);\r\n      setWalletAddress('');\r\n      setIsConnected(false);\r\n      localStorage.removeItem('connectedWallet');\r\n      localStorage.removeItem('walletProvider');\r\n      \r\n      showNotification({\r\n        type: 'info',\r\n        title: 'Wallet Disconnected',\r\n        message: 'Your wallet has been disconnected'\r\n      });\r\n    });\r\n    \r\n    return () => {\r\n      // Clean up event listeners\r\n      window.removeEventListener('aptos:accountChanged', handleAccountChange);\r\n      window.removeEventListener('aptos:networkChanged', handleNetworkChange);\r\n      window.removeEventListener('aptos:disconnected', () => {});\r\n    };\r\n  }, [provider, walletAddress, showNotification]);\r\n\r\n  /**\r\n   * Utility function to get wallet error message\r\n   */\r\n  const getWalletErrorMessage = (error) => {\r\n    const errorMessage = error.message || String(error);\r\n    \r\n    if (errorMessage.includes('not installed') || errorMessage.includes('not detected')) {\r\n      return 'Wallet extension not installed. Please install a compatible wallet.';\r\n    }\r\n    \r\n    if (errorMessage.includes('user rejected') || errorMessage.includes('canceled')) {\r\n      return 'Connection request was rejected. Please approve the connection in your wallet.';\r\n    }\r\n    \r\n    if (errorMessage.includes('timeout')) {\r\n      return 'Connection timed out. Please try again.';\r\n    }\r\n    \r\n    return `Wallet connection failed: ${errorMessage}`;\r\n  };\r\n\r\n  /**\r\n   * Utility function to get network label\r\n   */\r\n  const getNetworkLabel = (network) => {\r\n    if (!network) return 'Unknown';\r\n    \r\n    if (typeof network === 'string') {\r\n      return network.charAt(0).toUpperCase() + network.slice(1);\r\n    }\r\n    \r\n    if (network === 1 || network === '1') return 'Mainnet';\r\n    if (network === 2 || network === '2') return 'Testnet';\r\n    if (network === 'mainnet') return 'Mainnet';\r\n    if (network === 'testnet') return 'Testnet';\r\n    \r\n    return 'Unknown';\r\n  };\r\n\r\n  return {\r\n    isConnected,\r\n    isConnecting,\r\n    wallet,\r\n    walletAddress,\r\n    provider,\r\n    connectionError,\r\n    networkName,\r\n    connect,\r\n    disconnect,\r\n    signAndSubmitTransaction,\r\n    checkTransactionStatus\r\n  };\r\n};\r\n\r\n// src/hooks/useWallet.js - Add named export\r\nexport const useWalletContext = (...args) => {\r\n  return useWallet(...args);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
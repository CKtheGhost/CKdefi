{"ast":null,"code":"// src/useWallet.tsx\nimport { WalletReadyState, NetworkName, isInAppBrowser, isRedirectable, isMobile } from \"@aptos-labs/wallet-adapter-core\";\nimport { createContext, useContext } from \"react\";\nvar DEFAULT_COUNTEXT = {\n  connected: false\n};\nvar WalletContext = createContext(DEFAULT_COUNTEXT);\nfunction useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n\n// src/WalletProvider.tsx\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { WalletCore } from \"@aptos-labs/wallet-adapter-core\";\nimport { jsx } from \"react/jsx-runtime\";\nvar initialState = {\n  connected: false,\n  account: null,\n  network: null,\n  wallet: null\n};\nvar AptosWalletAdapterProvider = ({\n  children,\n  plugins,\n  autoConnect = false,\n  onError\n}) => {\n  const [{\n    connected,\n    account,\n    network,\n    wallet\n  }, setState] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(true);\n  const walletCore = useMemo(() => new WalletCore(plugins), []);\n  const [wallets, setWallets] = useState(walletCore.wallets);\n  const connect = async walletName => {\n    try {\n      setIsLoading(true);\n      await walletCore.connect(walletName);\n    } catch (error) {\n      console.log(\"connect error\", error);\n      if (onError) onError(error);else throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const disconnect = async () => {\n    try {\n      await walletCore.disconnect();\n    } catch (e) {\n      console.log(\"disconnect error\", e);\n      if (onError) onError(e);\n    }\n  };\n  const signAndSubmitTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signAndSubmitTransaction(transaction, options);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n    }\n  };\n  const signAndSubmitBCSTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signAndSubmitBCSTransaction(transaction, options);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signTransaction(transaction, options);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n    }\n  };\n  const signMessage = async message => {\n    try {\n      return await walletCore.signMessage(message);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n      return null;\n    }\n  };\n  const signMessageAndVerify = async message => {\n    try {\n      return await walletCore.signMessageAndVerify(message);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n      return false;\n    }\n  };\n  const signMultiAgentTransaction = async transaction => {\n    try {\n      return await walletCore.signMultiAgentTransaction(transaction);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n      return false;\n    }\n  };\n  const submitTransaction = async transaction => {\n    try {\n      return await walletCore.submitTransaction(transaction);\n    } catch (error) {\n      if (onError) onError(error);else throw error;\n      return false;\n    }\n  };\n  useEffect(() => {\n    if (autoConnect) {\n      if (localStorage.getItem(\"AptosWalletName\")) {\n        connect(localStorage.getItem(\"AptosWalletName\"));\n      } else {\n        setIsLoading(false);\n      }\n    }\n  }, wallets);\n  useEffect(() => {\n    if (connected) {\n      walletCore.onAccountChange();\n      walletCore.onNetworkChange();\n    }\n  }, [...wallets, connected]);\n  const handleConnect = () => {\n    setState(state => {\n      return {\n        ...state,\n        connected: true,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: walletCore.wallet\n      };\n    });\n  };\n  const handleDisconnect = () => {\n    if (!connected) return;\n    setState(state => {\n      return {\n        ...state,\n        connected: false,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: null\n      };\n    });\n  };\n  const handleAccountChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState(state => {\n      return {\n        ...state,\n        account: walletCore.account\n      };\n    });\n  }, [connected]);\n  const handleNetworkChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState(state => {\n      return {\n        ...state,\n        network: walletCore.network\n      };\n    });\n  }, [connected]);\n  const handleReadyStateChange = wallet2 => {\n    setWallets(wallets2 => [...wallets2]);\n  };\n  useEffect(() => {\n    walletCore.on(\"connect\", handleConnect);\n    walletCore.on(\"disconnect\", handleDisconnect);\n    walletCore.on(\"accountChange\", handleAccountChange);\n    walletCore.on(\"networkChange\", handleNetworkChange);\n    walletCore.on(\"readyStateChange\", handleReadyStateChange);\n    return () => {\n      walletCore.off(\"connect\", handleConnect);\n      walletCore.off(\"disconnect\", handleDisconnect);\n      walletCore.off(\"accountChange\", handleAccountChange);\n      walletCore.off(\"networkChange\", handleNetworkChange);\n      walletCore.off(\"readyStateChange\", handleReadyStateChange);\n    };\n  }, [...wallets, connected]);\n  return /* @__PURE__ */jsx(WalletContext.Provider, {\n    value: {\n      connect,\n      account,\n      network,\n      connected,\n      disconnect,\n      wallet,\n      wallets,\n      signAndSubmitTransaction,\n      signAndSubmitBCSTransaction,\n      signTransaction,\n      signMessage,\n      signMessageAndVerify,\n      signMultiAgentTransaction,\n      submitTransaction,\n      isLoading\n    },\n    children\n  });\n};\nexport { AptosWalletAdapterProvider, NetworkName, WalletReadyState, isInAppBrowser, isMobile, isRedirectable, useWallet };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
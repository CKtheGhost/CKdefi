{"ast":null,"code":"var _jsxFileName = \"/home/ck/compoundefi/client/src/context/TransactionContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Nexus-level TransactionContext.jsx\n// Preserves multi-transaction logic, while adding improved error handling,\n// logging, and better handling of transaction states.\n\nimport React, { createContext, useState, useCallback, useContext } from 'react';\nimport { useWalletContext } from './WalletContext';\nimport { useNotification } from './NotificationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TRANSACTION_STATUS = {\n  PENDING: 'pending',\n  CONFIRMING: 'confirming',\n  CONFIRMED: 'confirmed',\n  FAILED: 'failed',\n  REJECTED: 'rejected'\n};\nexport const TRANSACTION_TYPES = {\n  STAKE: 'stake',\n  UNSTAKE: 'unstake',\n  SWAP: 'swap',\n  DEPOSIT: 'deposit',\n  WITHDRAW: 'withdraw',\n  CLAIM: 'claim',\n  REBALANCE: 'rebalance',\n  APPROVE: 'approve',\n  TRANSFER: 'transfer',\n  OTHER: 'other'\n};\nexport const TransactionContext = /*#__PURE__*/createContext(null);\nexport const TransactionProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    connected,\n    walletAddress,\n    executeTransaction: baseExecuteTx\n  } = useWalletContext();\n  const {\n    showNotification\n  } = useNotification();\n\n  // Lists or store for transactions\n  const [pendingTransactions, setPendingTransactions] = useState([]);\n  const [currentTransaction, setCurrentTransaction] = useState(null);\n  const [transactionLoading, setTransactionLoading] = useState(false);\n  const [transactionError, setTransactionError] = useState(null);\n\n  // Store transactions by ID\n  const [transactionStore, setTransactionStore] = useState({});\n\n  /**\r\n   * Enhanced function to track and store each transaction with advanced logging.\r\n   */\n  const executeTransactionWithTracking = useCallback(async txData => {\n    if (!connected) {\n      showNotification({\n        type: 'error',\n        message: 'No wallet connected. Please connect your wallet first.'\n      });\n      return {\n        success: false,\n        error: 'Wallet not connected'\n      };\n    }\n    try {\n      var _result$result;\n      setTransactionLoading(true);\n      setTransactionError(null);\n\n      // Create transaction metadata\n      const txId = `tx-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;\n      const newTx = {\n        id: txId,\n        type: txData.type || TRANSACTION_TYPES.OTHER,\n        description: txData.description || 'Transaction',\n        amount: txData.amount,\n        token: txData.token,\n        status: TRANSACTION_STATUS.PENDING,\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n        payload: txData.payload,\n        protocol: txData.protocol,\n        walletAddress\n      };\n      setPendingTransactions(prev => [...prev, newTx]);\n      setCurrentTransaction(newTx);\n      setTransactionStore(prev => ({\n        ...prev,\n        [txId]: newTx\n      }));\n      showNotification({\n        type: 'info',\n        message: `Preparing transaction: ${newTx.description}`\n      });\n\n      // Execute transaction via base function from wallet context\n      const result = await baseExecuteTx(txData.payload);\n      const updatedTx = {\n        ...newTx,\n        status: result.success ? TRANSACTION_STATUS.CONFIRMED : TRANSACTION_STATUS.FAILED,\n        hash: (_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.hash,\n        error: result.error,\n        updatedAt: Date.now(),\n        result: result.result\n      };\n\n      // Update lists\n      setPendingTransactions(prev => prev.map(tx => tx.id === txId ? updatedTx : tx));\n      setTransactionStore(prev => ({\n        ...prev,\n        [txId]: updatedTx\n      }));\n      setCurrentTransaction(updatedTx);\n      if (result.success) {\n        showNotification({\n          type: 'success',\n          message: `Transaction complete: ${updatedTx.description}`\n        });\n      } else {\n        showNotification({\n          type: 'error',\n          message: `Transaction failed: ${result.error || 'Unknown error'}`\n        });\n      }\n      return {\n        ...result,\n        transaction: updatedTx\n      };\n    } catch (err) {\n      console.error('[TransactionProvider] Execution error:', err);\n      setTransactionError(err.message || 'Transaction failed');\n      showNotification({\n        type: 'error',\n        message: `Transaction error: ${err.message || 'Unknown error'}`\n      });\n      return {\n        success: false,\n        error: err.message || 'Transaction failed'\n      };\n    } finally {\n      setTransactionLoading(false);\n    }\n  }, [connected, walletAddress, showNotification, baseExecuteTx]);\n  const getTransaction = useCallback(id => {\n    return transactionStore[id] || null;\n  }, [transactionStore]);\n  const isTransactionPending = useCallback(id => {\n    const tx = transactionStore[id];\n    return !!(tx && tx.status === TRANSACTION_STATUS.PENDING);\n  }, [transactionStore]);\n  const value = {\n    pendingTransactions,\n    currentTransaction,\n    transactionLoading,\n    transactionError,\n    executeTransactionWithTracking,\n    getTransaction,\n    isTransactionPending\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 10\n  }, this);\n};\n_s(TransactionProvider, \"TUn9zzgRnEQc2DRfxJawZ7CMvMA=\", false, function () {\n  return [useWalletContext, useNotification];\n});\n_c = TransactionProvider;\nexport const useTransaction = () => {\n  _s2();\n  const ctx = useContext(TransactionContext);\n  if (!ctx) {\n    throw new Error('[useTransaction] must be used within TransactionProvider.');\n  }\n  return ctx;\n};\n_s2(useTransaction, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","useContext","useWalletContext","useNotification","jsxDEV","_jsxDEV","TRANSACTION_STATUS","PENDING","CONFIRMING","CONFIRMED","FAILED","REJECTED","TRANSACTION_TYPES","STAKE","UNSTAKE","SWAP","DEPOSIT","WITHDRAW","CLAIM","REBALANCE","APPROVE","TRANSFER","OTHER","TransactionContext","TransactionProvider","children","_s","connected","walletAddress","executeTransaction","baseExecuteTx","showNotification","pendingTransactions","setPendingTransactions","currentTransaction","setCurrentTransaction","transactionLoading","setTransactionLoading","transactionError","setTransactionError","transactionStore","setTransactionStore","executeTransactionWithTracking","txData","type","message","success","error","_result$result","txId","Date","now","Math","random","toString","substr","newTx","id","description","amount","token","status","createdAt","updatedAt","payload","protocol","prev","result","updatedTx","hash","map","tx","transaction","err","console","getTransaction","isTransactionPending","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransaction","_s2","ctx","Error","$RefreshReg$"],"sources":["/home/ck/compoundefi/client/src/context/TransactionContext.jsx"],"sourcesContent":["// Nexus-level TransactionContext.jsx\r\n// Preserves multi-transaction logic, while adding improved error handling,\r\n// logging, and better handling of transaction states.\r\n\r\nimport React, { createContext, useState, useCallback, useContext } from 'react';\r\nimport { useWalletContext } from './WalletContext';\r\nimport { useNotification } from './NotificationContext';\r\n\r\nexport const TRANSACTION_STATUS = {\r\n  PENDING: 'pending',\r\n  CONFIRMING: 'confirming',\r\n  CONFIRMED: 'confirmed',\r\n  FAILED: 'failed',\r\n  REJECTED: 'rejected',\r\n};\r\n\r\nexport const TRANSACTION_TYPES = {\r\n  STAKE: 'stake',\r\n  UNSTAKE: 'unstake',\r\n  SWAP: 'swap',\r\n  DEPOSIT: 'deposit',\r\n  WITHDRAW: 'withdraw',\r\n  CLAIM: 'claim',\r\n  REBALANCE: 'rebalance',\r\n  APPROVE: 'approve',\r\n  TRANSFER: 'transfer',\r\n  OTHER: 'other',\r\n};\r\n\r\nexport const TransactionContext = createContext(null);\r\n\r\nexport const TransactionProvider = ({ children }) => {\r\n  const { connected, walletAddress, executeTransaction: baseExecuteTx } = useWalletContext();\r\n  const { showNotification } = useNotification();\r\n\r\n  // Lists or store for transactions\r\n  const [pendingTransactions, setPendingTransactions] = useState([]);\r\n  const [currentTransaction, setCurrentTransaction] = useState(null);\r\n  const [transactionLoading, setTransactionLoading] = useState(false);\r\n  const [transactionError, setTransactionError] = useState(null);\r\n\r\n  // Store transactions by ID\r\n  const [transactionStore, setTransactionStore] = useState({});\r\n\r\n  /**\r\n   * Enhanced function to track and store each transaction with advanced logging.\r\n   */\r\n  const executeTransactionWithTracking = useCallback(\r\n    async (txData) => {\r\n      if (!connected) {\r\n        showNotification({\r\n          type: 'error',\r\n          message: 'No wallet connected. Please connect your wallet first.',\r\n        });\r\n        return { success: false, error: 'Wallet not connected' };\r\n      }\r\n      try {\r\n        setTransactionLoading(true);\r\n        setTransactionError(null);\r\n\r\n        // Create transaction metadata\r\n        const txId = `tx-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;\r\n        const newTx = {\r\n          id: txId,\r\n          type: txData.type || TRANSACTION_TYPES.OTHER,\r\n          description: txData.description || 'Transaction',\r\n          amount: txData.amount,\r\n          token: txData.token,\r\n          status: TRANSACTION_STATUS.PENDING,\r\n          createdAt: Date.now(),\r\n          updatedAt: Date.now(),\r\n          payload: txData.payload,\r\n          protocol: txData.protocol,\r\n          walletAddress,\r\n        };\r\n\r\n        setPendingTransactions((prev) => [...prev, newTx]);\r\n        setCurrentTransaction(newTx);\r\n        setTransactionStore((prev) => ({ ...prev, [txId]: newTx }));\r\n\r\n        showNotification({\r\n          type: 'info',\r\n          message: `Preparing transaction: ${newTx.description}`,\r\n        });\r\n\r\n        // Execute transaction via base function from wallet context\r\n        const result = await baseExecuteTx(txData.payload);\r\n\r\n        const updatedTx = {\r\n          ...newTx,\r\n          status: result.success ? TRANSACTION_STATUS.CONFIRMED : TRANSACTION_STATUS.FAILED,\r\n          hash: result.result?.hash,\r\n          error: result.error,\r\n          updatedAt: Date.now(),\r\n          result: result.result,\r\n        };\r\n\r\n        // Update lists\r\n        setPendingTransactions((prev) =>\r\n          prev.map((tx) => (tx.id === txId ? updatedTx : tx))\r\n        );\r\n        setTransactionStore((prev) => ({ ...prev, [txId]: updatedTx }));\r\n        setCurrentTransaction(updatedTx);\r\n\r\n        if (result.success) {\r\n          showNotification({\r\n            type: 'success',\r\n            message: `Transaction complete: ${updatedTx.description}`,\r\n          });\r\n        } else {\r\n          showNotification({\r\n            type: 'error',\r\n            message: `Transaction failed: ${result.error || 'Unknown error'}`,\r\n          });\r\n        }\r\n\r\n        return { ...result, transaction: updatedTx };\r\n      } catch (err) {\r\n        console.error('[TransactionProvider] Execution error:', err);\r\n        setTransactionError(err.message || 'Transaction failed');\r\n        showNotification({\r\n          type: 'error',\r\n          message: `Transaction error: ${err.message || 'Unknown error'}`,\r\n        });\r\n        return { success: false, error: err.message || 'Transaction failed' };\r\n      } finally {\r\n        setTransactionLoading(false);\r\n      }\r\n    },\r\n    [connected, walletAddress, showNotification, baseExecuteTx]\r\n  );\r\n\r\n  const getTransaction = useCallback((id) => {\r\n    return transactionStore[id] || null;\r\n  }, [transactionStore]);\r\n\r\n  const isTransactionPending = useCallback((id) => {\r\n    const tx = transactionStore[id];\r\n    return !!(tx && tx.status === TRANSACTION_STATUS.PENDING);\r\n  }, [transactionStore]);\r\n\r\n  const value = {\r\n    pendingTransactions,\r\n    currentTransaction,\r\n    transactionLoading,\r\n    transactionError,\r\n    executeTransactionWithTracking,\r\n    getTransaction,\r\n    isTransactionPending,\r\n  };\r\n\r\n  return <TransactionContext.Provider value={value}>{children}</TransactionContext.Provider>;\r\n};\r\n\r\nexport const useTransaction = () => {\r\n  const ctx = useContext(TransactionContext);\r\n  if (!ctx) {\r\n    throw new Error('[useTransaction] must be used within TransactionProvider.');\r\n  }\r\n  return ctx;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
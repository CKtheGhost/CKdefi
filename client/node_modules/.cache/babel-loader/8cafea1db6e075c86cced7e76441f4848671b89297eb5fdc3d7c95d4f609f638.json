{"ast":null,"code":"// src/WalletCore.ts\nimport { HexString } from \"aptos\";\nimport { AptosConfig, generateTransactionPayload } from \"@aptos-labs/ts-sdk\";\nimport EventEmitter from \"eventemitter3\";\nimport nacl from \"tweetnacl\";\nimport { Buffer } from \"buffer\";\n\n// src/constants.ts\nvar WalletReadyState = /* @__PURE__ */(WalletReadyState2 => {\n  WalletReadyState2[\"Installed\"] = \"Installed\";\n  WalletReadyState2[\"NotDetected\"] = \"NotDetected\";\n  WalletReadyState2[\"Loadable\"] = \"Loadable\";\n  WalletReadyState2[\"Unsupported\"] = \"Unsupported\";\n  return WalletReadyState2;\n})(WalletReadyState || {});\nvar NetworkName = /* @__PURE__ */(NetworkName2 => {\n  NetworkName2[\"Mainnet\"] = \"mainnet\";\n  NetworkName2[\"Testnet\"] = \"testnet\";\n  NetworkName2[\"Devnet\"] = \"devnet\";\n  return NetworkName2;\n})(NetworkName || {});\n\n// src/error/index.ts\nvar WalletError = class extends Error {\n  constructor(message, error) {\n    super(message);\n    this.error = error;\n  }\n};\nvar WalletNotSelectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSelectedError\";\n  }\n};\nvar WalletNotReadyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotReadyError\";\n  }\n};\nvar WalletConnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletConnectionError\";\n  }\n};\nvar WalletDisconnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletDisconnectionError\";\n  }\n};\nvar WalletAccountError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountError\";\n  }\n};\nvar WalletGetNetworkError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletGetNetworkError\";\n  }\n};\nvar WalletAccountChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountChangeError\";\n  }\n};\nvar WalletNetworkChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNetworkChangeError\";\n  }\n};\nvar WalletNotConnectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotConnectedError\";\n  }\n};\nvar WalletSignMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageError\";\n  }\n};\nvar WalletSignMessageAndVerifyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageAndVerifyError\";\n  }\n};\nvar WalletSignAndSubmitMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignAndSubmitMessageError\";\n  }\n};\nvar WalletSignTransactionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignTransactionError\";\n  }\n};\nvar WalletNotSupportedMethod = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSupportedMethod\";\n  }\n};\n\n// src/utils/scopePollingDetectionStrategy.ts\nfunction scopePollingDetectionStrategy(detect) {\n  if (typeof window === \"undefined\" || typeof document === \"undefined\") return;\n  const disposers = [];\n  function detectAndDispose() {\n    const detected = detect();\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  }\n  const interval = setInterval(detectAndDispose, 1e3);\n  disposers.push(() => clearInterval(interval));\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => document.removeEventListener(\"DOMContentLoaded\", detectAndDispose));\n  }\n  if (document.readyState !== \"complete\") {\n    window.addEventListener(\"load\", detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => window.removeEventListener(\"load\", detectAndDispose));\n  }\n  detectAndDispose();\n}\n\n// src/utils/localStorage.ts\nvar LOCAL_STORAGE_ITEM_KEY = \"AptosWalletName\";\nfunction setLocalStorage(walletName) {\n  localStorage.setItem(LOCAL_STORAGE_ITEM_KEY, walletName);\n}\nfunction removeLocalStorage() {\n  localStorage.removeItem(LOCAL_STORAGE_ITEM_KEY);\n}\nfunction getLocalStorage() {\n  localStorage.getItem(LOCAL_STORAGE_ITEM_KEY);\n}\n\n// src/utils/helpers.ts\nfunction isMobile() {\n  return /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/i.test(navigator.userAgent);\n}\nfunction isInAppBrowser() {\n  const isIphone = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);\n  const isAndroid = /(Android).*Version\\/[\\d.]+.*Chrome\\/[^\\s]+ Mobile/i.test(navigator.userAgent);\n  return isIphone || isAndroid;\n}\nfunction isRedirectable() {\n  if (typeof navigator === \"undefined\" || !navigator) return false;\n  return isMobile() && !isInAppBrowser();\n}\n\n// src/ans.ts\nvar ChainIdToAnsContractAddressMap = {\n  \"1\": \"mainnet\",\n  \"2\": \"testnet\"\n};\nvar getNameByAddress = async (chainId, address) => {\n  try {\n    if (!ChainIdToAnsContractAddressMap[chainId]) return null;\n    const response = await fetch(`https://www.aptosnames.com/api/${ChainIdToAnsContractAddressMap[chainId]}/v1/name/${address}`);\n    const data = await response.json();\n    return data.name;\n  } catch (e) {\n    console.log(\"error\", e);\n    return null;\n  }\n};\n\n// src/conversion.ts\nimport { Network } from \"@aptos-labs/ts-sdk\";\nimport { BCS, TxnBuilderTypes } from \"aptos\";\nfunction convertNetwork(networkInfo) {\n  switch (networkInfo == null ? void 0 : networkInfo.name.toLowerCase()) {\n    case \"mainnet\":\n      return Network.MAINNET;\n    case \"testnet\":\n      return Network.TESTNET;\n    case \"devnet\":\n      return Network.DEVNET;\n    default:\n      throw new Error(\"Invalid network name\");\n  }\n}\nfunction convertToBCSPayload(payload) {\n  const deserializer = new BCS.Deserializer(payload.bcsToBytes());\n  return TxnBuilderTypes.TransactionPayload.deserialize(deserializer);\n}\n\n// src/WalletCore.ts\nvar WalletCore = class extends EventEmitter {\n  constructor(plugins) {\n    super();\n    this._wallets = [];\n    this._wallet = null;\n    this._account = null;\n    this._network = null;\n    this._connecting = false;\n    this._connected = false;\n    this._wallets = plugins;\n    this.scopePollingDetectionStrategy();\n  }\n  scopePollingDetectionStrategy() {\n    var _a;\n    (_a = this._wallets) == null ? void 0 : _a.forEach(wallet => {\n      if (!wallet.readyState) {\n        wallet.readyState = typeof window === \"undefined\" || typeof document === \"undefined\" ? \"Unsupported\" /* Unsupported */ : \"NotDetected\" /* NotDetected */;\n      }\n      if (typeof window !== \"undefined\") {\n        scopePollingDetectionStrategy(() => {\n          const providerName = wallet.providerName || wallet.name.toLowerCase();\n          if (Object.keys(window).includes(providerName)) {\n            wallet.readyState = \"Installed\" /* Installed */;\n            wallet.provider = window[providerName];\n            this.emit(\"readyStateChange\", wallet);\n            return true;\n          }\n          return false;\n        });\n      }\n    });\n  }\n  doesWalletExist() {\n    if (!this._connected || this._connecting || !this._wallet) throw new WalletNotConnectedError().name;\n    if (!(this._wallet.readyState === \"Loadable\" /* Loadable */ || this._wallet.readyState === \"Installed\" /* Installed */)) throw new WalletNotReadyError().name;\n    return true;\n  }\n  clearData() {\n    this._connected = false;\n    this.setWallet(null);\n    this.setAccount(null);\n    this.setNetwork(null);\n    removeLocalStorage();\n  }\n  async setAnsName() {\n    var _a;\n    if (((_a = this._network) == null ? void 0 : _a.chainId) && this._account) {\n      const name = await getNameByAddress(this._network.chainId, this._account.address);\n      this._account.ansName = name;\n    }\n  }\n  setWallet(wallet) {\n    this._wallet = wallet;\n  }\n  setAccount(account) {\n    this._account = account;\n  }\n  setNetwork(network) {\n    this._network = network;\n  }\n  isConnected() {\n    return this._connected;\n  }\n  get wallets() {\n    return this._wallets;\n  }\n  get wallet() {\n    try {\n      if (!this._wallet) return null;\n      return {\n        name: this._wallet.name,\n        icon: this._wallet.icon,\n        url: this._wallet.url\n      };\n    } catch (error) {\n      throw new WalletNotSelectedError(error).message;\n    }\n  }\n  get account() {\n    try {\n      return this._account;\n    } catch (error) {\n      throw new WalletAccountError(error).message;\n    }\n  }\n  get network() {\n    try {\n      return this._network;\n    } catch (error) {\n      throw new WalletGetNetworkError(error).message;\n    }\n  }\n  async connect(walletName) {\n    var _a;\n    const selectedWallet = (_a = this._wallets) == null ? void 0 : _a.find(wallet => wallet.name === walletName);\n    if (!selectedWallet) return;\n    if (this._connected) {\n      if (selectedWallet.name === walletName) throw new WalletConnectionError(`${walletName} wallet is already connected`).message;\n    }\n    if (isRedirectable()) {\n      if (selectedWallet.deeplinkProvider) {\n        const url = encodeURIComponent(window.location.href);\n        const location = selectedWallet.deeplinkProvider({\n          url\n        });\n        window.location.href = location;\n      }\n    }\n    if (selectedWallet.readyState !== \"Installed\" /* Installed */ && selectedWallet.readyState !== \"Loadable\" /* Loadable */) {\n      return;\n    }\n    await this.connectWallet(selectedWallet);\n  }\n  async connectWallet(selectedWallet) {\n    try {\n      this._connecting = true;\n      this.setWallet(selectedWallet);\n      const account = await selectedWallet.connect();\n      this.setAccount({\n        ...account\n      });\n      const network = await selectedWallet.network();\n      this.setNetwork({\n        ...network\n      });\n      await this.setAnsName();\n      setLocalStorage(selectedWallet.name);\n      this._connected = true;\n      this.emit(\"connect\", account);\n    } catch (error) {\n      this.clearData();\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletConnectionError(errMsg).message;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  async disconnect() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.disconnect());\n      this.clearData();\n      this.emit(\"disconnect\");\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletDisconnectionError(errMsg).message;\n    }\n  }\n  async signAndSubmitTransaction(transaction, options) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signAndSubmitTransaction(transaction, options));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signAndSubmitBCSTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signAndSubmitBCSTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(`Submit a BCS Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signAndSubmitBCSTransaction(transaction, options);\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(`Sign Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signTransaction(transaction, options);\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async signMessage(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._wallet) return null;\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageError(errMsg).message;\n    }\n  }\n  async submitTransaction(transactionInput, options) {\n    const payloadData = transactionInput.data;\n    const aptosConfig = new AptosConfig({\n      network: convertNetwork(this._network)\n    });\n    const newPayload = await generateTransactionPayload({\n      ...payloadData,\n      aptosConfig\n    });\n    const oldTransactionPayload = convertToBCSPayload(newPayload);\n    const response = await this.signAndSubmitBCSTransaction(oldTransactionPayload, options);\n    const {\n      hash,\n      ...output\n    } = response;\n    return {\n      hash,\n      output\n    };\n  }\n  async signMultiAgentTransaction(transaction) {\n    var _a;\n    if (this._wallet && !(\"signMultiAgentTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(`Multi-agent & sponsored transactions are not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signMultiAgentTransaction(transaction);\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async onAccountChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onAccountChange(async data => {\n        this.setAccount({\n          ...data\n        });\n        await this.setAnsName();\n        this.emit(\"accountChange\", this._account);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletAccountChangeError(errMsg).message;\n    }\n  }\n  async onNetworkChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onNetworkChange(async data => {\n        this.setNetwork({\n          ...data\n        });\n        await this.setAnsName();\n        this.emit(\"networkChange\", this._network);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletNetworkChangeError(errMsg).message;\n    }\n  }\n  async signMessageAndVerify(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._account) throw new Error(\"No account found!\");\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      if (!response) throw new WalletSignMessageAndVerifyError(\"Failed to sign a message\").message;\n      let verified = false;\n      if (Array.isArray(response.signature)) {\n        const {\n          fullMessage,\n          signature,\n          bitmap\n        } = response;\n        if (bitmap) {\n          const minKeysRequired = this._account.minKeysRequired;\n          if (signature.length < minKeysRequired) {\n            verified = false;\n          } else {\n            const bits = Array.from(bitmap).flatMap(n => Array.from({\n              length: 8\n            }).map((_, i) => n >> i & 1));\n            const index = bits.map((_, i) => i).filter(i => bits[i]);\n            const publicKeys = this._account.publicKey;\n            const matchedPublicKeys = publicKeys.filter((_, i) => index.includes(i));\n            verified = true;\n            for (let i = 0; i < signature.length; i++) {\n              const isSigVerified = nacl.sign.detached.verify(Buffer.from(fullMessage), Buffer.from(signature[i], \"hex\"), Buffer.from(matchedPublicKeys[i], \"hex\"));\n              if (!isSigVerified) {\n                verified = false;\n                break;\n              }\n            }\n          }\n        } else {\n          throw new WalletSignMessageAndVerifyError(\"Failed to get a bitmap\").message;\n        }\n      } else {\n        const currentAccountPublicKey = new HexString(this._account.publicKey);\n        const signature = new HexString(response.signature);\n        verified = nacl.sign.detached.verify(Buffer.from(response.fullMessage), Buffer.from(signature.noPrefix(), \"hex\"), Buffer.from(currentAccountPublicKey.noPrefix(), \"hex\"));\n      }\n      return verified;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageAndVerifyError(errMsg).message;\n    }\n  }\n};\n\n// src/types.ts\nimport { TxnBuilderTypes as TxnBuilderTypes3, Types as Types2 } from \"aptos\";\nexport { NetworkName, TxnBuilderTypes3 as TxnBuilderTypes, Types2 as Types, WalletCore, WalletReadyState, getLocalStorage, isInAppBrowser, isMobile, isRedirectable, removeLocalStorage, scopePollingDetectionStrategy, setLocalStorage };","map":{"version":3,"names":["HexString","AptosConfig","generateTransactionPayload","EventEmitter","nacl","Buffer","WalletReadyState","WalletReadyState2","NetworkName","NetworkName2","WalletError","Error","constructor","message","error","WalletNotSelectedError","arguments","name","WalletNotReadyError","WalletConnectionError","WalletDisconnectionError","WalletAccountError","WalletGetNetworkError","WalletAccountChangeError","WalletNetworkChangeError","WalletNotConnectedError","WalletSignMessageError","WalletSignMessageAndVerifyError","WalletSignAndSubmitMessageError","WalletSignTransactionError","WalletNotSupportedMethod","scopePollingDetectionStrategy","detect","window","document","disposers","detectAndDispose","detected","dispose","interval","setInterval","push","clearInterval","readyState","addEventListener","once","removeEventListener","LOCAL_STORAGE_ITEM_KEY","setLocalStorage","walletName","localStorage","setItem","removeLocalStorage","removeItem","getLocalStorage","getItem","isMobile","test","navigator","userAgent","isInAppBrowser","isIphone","isAndroid","isRedirectable","ChainIdToAnsContractAddressMap","getNameByAddress","chainId","address","response","fetch","data","json","e","console","log","Network","BCS","TxnBuilderTypes","convertNetwork","networkInfo","toLowerCase","MAINNET","TESTNET","DEVNET","convertToBCSPayload","payload","deserializer","Deserializer","bcsToBytes","TransactionPayload","deserialize","WalletCore","plugins","_wallets","_wallet","_account","_network","_connecting","_connected","_a","forEach","wallet","providerName","Object","keys","includes","provider","emit","doesWalletExist","clearData","setWallet","setAccount","setNetwork","setAnsName","ansName","account","network","isConnected","wallets","icon","url","connect","selectedWallet","find","deeplinkProvider","encodeURIComponent","location","href","connectWallet","errMsg","disconnect","signAndSubmitTransaction","transaction","options","signAndSubmitBCSTransaction","signTransaction","signMessage","submitTransaction","transactionInput","payloadData","aptosConfig","newPayload","oldTransactionPayload","hash","output","signMultiAgentTransaction","onAccountChange","onNetworkChange","signMessageAndVerify","verified","Array","isArray","signature","fullMessage","bitmap","minKeysRequired","length","bits","from","flatMap","n","map","_","i","index","filter","publicKeys","publicKey","matchedPublicKeys","isSigVerified","sign","detached","verify","currentAccountPublicKey","noPrefix","TxnBuilderTypes3","Types","Types2"],"sources":["/home/ck/compoundefi/client/node_modules/@aptos-labs/wallet-adapter-core/dist/index.mjs"],"sourcesContent":["// src/WalletCore.ts\nimport { HexString } from \"aptos\";\nimport { AptosConfig, generateTransactionPayload } from \"@aptos-labs/ts-sdk\";\nimport EventEmitter from \"eventemitter3\";\nimport nacl from \"tweetnacl\";\nimport { Buffer } from \"buffer\";\n\n// src/constants.ts\nvar WalletReadyState = /* @__PURE__ */ ((WalletReadyState2) => {\n  WalletReadyState2[\"Installed\"] = \"Installed\";\n  WalletReadyState2[\"NotDetected\"] = \"NotDetected\";\n  WalletReadyState2[\"Loadable\"] = \"Loadable\";\n  WalletReadyState2[\"Unsupported\"] = \"Unsupported\";\n  return WalletReadyState2;\n})(WalletReadyState || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"Mainnet\"] = \"mainnet\";\n  NetworkName2[\"Testnet\"] = \"testnet\";\n  NetworkName2[\"Devnet\"] = \"devnet\";\n  return NetworkName2;\n})(NetworkName || {});\n\n// src/error/index.ts\nvar WalletError = class extends Error {\n  constructor(message, error) {\n    super(message);\n    this.error = error;\n  }\n};\nvar WalletNotSelectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSelectedError\";\n  }\n};\nvar WalletNotReadyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotReadyError\";\n  }\n};\nvar WalletConnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletConnectionError\";\n  }\n};\nvar WalletDisconnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletDisconnectionError\";\n  }\n};\nvar WalletAccountError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountError\";\n  }\n};\nvar WalletGetNetworkError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletGetNetworkError\";\n  }\n};\nvar WalletAccountChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountChangeError\";\n  }\n};\nvar WalletNetworkChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNetworkChangeError\";\n  }\n};\nvar WalletNotConnectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotConnectedError\";\n  }\n};\nvar WalletSignMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageError\";\n  }\n};\nvar WalletSignMessageAndVerifyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageAndVerifyError\";\n  }\n};\nvar WalletSignAndSubmitMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignAndSubmitMessageError\";\n  }\n};\nvar WalletSignTransactionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignTransactionError\";\n  }\n};\nvar WalletNotSupportedMethod = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSupportedMethod\";\n  }\n};\n\n// src/utils/scopePollingDetectionStrategy.ts\nfunction scopePollingDetectionStrategy(detect) {\n  if (typeof window === \"undefined\" || typeof document === \"undefined\")\n    return;\n  const disposers = [];\n  function detectAndDispose() {\n    const detected = detect();\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  }\n  const interval = setInterval(detectAndDispose, 1e3);\n  disposers.push(() => clearInterval(interval));\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", detectAndDispose, {\n      once: true\n    });\n    disposers.push(\n      () => document.removeEventListener(\"DOMContentLoaded\", detectAndDispose)\n    );\n  }\n  if (document.readyState !== \"complete\") {\n    window.addEventListener(\"load\", detectAndDispose, { once: true });\n    disposers.push(() => window.removeEventListener(\"load\", detectAndDispose));\n  }\n  detectAndDispose();\n}\n\n// src/utils/localStorage.ts\nvar LOCAL_STORAGE_ITEM_KEY = \"AptosWalletName\";\nfunction setLocalStorage(walletName) {\n  localStorage.setItem(LOCAL_STORAGE_ITEM_KEY, walletName);\n}\nfunction removeLocalStorage() {\n  localStorage.removeItem(LOCAL_STORAGE_ITEM_KEY);\n}\nfunction getLocalStorage() {\n  localStorage.getItem(LOCAL_STORAGE_ITEM_KEY);\n}\n\n// src/utils/helpers.ts\nfunction isMobile() {\n  return /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/i.test(\n    navigator.userAgent\n  );\n}\nfunction isInAppBrowser() {\n  const isIphone = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(\n    navigator.userAgent\n  );\n  const isAndroid = /(Android).*Version\\/[\\d.]+.*Chrome\\/[^\\s]+ Mobile/i.test(\n    navigator.userAgent\n  );\n  return isIphone || isAndroid;\n}\nfunction isRedirectable() {\n  if (typeof navigator === \"undefined\" || !navigator)\n    return false;\n  return isMobile() && !isInAppBrowser();\n}\n\n// src/ans.ts\nvar ChainIdToAnsContractAddressMap = {\n  \"1\": \"mainnet\",\n  \"2\": \"testnet\"\n};\nvar getNameByAddress = async (chainId, address) => {\n  try {\n    if (!ChainIdToAnsContractAddressMap[chainId])\n      return null;\n    const response = await fetch(\n      `https://www.aptosnames.com/api/${ChainIdToAnsContractAddressMap[chainId]}/v1/name/${address}`\n    );\n    const data = await response.json();\n    return data.name;\n  } catch (e) {\n    console.log(\"error\", e);\n    return null;\n  }\n};\n\n// src/conversion.ts\nimport { Network } from \"@aptos-labs/ts-sdk\";\nimport { BCS, TxnBuilderTypes } from \"aptos\";\nfunction convertNetwork(networkInfo) {\n  switch (networkInfo == null ? void 0 : networkInfo.name.toLowerCase()) {\n    case \"mainnet\":\n      return Network.MAINNET;\n    case \"testnet\":\n      return Network.TESTNET;\n    case \"devnet\":\n      return Network.DEVNET;\n    default:\n      throw new Error(\"Invalid network name\");\n  }\n}\nfunction convertToBCSPayload(payload) {\n  const deserializer = new BCS.Deserializer(payload.bcsToBytes());\n  return TxnBuilderTypes.TransactionPayload.deserialize(deserializer);\n}\n\n// src/WalletCore.ts\nvar WalletCore = class extends EventEmitter {\n  constructor(plugins) {\n    super();\n    this._wallets = [];\n    this._wallet = null;\n    this._account = null;\n    this._network = null;\n    this._connecting = false;\n    this._connected = false;\n    this._wallets = plugins;\n    this.scopePollingDetectionStrategy();\n  }\n  scopePollingDetectionStrategy() {\n    var _a;\n    (_a = this._wallets) == null ? void 0 : _a.forEach((wallet) => {\n      if (!wallet.readyState) {\n        wallet.readyState = typeof window === \"undefined\" || typeof document === \"undefined\" ? \"Unsupported\" /* Unsupported */ : \"NotDetected\" /* NotDetected */;\n      }\n      if (typeof window !== \"undefined\") {\n        scopePollingDetectionStrategy(() => {\n          const providerName = wallet.providerName || wallet.name.toLowerCase();\n          if (Object.keys(window).includes(providerName)) {\n            wallet.readyState = \"Installed\" /* Installed */;\n            wallet.provider = window[providerName];\n            this.emit(\"readyStateChange\", wallet);\n            return true;\n          }\n          return false;\n        });\n      }\n    });\n  }\n  doesWalletExist() {\n    if (!this._connected || this._connecting || !this._wallet)\n      throw new WalletNotConnectedError().name;\n    if (!(this._wallet.readyState === \"Loadable\" /* Loadable */ || this._wallet.readyState === \"Installed\" /* Installed */))\n      throw new WalletNotReadyError().name;\n    return true;\n  }\n  clearData() {\n    this._connected = false;\n    this.setWallet(null);\n    this.setAccount(null);\n    this.setNetwork(null);\n    removeLocalStorage();\n  }\n  async setAnsName() {\n    var _a;\n    if (((_a = this._network) == null ? void 0 : _a.chainId) && this._account) {\n      const name = await getNameByAddress(\n        this._network.chainId,\n        this._account.address\n      );\n      this._account.ansName = name;\n    }\n  }\n  setWallet(wallet) {\n    this._wallet = wallet;\n  }\n  setAccount(account) {\n    this._account = account;\n  }\n  setNetwork(network) {\n    this._network = network;\n  }\n  isConnected() {\n    return this._connected;\n  }\n  get wallets() {\n    return this._wallets;\n  }\n  get wallet() {\n    try {\n      if (!this._wallet)\n        return null;\n      return {\n        name: this._wallet.name,\n        icon: this._wallet.icon,\n        url: this._wallet.url\n      };\n    } catch (error) {\n      throw new WalletNotSelectedError(error).message;\n    }\n  }\n  get account() {\n    try {\n      return this._account;\n    } catch (error) {\n      throw new WalletAccountError(error).message;\n    }\n  }\n  get network() {\n    try {\n      return this._network;\n    } catch (error) {\n      throw new WalletGetNetworkError(error).message;\n    }\n  }\n  async connect(walletName) {\n    var _a;\n    const selectedWallet = (_a = this._wallets) == null ? void 0 : _a.find(\n      (wallet) => wallet.name === walletName\n    );\n    if (!selectedWallet)\n      return;\n    if (this._connected) {\n      if (selectedWallet.name === walletName)\n        throw new WalletConnectionError(\n          `${walletName} wallet is already connected`\n        ).message;\n    }\n    if (isRedirectable()) {\n      if (selectedWallet.deeplinkProvider) {\n        const url = encodeURIComponent(window.location.href);\n        const location = selectedWallet.deeplinkProvider({ url });\n        window.location.href = location;\n      }\n    }\n    if (selectedWallet.readyState !== \"Installed\" /* Installed */ && selectedWallet.readyState !== \"Loadable\" /* Loadable */) {\n      return;\n    }\n    await this.connectWallet(selectedWallet);\n  }\n  async connectWallet(selectedWallet) {\n    try {\n      this._connecting = true;\n      this.setWallet(selectedWallet);\n      const account = await selectedWallet.connect();\n      this.setAccount({ ...account });\n      const network = await selectedWallet.network();\n      this.setNetwork({ ...network });\n      await this.setAnsName();\n      setLocalStorage(selectedWallet.name);\n      this._connected = true;\n      this.emit(\"connect\", account);\n    } catch (error) {\n      this.clearData();\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletConnectionError(errMsg).message;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  async disconnect() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.disconnect());\n      this.clearData();\n      this.emit(\"disconnect\");\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletDisconnectionError(errMsg).message;\n    }\n  }\n  async signAndSubmitTransaction(transaction, options) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signAndSubmitTransaction(\n        transaction,\n        options\n      ));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signAndSubmitBCSTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signAndSubmitBCSTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Submit a BCS Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signAndSubmitBCSTransaction(\n        transaction,\n        options\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Sign Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signTransaction(\n        transaction,\n        options\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async signMessage(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._wallet)\n        return null;\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageError(errMsg).message;\n    }\n  }\n  async submitTransaction(transactionInput, options) {\n    const payloadData = transactionInput.data;\n    const aptosConfig = new AptosConfig({ network: convertNetwork(this._network) });\n    const newPayload = await generateTransactionPayload({ ...payloadData, aptosConfig });\n    const oldTransactionPayload = convertToBCSPayload(newPayload);\n    const response = await this.signAndSubmitBCSTransaction(oldTransactionPayload, options);\n    const { hash, ...output } = response;\n    return { hash, output };\n  }\n  async signMultiAgentTransaction(transaction) {\n    var _a;\n    if (this._wallet && !(\"signMultiAgentTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Multi-agent & sponsored transactions are not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signMultiAgentTransaction(\n        transaction\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async onAccountChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onAccountChange(async (data) => {\n        this.setAccount({ ...data });\n        await this.setAnsName();\n        this.emit(\"accountChange\", this._account);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletAccountChangeError(errMsg).message;\n    }\n  }\n  async onNetworkChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onNetworkChange(async (data) => {\n        this.setNetwork({ ...data });\n        await this.setAnsName();\n        this.emit(\"networkChange\", this._network);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletNetworkChangeError(errMsg).message;\n    }\n  }\n  async signMessageAndVerify(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._account)\n        throw new Error(\"No account found!\");\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      if (!response)\n        throw new WalletSignMessageAndVerifyError(\"Failed to sign a message\").message;\n      let verified = false;\n      if (Array.isArray(response.signature)) {\n        const { fullMessage, signature, bitmap } = response;\n        if (bitmap) {\n          const minKeysRequired = this._account.minKeysRequired;\n          if (signature.length < minKeysRequired) {\n            verified = false;\n          } else {\n            const bits = Array.from(bitmap).flatMap(\n              (n) => Array.from({ length: 8 }).map((_, i) => n >> i & 1)\n            );\n            const index = bits.map((_, i) => i).filter((i) => bits[i]);\n            const publicKeys = this._account.publicKey;\n            const matchedPublicKeys = publicKeys.filter(\n              (_, i) => index.includes(i)\n            );\n            verified = true;\n            for (let i = 0; i < signature.length; i++) {\n              const isSigVerified = nacl.sign.detached.verify(\n                Buffer.from(fullMessage),\n                Buffer.from(signature[i], \"hex\"),\n                Buffer.from(matchedPublicKeys[i], \"hex\")\n              );\n              if (!isSigVerified) {\n                verified = false;\n                break;\n              }\n            }\n          }\n        } else {\n          throw new WalletSignMessageAndVerifyError(\"Failed to get a bitmap\").message;\n        }\n      } else {\n        const currentAccountPublicKey = new HexString(\n          this._account.publicKey\n        );\n        const signature = new HexString(response.signature);\n        verified = nacl.sign.detached.verify(\n          Buffer.from(response.fullMessage),\n          Buffer.from(signature.noPrefix(), \"hex\"),\n          Buffer.from(currentAccountPublicKey.noPrefix(), \"hex\")\n        );\n      }\n      return verified;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageAndVerifyError(errMsg).message;\n    }\n  }\n};\n\n// src/types.ts\nimport { TxnBuilderTypes as TxnBuilderTypes3, Types as Types2 } from \"aptos\";\nexport {\n  NetworkName,\n  TxnBuilderTypes3 as TxnBuilderTypes,\n  Types2 as Types,\n  WalletCore,\n  WalletReadyState,\n  getLocalStorage,\n  isInAppBrowser,\n  isMobile,\n  isRedirectable,\n  removeLocalStorage,\n  scopePollingDetectionStrategy,\n  setLocalStorage\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
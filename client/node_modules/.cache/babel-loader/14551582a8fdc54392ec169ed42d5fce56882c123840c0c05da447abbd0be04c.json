{"ast":null,"code":"// src/utils/formatters.js\n// Utility functions for formatting values\n\n/**\r\n * Format a number to a currency string\r\n * @param {number} value - Value to format\r\n * @param {string} currency - Currency code (default: USD)\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatCurrency = (value, currency = 'USD', digits = 2) => {\n  if (value === undefined || value === null || isNaN(value)) {\n    return '$0.00';\n  }\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  });\n  return formatter.format(value);\n};\n\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - Value to format\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted number\r\n */\nexport const formatNumber = (value, digits = 2) => {\n  if (value === undefined || value === null || isNaN(value)) {\n    return '0';\n  }\n  const formatter = new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  });\n  return formatter.format(value);\n};\n\n/**\r\n * Format a percentage value\r\n * @param {number} value - Value to format (e.g., 0.25 for 25%)\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted percentage\r\n */\nexport const formatPercentage = (value, digits = 2) => {\n  if (value === undefined || value === null || isNaN(value)) {\n    return '0%';\n  }\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  });\n  return formatter.format(value / 100);\n};\n\n/**\r\n * Format a date\r\n * @param {Date|string|number} date - Date to format\r\n * @param {string} format - Format style ('full', 'long', 'medium', 'short', or 'relative')\r\n * @returns {string} Formatted date\r\n */\nexport const formatDate = (date, format = 'medium') => {\n  if (!date) {\n    return '';\n  }\n  const dateObj = date instanceof Date ? date : new Date(date);\n  if (isNaN(dateObj.getTime())) {\n    return '';\n  }\n  if (format === 'relative') {\n    const now = new Date();\n    const diff = now.getTime() - dateObj.getTime();\n\n    // Convert diff to seconds\n    const seconds = Math.floor(diff / 1000);\n    if (seconds < 60) {\n      return 'just now';\n    }\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) {\n      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\n    }\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) {\n      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    }\n    const days = Math.floor(hours / 24);\n    if (days < 30) {\n      return `${days} day${days !== 1 ? 's' : ''} ago`;\n    }\n    const months = Math.floor(days / 30);\n    if (months < 12) {\n      return `${months} month${months !== 1 ? 's' : ''} ago`;\n    }\n    const years = Math.floor(months / 12);\n    return `${years} year${years !== 1 ? 's' : ''} ago`;\n  }\n  const options = {\n    full: {\n      dateStyle: 'full',\n      timeStyle: 'long'\n    },\n    long: {\n      dateStyle: 'long',\n      timeStyle: 'short'\n    },\n    medium: {\n      dateStyle: 'medium'\n    },\n    short: {\n      dateStyle: 'short'\n    }\n  };\n  return new Intl.DateTimeFormat('en-US', options[format] || options.medium).format(dateObj);\n};\n\n/**\r\n * Format an address for display (0x1234...5678)\r\n * @param {string} address - Address to format\r\n * @param {number} prefixLength - Number of characters to show at start\r\n * @param {number} suffixLength - Number of characters to show at end\r\n * @returns {string} Formatted address\r\n */\nexport const formatAddress = (address, prefixLength = 6, suffixLength = 4) => {\n  if (!address || typeof address !== 'string') {\n    return '';\n  }\n  if (address.length <= prefixLength + suffixLength) {\n    return address;\n  }\n  return `${address.slice(0, prefixLength)}...${address.slice(-suffixLength)}`;\n};\n\n/**\r\n * Format file size\r\n * @param {number} bytes - Size in bytes\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted file size\r\n */\nexport const formatFileSize = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\n/**\r\n * Format duration in milliseconds to human-readable string\r\n * @param {number} milliseconds - Duration in milliseconds\r\n * @returns {string} Formatted duration\r\n */\nexport const formatDuration = milliseconds => {\n  if (!milliseconds || isNaN(milliseconds) || milliseconds < 0) {\n    return '0s';\n  }\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  if (days > 0) {\n    return `${days}d ${hours % 24}h`;\n  }\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  }\n  if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  }\n  return `${seconds}s`;\n};\n\n/**\r\n * Format APR value\r\n * @param {number} apr - APR value (e.g. 7.5 for 7.5%)\r\n * @param {number} digits - Number of decimal places\r\n * @returns {string} Formatted APR with % sign\r\n */\nexport const formatAPR = (apr, digits = 2) => {\n  if (apr === undefined || apr === null || isNaN(apr)) {\n    return '0%';\n  }\n  return `${parseFloat(apr).toFixed(digits)}%`;\n};\n\n/**\r\n * Format large numbers with k, M, B, T suffixes\r\n * @param {number} value - Number to format\r\n * @param {number} digits - Number of decimal places\r\n * @returns {string} Formatted number with suffix\r\n */\nexport const formatCompactNumber = (value, digits = 1) => {\n  if (value === undefined || value === null || isNaN(value)) {\n    return '0';\n  }\n  const formatter = new Intl.NumberFormat('en-US', {\n    notation: 'compact',\n    compactDisplay: 'short',\n    maximumFractionDigits: digits\n  });\n  return formatter.format(value);\n};\nexport default {\n  formatCurrency,\n  formatNumber,\n  formatPercentage,\n  formatDate,\n  formatAddress,\n  formatFileSize,\n  formatDuration,\n  formatAPR,\n  formatCompactNumber\n};","map":{"version":3,"names":["formatCurrency","value","currency","digits","undefined","isNaN","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatNumber","formatPercentage","formatDate","date","dateObj","Date","getTime","now","diff","seconds","Math","floor","minutes","hours","days","months","years","options","full","dateStyle","timeStyle","long","medium","short","DateTimeFormat","formatAddress","address","prefixLength","suffixLength","length","slice","formatFileSize","bytes","decimals","k","dm","sizes","i","log","parseFloat","pow","toFixed","formatDuration","milliseconds","formatAPR","apr","formatCompactNumber","notation","compactDisplay"],"sources":["/home/ck/compoundefi/client/src/utils/formatters.js"],"sourcesContent":["// src/utils/formatters.js\r\n// Utility functions for formatting values\r\n\r\n/**\r\n * Format a number to a currency string\r\n * @param {number} value - Value to format\r\n * @param {string} currency - Currency code (default: USD)\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (value, currency = 'USD', digits = 2) => {\r\n  if (value === undefined || value === null || isNaN(value)) {\r\n    return '$0.00';\r\n  }\r\n  \r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: digits,\r\n    maximumFractionDigits: digits\r\n  });\r\n  \r\n  return formatter.format(value);\r\n};\r\n\r\n/**\r\n * Format a number with thousands separators\r\n * @param {number} value - Value to format\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted number\r\n */\r\nexport const formatNumber = (value, digits = 2) => {\r\n  if (value === undefined || value === null || isNaN(value)) {\r\n    return '0';\r\n  }\r\n  \r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    minimumFractionDigits: digits,\r\n    maximumFractionDigits: digits\r\n  });\r\n  \r\n  return formatter.format(value);\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - Value to format (e.g., 0.25 for 25%)\r\n * @param {number} digits - Number of decimal digits (default: 2)\r\n * @returns {string} Formatted percentage\r\n */\r\nexport const formatPercentage = (value, digits = 2) => {\r\n  if (value === undefined || value === null || isNaN(value)) {\r\n    return '0%';\r\n  }\r\n  \r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'percent',\r\n    minimumFractionDigits: digits,\r\n    maximumFractionDigits: digits\r\n  });\r\n  \r\n  return formatter.format(value / 100);\r\n};\r\n\r\n/**\r\n * Format a date\r\n * @param {Date|string|number} date - Date to format\r\n * @param {string} format - Format style ('full', 'long', 'medium', 'short', or 'relative')\r\n * @returns {string} Formatted date\r\n */\r\nexport const formatDate = (date, format = 'medium') => {\r\n  if (!date) {\r\n    return '';\r\n  }\r\n  \r\n  const dateObj = date instanceof Date ? date : new Date(date);\r\n  \r\n  if (isNaN(dateObj.getTime())) {\r\n    return '';\r\n  }\r\n  \r\n  if (format === 'relative') {\r\n    const now = new Date();\r\n    const diff = now.getTime() - dateObj.getTime();\r\n    \r\n    // Convert diff to seconds\r\n    const seconds = Math.floor(diff / 1000);\r\n    \r\n    if (seconds < 60) {\r\n      return 'just now';\r\n    }\r\n    \r\n    const minutes = Math.floor(seconds / 60);\r\n    if (minutes < 60) {\r\n      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\r\n    }\r\n    \r\n    const hours = Math.floor(minutes / 60);\r\n    if (hours < 24) {\r\n      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\r\n    }\r\n    \r\n    const days = Math.floor(hours / 24);\r\n    if (days < 30) {\r\n      return `${days} day${days !== 1 ? 's' : ''} ago`;\r\n    }\r\n    \r\n    const months = Math.floor(days / 30);\r\n    if (months < 12) {\r\n      return `${months} month${months !== 1 ? 's' : ''} ago`;\r\n    }\r\n    \r\n    const years = Math.floor(months / 12);\r\n    return `${years} year${years !== 1 ? 's' : ''} ago`;\r\n  }\r\n  \r\n  const options = {\r\n    full: { dateStyle: 'full', timeStyle: 'long' },\r\n    long: { dateStyle: 'long', timeStyle: 'short' },\r\n    medium: { dateStyle: 'medium' },\r\n    short: { dateStyle: 'short' }\r\n  };\r\n  \r\n  return new Intl.DateTimeFormat('en-US', options[format] || options.medium).format(dateObj);\r\n};\r\n\r\n/**\r\n * Format an address for display (0x1234...5678)\r\n * @param {string} address - Address to format\r\n * @param {number} prefixLength - Number of characters to show at start\r\n * @param {number} suffixLength - Number of characters to show at end\r\n * @returns {string} Formatted address\r\n */\r\nexport const formatAddress = (address, prefixLength = 6, suffixLength = 4) => {\r\n  if (!address || typeof address !== 'string') {\r\n    return '';\r\n  }\r\n  \r\n  if (address.length <= prefixLength + suffixLength) {\r\n    return address;\r\n  }\r\n  \r\n  return `${address.slice(0, prefixLength)}...${address.slice(-suffixLength)}`;\r\n};\r\n\r\n/**\r\n * Format file size\r\n * @param {number} bytes - Size in bytes\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted file size\r\n */\r\nexport const formatFileSize = (bytes, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  \r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n};\r\n\r\n/**\r\n * Format duration in milliseconds to human-readable string\r\n * @param {number} milliseconds - Duration in milliseconds\r\n * @returns {string} Formatted duration\r\n */\r\nexport const formatDuration = (milliseconds) => {\r\n  if (!milliseconds || isNaN(milliseconds) || milliseconds < 0) {\r\n    return '0s';\r\n  }\r\n  \r\n  const seconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n  \r\n  if (days > 0) {\r\n    return `${days}d ${hours % 24}h`;\r\n  }\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes % 60}m`;\r\n  }\r\n  \r\n  if (minutes > 0) {\r\n    return `${minutes}m ${seconds % 60}s`;\r\n  }\r\n  \r\n  return `${seconds}s`;\r\n};\r\n\r\n/**\r\n * Format APR value\r\n * @param {number} apr - APR value (e.g. 7.5 for 7.5%)\r\n * @param {number} digits - Number of decimal places\r\n * @returns {string} Formatted APR with % sign\r\n */\r\nexport const formatAPR = (apr, digits = 2) => {\r\n  if (apr === undefined || apr === null || isNaN(apr)) {\r\n    return '0%';\r\n  }\r\n  \r\n  return `${parseFloat(apr).toFixed(digits)}%`;\r\n};\r\n\r\n/**\r\n * Format large numbers with k, M, B, T suffixes\r\n * @param {number} value - Number to format\r\n * @param {number} digits - Number of decimal places\r\n * @returns {string} Formatted number with suffix\r\n */\r\nexport const formatCompactNumber = (value, digits = 1) => {\r\n  if (value === undefined || value === null || isNaN(value)) {\r\n    return '0';\r\n  }\r\n  \r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    notation: 'compact',\r\n    compactDisplay: 'short',\r\n    maximumFractionDigits: digits\r\n  });\r\n  \r\n  return formatter.format(value);\r\n};\r\n\r\nexport default {\r\n  formatCurrency,\r\n  formatNumber,\r\n  formatPercentage,\r\n  formatDate,\r\n  formatAddress,\r\n  formatFileSize,\r\n  formatDuration,\r\n  formatAPR,\r\n  formatCompactNumber\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
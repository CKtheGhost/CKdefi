{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const DataContext=/*#__PURE__*/createContext(null);export const DataProvider=_ref=>{let{children}=_ref;const[isLoading,setIsLoading]=useState(true);const[portfolioData,setPortfolioData]=useState(null);const[stakingData,setStakingData]=useState(null);const[marketData,setMarketData]=useState(null);const[newsData,setNewsData]=useState([]);const[lastUpdated,setLastUpdated]=useState(new Date());const[error,setError]=useState(null);const[recommendationHistory,setRecommendationHistory]=useState([]);// Initial data fetch\nuseEffect(()=>{fetchData();// Refresh data periodically (every 5 minutes)\nconst intervalId=setInterval(fetchData,5*60*1000);return()=>clearInterval(intervalId);},[]);// Main data fetching function\nconst fetchData=async()=>{setIsLoading(true);try{// Mock data for demonstration\nawait Promise.all([fetchPortfolioData(),fetchStakingData(),fetchMarketData(),fetchNewsData()]);setLastUpdated(new Date());setError(null);}catch(err){console.error(\"Error fetching data:\",err);setError(\"Failed to load data. Please try again.\");}finally{setIsLoading(false);}};// Fetch portfolio data\nconst fetchPortfolioData=async walletAddress=>{// Mock implementation - in real app would fetch from API\nconst mockData={apt:{amount:\"10.5\",valueUSD:105.0},stAPT:{amount:\"5.2\",valueUSD:54.6},tAPT:{amount:\"0\",valueUSD:0},totalValueUSD:159.6};setPortfolioData(mockData);return mockData;};// Fetch staking data\nconst fetchStakingData=async()=>{// Mock implementation\nconst mockData={protocols:{amnis:{staking:{apr:\"7.2\",product:\"stAPT\"},blendedStrategy:{apr:\"7.6\"}},thala:{staking:{apr:\"7.5\",product:\"sthAPT\"},blendedStrategy:{apr:\"7.9\"}},tortuga:{staking:{apr:\"7.0\",product:\"tAPT\"},blendedStrategy:{apr:\"7.0\"}},ditto:{staking:{apr:\"7.8\",product:\"dAPT\"},blendedStrategy:{apr:\"7.8\"}}}};setStakingData(mockData);return mockData;};// Fetch market data\nconst fetchMarketData=async()=>{// Mock implementation\nconst mockData={tokens:[{symbol:\"APT\",price:10.0,change24h:2.5},{symbol:\"stAPT\",price:10.5,change24h:2.6},{symbol:\"tAPT\",price:10.3,change24h:2.4}]};setMarketData(mockData);return mockData;};// Fetch news data\nconst fetchNewsData=async()=>{// Mock implementation\nconst mockData=[{id:1,title:\"New Staking Protocol Launches on Aptos\",date:\"2025-03-20\",url:\"#\"},{id:2,title:\"Aptos DeFi TVL Reaches New ATH\",date:\"2025-03-25\",url:\"#\"}];setNewsData(mockData);return mockData;};// Load recommendation history\nconst loadRecommendationHistory=async()=>{// Mock implementation\nconst history=[{title:\"Balanced Yield Strategy\",timestamp:new Date(Date.now()-86400000).toISOString(),totalApr:\"7.8\",allocation:[{protocol:\"Amnis\",product:\"Liquid Staking\",percentage:40},{protocol:\"Thala\",product:\"Liquid Staking\",percentage:30},{protocol:\"PancakeSwap\",product:\"AMM Liquidity\",percentage:20},{protocol:\"Ditto\",product:\"Liquid Staking\",percentage:10}]},{title:\"Conservative Staking\",timestamp:new Date(Date.now()-7*86400000).toISOString(),totalApr:\"7.3\",allocation:[{protocol:\"Amnis\",product:\"Liquid Staking\",percentage:50},{protocol:\"Thala\",product:\"Liquid Staking\",percentage:50}]}];setRecommendationHistory(history);return history;};// Save a recommendation to history\nconst saveRecommendation=recommendation=>{if(!recommendation)return;const updatedRecommendation={...recommendation,timestamp:new Date().toISOString()};setRecommendationHistory(prev=>[updatedRecommendation,...prev]);return updatedRecommendation;};// Context value\nconst value={isLoading,portfolioData,stakingData,marketData,newsData,lastUpdated,error,recommendationHistory,refreshData:fetchData,fetchPortfolioData,loadRecommendationHistory,saveRecommendation};return/*#__PURE__*/_jsx(DataContext.Provider,{value:value,children:children});};// Custom hook for using the data context\nexport const useData=()=>{const context=useContext(DataContext);if(!context){throw new Error('useData must be used within a DataProvider');}return context;};export default DataContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","DataContext","DataProvider","_ref","children","isLoading","setIsLoading","portfolioData","setPortfolioData","stakingData","setStakingData","marketData","setMarketData","newsData","setNewsData","lastUpdated","setLastUpdated","Date","error","setError","recommendationHistory","setRecommendationHistory","fetchData","intervalId","setInterval","clearInterval","Promise","all","fetchPortfolioData","fetchStakingData","fetchMarketData","fetchNewsData","err","console","walletAddress","mockData","apt","amount","valueUSD","stAPT","tAPT","totalValueUSD","protocols","amnis","staking","apr","product","blendedStrategy","thala","tortuga","ditto","tokens","symbol","price","change24h","id","title","date","url","loadRecommendationHistory","history","timestamp","now","toISOString","totalApr","allocation","protocol","percentage","saveRecommendation","recommendation","updatedRecommendation","prev","value","refreshData","Provider","useData","context","Error"],"sources":["/home/ck/compoundefi/client/src/context/DataContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create context\r\nexport const DataContext = createContext(null);\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [portfolioData, setPortfolioData] = useState(null);\r\n  const [stakingData, setStakingData] = useState(null);\r\n  const [marketData, setMarketData] = useState(null);\r\n  const [newsData, setNewsData] = useState([]);\r\n  const [lastUpdated, setLastUpdated] = useState(new Date());\r\n  const [error, setError] = useState(null);\r\n  const [recommendationHistory, setRecommendationHistory] = useState([]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchData();\r\n    \r\n    // Refresh data periodically (every 5 minutes)\r\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // Main data fetching function\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Mock data for demonstration\r\n      await Promise.all([\r\n        fetchPortfolioData(),\r\n        fetchStakingData(),\r\n        fetchMarketData(),\r\n        fetchNewsData()\r\n      ]);\r\n      \r\n      setLastUpdated(new Date());\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n      setError(\"Failed to load data. Please try again.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch portfolio data\r\n  const fetchPortfolioData = async (walletAddress) => {\r\n    // Mock implementation - in real app would fetch from API\r\n    const mockData = {\r\n      apt: { amount: \"10.5\", valueUSD: 105.0 },\r\n      stAPT: { amount: \"5.2\", valueUSD: 54.6 },\r\n      tAPT: { amount: \"0\", valueUSD: 0 },\r\n      totalValueUSD: 159.6\r\n    };\r\n    \r\n    setPortfolioData(mockData);\r\n    return mockData;\r\n  };\r\n\r\n  // Fetch staking data\r\n  const fetchStakingData = async () => {\r\n    // Mock implementation\r\n    const mockData = {\r\n      protocols: {\r\n        amnis: { \r\n          staking: { apr: \"7.2\", product: \"stAPT\" },\r\n          blendedStrategy: { apr: \"7.6\" }\r\n        },\r\n        thala: { \r\n          staking: { apr: \"7.5\", product: \"sthAPT\" },\r\n          blendedStrategy: { apr: \"7.9\" }\r\n        },\r\n        tortuga: { \r\n          staking: { apr: \"7.0\", product: \"tAPT\" },\r\n          blendedStrategy: { apr: \"7.0\" }\r\n        },\r\n        ditto: { \r\n          staking: { apr: \"7.8\", product: \"dAPT\" },\r\n          blendedStrategy: { apr: \"7.8\" }\r\n        }\r\n      }\r\n    };\r\n    \r\n    setStakingData(mockData);\r\n    return mockData;\r\n  };\r\n\r\n  // Fetch market data\r\n  const fetchMarketData = async () => {\r\n    // Mock implementation\r\n    const mockData = {\r\n      tokens: [\r\n        { symbol: \"APT\", price: 10.0, change24h: 2.5 },\r\n        { symbol: \"stAPT\", price: 10.5, change24h: 2.6 },\r\n        { symbol: \"tAPT\", price: 10.3, change24h: 2.4 }\r\n      ]\r\n    };\r\n    \r\n    setMarketData(mockData);\r\n    return mockData;\r\n  };\r\n\r\n  // Fetch news data\r\n  const fetchNewsData = async () => {\r\n    // Mock implementation\r\n    const mockData = [\r\n      { id: 1, title: \"New Staking Protocol Launches on Aptos\", date: \"2025-03-20\", url: \"#\" },\r\n      { id: 2, title: \"Aptos DeFi TVL Reaches New ATH\", date: \"2025-03-25\", url: \"#\" }\r\n    ];\r\n    \r\n    setNewsData(mockData);\r\n    return mockData;\r\n  };\r\n\r\n  // Load recommendation history\r\n  const loadRecommendationHistory = async () => {\r\n    // Mock implementation\r\n    const history = [\r\n      {\r\n        title: \"Balanced Yield Strategy\",\r\n        timestamp: new Date(Date.now() - 86400000).toISOString(),\r\n        totalApr: \"7.8\",\r\n        allocation: [\r\n          { protocol: \"Amnis\", product: \"Liquid Staking\", percentage: 40 },\r\n          { protocol: \"Thala\", product: \"Liquid Staking\", percentage: 30 },\r\n          { protocol: \"PancakeSwap\", product: \"AMM Liquidity\", percentage: 20 },\r\n          { protocol: \"Ditto\", product: \"Liquid Staking\", percentage: 10 }\r\n        ]\r\n      },\r\n      {\r\n        title: \"Conservative Staking\",\r\n        timestamp: new Date(Date.now() - 7 * 86400000).toISOString(),\r\n        totalApr: \"7.3\",\r\n        allocation: [\r\n          { protocol: \"Amnis\", product: \"Liquid Staking\", percentage: 50 },\r\n          { protocol: \"Thala\", product: \"Liquid Staking\", percentage: 50 }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    setRecommendationHistory(history);\r\n    return history;\r\n  };\r\n\r\n  // Save a recommendation to history\r\n  const saveRecommendation = (recommendation) => {\r\n    if (!recommendation) return;\r\n    \r\n    const updatedRecommendation = {\r\n      ...recommendation,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setRecommendationHistory(prev => [updatedRecommendation, ...prev]);\r\n    return updatedRecommendation;\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isLoading,\r\n    portfolioData,\r\n    stakingData,\r\n    marketData,\r\n    newsData,\r\n    lastUpdated,\r\n    error,\r\n    recommendationHistory,\r\n    refreshData: fetchData,\r\n    fetchPortfolioData,\r\n    loadRecommendationHistory,\r\n    saveRecommendation\r\n  };\r\n\r\n  return (\r\n    <DataContext.Provider value={value}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the data context\r\nexport const useData = () => {\r\n  const context = useContext(DataContext);\r\n  if (!context) {\r\n    throw new Error('useData must be used within a DataProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default DataContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}